{
  "address": "0x8B609C2502202Cbd828B9dD2E13A9Df23214b9d9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousRedeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRedeemer",
          "type": "address"
        }
      ],
      "name": "UpdatedRedeemer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenList",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "claimCompAndConvertTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRedeemer",
          "type": "address"
        }
      ],
      "name": "updateRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSwapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0x8B609C2502202Cbd828B9dD2E13A9Df23214b9d9",
    "transactionIndex": 30,
    "gasUsed": "10781289",
    "logsBloom": "0x000010040000004000800000000000000000000000004000000100000002000000241000001009000000031400000900800000000000002000000000202000000004000000000002080000086000000000020000000000020000400000000000900000000200000000000000000008000000002000000000000200000020042000000000000000000040000000010002000400000100000000002004021000200a0000000000280000000080000000000000000000000000001000000800004000000001000000800000000420000000000402020400000108020000100020000014100000000000000000000080400004000000000002110000000000000000",
    "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0",
    "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0D4aB7A64BeDF19FceeCE9bA312a01C4ab5001B5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0D4aB7A64BeDF19FceeCE9bA312a01C4ab5001B5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x0000000000000000000000000d4ab7a64bedf19fceece9ba312a01c4ab5001b5"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0F33Df4D034D25c3035FAa0C66317Dd2e25Ff8d9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0F33Df4D034D25c3035FAa0C66317Dd2e25Ff8d9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x0000000000000000000000000f33df4d034d25c3035faa0c66317dd2e25ff8d9"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x172bE1752d7a0c67820559Af661f098e9259F9c9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x172bE1752d7a0c67820559Af661f098e9259F9c9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000172be1752d7a0c67820559af661f098e9259f9c9"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x172bE1752d7a0c67820559Af661f098e9259F9c9",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000b5abdabe50b5193d4db92a16011792b22ba3ef51",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0D4aB7A64BeDF19FceeCE9bA312a01C4ab5001B5",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0F33Df4D034D25c3035FAa0C66317Dd2e25Ff8d9",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 110,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0D4aB7A64BeDF19FceeCE9bA312a01C4ab5001B5",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 111,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0F33Df4D034D25c3035FAa0C66317Dd2e25Ff8d9",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 113,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0D4aB7A64BeDF19FceeCE9bA312a01C4ab5001B5",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0x0F33Df4D034D25c3035FAa0C66317Dd2e25Ff8d9",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 116,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 117,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 12866304,
        "transactionHash": "0xcfe0a082fe0dddfdc726b10b6d582ebeb8cb31cd09f8012751799449688d7298",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008b609c2502202cbd828b9dd2e13a9df23214b9d9",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 118,
        "blockHash": "0x509a42ac2e6e1d4a1db5c94f50368289c19eb99d526326d6dcd1bc09ce3c65e0"
      }
    ],
    "blockNumber": 12866304,
    "cumulativeGasUsed": "14008167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619"
  ],
  "solcInputHash": "67e43f5c13609e7c93c7e3c2c1c52dc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRedeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"}],\"name\":\"UpdatedRedeemer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenList\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"claimCompAndConvertTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRedeemer\",\"type\":\"address\"}],\"name\":\"updateRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"addWhitelistedToken(address,address)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_token\":\"address which we want to add in token list.\"}},\"claimCompAndConvertTo(address,uint256)\":{\"params\":{\"_minOut\":\"Minimum _toToken expected after conversion\",\"_toToken\":\"COMP will be swapped to _toToken\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"migrate(address)\":{\"params\":{\"_newTreasury\":\"Address of new treasury of VUSD system\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"removeWhitelistedToken(address)\":{\"details\":\"Removing token even if treasury has some balance of that token is intended behavior.\",\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"sweep(address)\":{\"details\":\"OnlyGovernor can call this and CTokens are not allowed to sweep\",\"params\":{\"_fromToken\":\"Token address to sweep\"}},\"updateRedeemer(address)\":{\"params\":{\"_newRedeemer\":\"new redeemer address\"}},\"updateSwapManager(address)\":{\"params\":{\"_newSwapManager\":\"new swap manager address\"}},\"withdraw(address,uint256)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\",\"_tokenReceiver\":\"Address of token receiver\"}},\"withdrawAll(address[])\":{\"details\":\"Only Governor is allowed to call.\",\"params\":{\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawMulti(address[],uint256[])\":{\"details\":\"Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length\",\"params\":{\"_amounts\":\"Array of token amount to withdraw\",\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawable(address)\":{\"params\":{\"_token\":\"Token to withdraw\"}}},\"title\":\"VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"addWhitelistedToken(address,address)\":{\"notice\":\"Add token into treasury management system\"},\"claimCompAndConvertTo(address,uint256)\":{\"notice\":\"Claim comp from all markets and convert to given token. Also deposit those tokens to Compound\"},\"migrate(address)\":{\"notice\":\"Migrate assets to new treasury\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from treasury management system\"},\"sweep(address)\":{\"notice\":\"Sweep any ERC20 token to governor address\"},\"updateRedeemer(address)\":{\"notice\":\"Update redeemer address\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdrawAll(address[])\":{\"notice\":\"Withdraw all of multiple tokens.\"},\"withdrawMulti(address[],uint256[])\":{\"notice\":\"Withdraw multiple tokens.\"},\"withdrawable(address)\":{\"notice\":\"Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"./interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\n/// @title VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\\ncontract Treasury is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"VUSD-Treasury\\\";\\n    string public constant VERSION = \\\"1.1.0\\\";\\n\\n    IAddressList public immutable whitelistedTokens;\\n    IAddressList public immutable cTokenList;\\n    IAddressList public immutable keepers;\\n    IVUSD public immutable vusd;\\n    address public redeemer;\\n\\n    ISwapManager public swapManager = ISwapManager(0xC48ea9A2daA4d816e4c9333D6689C70070010174);\\n    mapping(address => address) public cTokens;\\n\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    // solhint-disable const-name-snakecase\\n    address internal constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address internal constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n    address internal constant cUSDT = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\\n    // solhint-enable\\n\\n    event UpdatedRedeemer(address indexed previousRedeemer, address indexed newRedeemer);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n\\n    constructor(address _vusd) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n\\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\\n        IAddressList _cTokenList = IAddressList(_factory.createList());\\n        IAddressList _keepers = IAddressList(_factory.createList());\\n        _keepers.add(_msgSender());\\n\\n        // Add token into the list, add cToken into the mapping\\n        _addToken(_whitelistedTokens, DAI, _cTokenList, cDAI);\\n        _addToken(_whitelistedTokens, USDC, _cTokenList, cUSDC);\\n        _addToken(_whitelistedTokens, USDT, _cTokenList, cUSDT);\\n\\n        whitelistedTokens = _whitelistedTokens;\\n        cTokenList = _cTokenList;\\n        keepers = _keepers;\\n        _approveRouters(swapManager, type(uint256).max);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(_msgSender() == governor() || _msgSender() == redeemer, \\\"caller-is-not-authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeperOrGovernor() {\\n        require(_msgSender() == governor() || keepers.contains(_msgSender()), \\\"caller-is-not-authorized\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token into treasury management system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     */\\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\\n        require(_token != address(0), \\\"token-address-is-zero\\\");\\n        require(_cToken != address(0), \\\"cToken-address-is-zero\\\");\\n        _addToken(whitelistedTokens, _token, cTokenList, _cToken);\\n    }\\n\\n    /**\\n     * @notice Remove token from treasury management system\\n     * @dev Removing token even if treasury has some balance of that token is intended behavior.\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        require(cTokenList.remove(cTokens[_token]), \\\"remove-from-list-failed\\\");\\n        IERC20(_token).approve(cTokens[_token], 0);\\n        delete cTokens[_token];\\n    }\\n\\n    /**\\n     * @notice Update redeemer address\\n     * @param _newRedeemer new redeemer address\\n     */\\n    function updateRedeemer(address _newRedeemer) external onlyGovernor {\\n        require(_newRedeemer != address(0), \\\"redeemer-address-is-zero\\\");\\n        require(redeemer != _newRedeemer, \\\"same-redeemer\\\");\\n        emit UpdatedRedeemer(redeemer, _newRedeemer);\\n        redeemer = _newRedeemer;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keeperAddress != address(0), \\\"keeper-address-is-zero\\\");\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _newSwapManager new swap manager address\\n     */\\n    function updateSwapManager(address _newSwapManager) external onlyGovernor {\\n        require(_newSwapManager != address(0), \\\"swap-manager-address-is-zero\\\");\\n        emit UpdatedSwapManager(address(swapManager), _newSwapManager);\\n        _approveRouters(swapManager, 0);\\n        _approveRouters(ISwapManager(_newSwapManager), type(uint256).max);\\n        swapManager = ISwapManager(_newSwapManager);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Claim comp from all markets and convert to given token.\\n     * Also deposit those tokens to Compound\\n     * @param _toToken COMP will be swapped to _toToken\\n     * @param _minOut Minimum _toToken expected after conversion\\n     */\\n    function claimCompAndConvertTo(address _toToken, uint256 _minOut) external onlyKeeperOrGovernor {\\n        require(whitelistedTokens.contains(_toToken), \\\"token-is-not-supported\\\");\\n        uint256 _len = cTokenList.length();\\n        address[] memory _market = new address[](_len);\\n        for (uint8 i = 0; i < _len; i++) {\\n            (_market[i], ) = cTokenList.at(i);\\n        }\\n        COMPTROLLER.claimComp(address(this), _market);\\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(COMP, _toToken, _compAmount);\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _compAmount,\\n                _minOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n        require(CToken(cTokens[_toToken]).mint(IERC20(_toToken).balanceOf(address(this))) == 0, \\\"cToken-mint-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate assets to new treasury\\n     * @param _newTreasury Address of new treasury of VUSD system\\n     */\\n    function migrate(address _newTreasury) external onlyGovernor {\\n        require(_newTreasury != address(0), \\\"new-treasury-address-is-zero\\\");\\n        require(address(vusd) == ITreasury(_newTreasury).vusd(), \\\"vusd-mismatch\\\");\\n        uint256 _len = cTokenList.length();\\n        for (uint256 i = 0; i < _len; i++) {\\n            (address _cToken, ) = cTokenList.at(i);\\n            IERC20(_cToken).safeTransfer(_newTreasury, IERC20(_cToken).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     */\\n    function withdraw(address _token, uint256 _amount) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     * @param _tokenReceiver Address of token receiver\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _tokenReceiver);\\n    }\\n\\n    /**\\n     * @notice Withdraw multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @dev _tokens and _amounts array are 1:1 and should have same length\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     * @param _amounts Array of token amount to withdraw\\n     */\\n    function withdrawMulti(address[] memory _tokens, uint256[] memory _amounts) external nonReentrant onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"input-length-mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _withdraw(_tokens[i], _amounts[i], _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw all of multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     */\\n    function withdrawAll(address[] memory _tokens) external nonReentrant onlyGovernor {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(whitelistedTokens.contains(_tokens[i]), \\\"token-is-not-supported\\\");\\n            CToken _cToken = CToken(cTokens[_tokens[i]]);\\n            require(_cToken.redeem(_cToken.balanceOf(address(this))) == 0, \\\"redeem-failed\\\");\\n            IERC20(_tokens[i]).safeTransfer(_msgSender(), IERC20(_tokens[i]).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Sweep any ERC20 token to governor address\\n     * @dev OnlyGovernor can call this and CTokens are not allowed to sweep\\n     * @param _fromToken Token address to sweep\\n     */\\n    function sweep(address _fromToken) external onlyGovernor {\\n        // Do not sweep cTokens\\n        require(!cTokenList.contains(_fromToken), \\\"cToken-is-not-allowed-to-sweep\\\");\\n\\n        uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n        IERC20(_fromToken).safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @notice Current withdrawable amount for given token.\\n     * If token is not supported by treasury, no cTokens in mapping, it will return 0.\\n     * @param _token Token to withdraw\\n     */\\n    function withdrawable(address _token) external view returns (uint256) {\\n        if (cTokens[_token] != address(0)) {\\n            CToken _cToken = CToken(cTokens[_token]);\\n            return (_cToken.balanceOf(address(this)) * _cToken.exchangeRateStored()) / 1e18;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /// @dev Add _token into the list, add _cToken in mapping\\n    function _addToken(\\n        IAddressList _list,\\n        address _token,\\n        IAddressList _cTokenList,\\n        address _cToken\\n    ) internal {\\n        require(_list.add(_token), \\\"add-in-list-failed\\\");\\n        require(_cTokenList.add(_cToken), \\\"add-in-list-failed\\\");\\n        cTokens[_token] = _cToken;\\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\\n    }\\n\\n    /// @notice Approve all routers to spend COMP\\n    function _approveRouters(ISwapManager _swapManager, uint256 _amount) internal {\\n        for (uint256 i = 0; i < _swapManager.N_DEX(); i++) {\\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    function _withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) internal {\\n        require(whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        require(CToken(cTokens[_token]).redeemUnderlying(_amount) == 0, \\\"redeem-underlying-failed\\\");\\n        IERC20(_token).safeTransfer(_tokenReceiver, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x706b2ebc7d0ad544631677e4876d4068d98e8a001ad1cd766c4d792ce6251118\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./bloq/IAddressList.sol\\\";\\n\\ninterface ITreasury {\\n    function withdraw(address _token, uint256 _amount) external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external;\\n\\n    function withdrawable(address _token) external view returns (uint256);\\n\\n    function whitelistedTokens() external view returns (IAddressList);\\n\\n    function vusd() external view returns (address);\\n}\\n\",\"keccak256\":\"0x035de37738bdf36e7a3ea6a2b4d09ee852f839087d536752cdf996e6a8e256b6\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x1c7aaf3402f7e1eb42959586b9a8bd51e03a6375d775deea1e0d353ba2328691\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../uniswap/IUniswap.sol\\\";\\n\\n//solhint-disable func-name-mixedcase\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswap);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xe8eb05919bc786056ab0c6368d50416d6d6b95e5f02acbd15dd2ae47cf77e756\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IUniswap {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa1edf985455d4e6aa0695cd9ddd6a3501d1ede39fb48776f8b572d57c5151d1c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806369328dec116100c3578063a3f4df7e1161007c578063a3f4df7e14610375578063ce513b6f14610393578063ce5494bb146103c3578063edac5203146103df578063f3fef3a3146103fd578063ffa1ad741461041957610158565b806369328dec146102b35780636a95385f146102cf578063709d039d146102ed5780637d138e131461030b5780638c0b09d014610327578063951dc22c1461035757610158565b80634032b72b116101155780634032b72b1461020957806342841531146102255780634c36fad71461024157806356f0693e1461025d5780635e1762a0146102795780636568a2791461029757610158565b806301681a621461015d57806301ac8559146101795780630c340a241461019557806314ae9f2e146101b35780631c88705d146101cf5780632ba29d38146101eb575b600080fd5b61017760048036038101906101729190613c72565b610437565b005b610193600480360381019061018e9190613cc4565b61065f565b005b61019d61080b565b6040516101aa9190614471565b60405180910390f35b6101cd60048036038101906101c89190613c72565b6108b0565b005b6101e960048036038101906101e49190613c72565b610a19565b005b6101f3610e1b565b6040516102009190614471565b60405180910390f35b610223600480360381019061021e9190613c72565b610e41565b005b61023f600480360381019061023a9190613e08565b61101a565b005b61025b60048036038101906102569190613c72565b6111e6565b005b61027760048036038101906102729190613d00565b6113e9565b005b610281611d57565b60405161028e919061456e565b60405180910390f35b6102b160048036038101906102ac9190613dc7565b611d7b565b005b6102cd60048036038101906102c89190613d78565b6122cc565b005b6102d761240d565b6040516102e4919061456e565b60405180910390f35b6102f5612431565b6040516103029190614589565b60405180910390f35b61032560048036038101906103209190613c72565b612457565b005b610341600480360381019061033c9190613c72565b612694565b60405161034e9190614471565b60405180910390f35b61035f6126c7565b60405161036c919061456e565b60405180910390f35b61037d6126eb565b60405161038a91906145bf565b60405180910390f35b6103ad60048036038101906103a89190613c72565b612724565b6040516103ba9190614901565b60405180910390f35b6103dd60048036038101906103d89190613c72565b612952565b005b6103e7612d6f565b6040516103f491906145a4565b60405180910390f35b61041760048036038101906104129190613d00565b612d93565b005b610421612eda565b60405161042e91906145bf565b60405180910390f35b61043f61080b565b73ffffffffffffffffffffffffffffffffffffffff1661045d613089565b73ffffffffffffffffffffffffffffffffffffffff16146104b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104aa906146e1565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8826040518263ffffffff1660e01b815260040161050c9190614471565b60206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190613f1c565b1561059c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610593906145e1565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105d79190614471565b60206040518083038186803b1580156105ef57600080fd5b505afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190613f6e565b905061065b610634613089565b828473ffffffffffffffffffffffffffffffffffffffff166130919092919063ffffffff16565b5050565b61066761080b565b73ffffffffffffffffffffffffffffffffffffffff16610685613089565b73ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906146e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074290614701565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290614601565b60405180910390fd5b6108077f0000000000000000000000000000000000000000000000000000000000000000837f000000000000000000000000000000000000000000000000000000000000000084613117565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190613c9b565b905090565b6108b861080b565b73ffffffffffffffffffffffffffffffffffffffff166108d6613089565b73ffffffffffffffffffffffffffffffffffffffff161461092c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610923906146e1565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b81526004016109859190614471565b602060405180830381600087803b15801561099f57600080fd5b505af11580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190613f1c565b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d90614681565b60405180910390fd5b50565b610a2161080b565b73ffffffffffffffffffffffffffffffffffffffff16610a3f613089565b73ffffffffffffffffffffffffffffffffffffffff1614610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c906146e1565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b8152600401610aee9190614471565b602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190613f1c565b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7690614781565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610c379190614471565b602060405180830381600087803b158015610c5157600080fd5b505af1158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190613f1c565b610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf90614781565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518363ffffffff1660e01b8152600401610d6392919061451c565b602060405180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190613f1c565b50600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e4961080b565b73ffffffffffffffffffffffffffffffffffffffff16610e67613089565b73ffffffffffffffffffffffffffffffffffffffff1614610ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb4906146e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f24906148e1565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b8152600401610f869190614471565b602060405180830381600087803b158015610fa057600080fd5b505af1158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd89190613f1c565b611017576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100e90614621565b60405180910390fd5b50565b60026000541415611060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105790614881565b60405180910390fd5b600260008190555061107061080b565b73ffffffffffffffffffffffffffffffffffffffff1661108e613089565b73ffffffffffffffffffffffffffffffffffffffff16146110e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110db906146e1565b60405180910390fd5b8051825114611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111f90614641565b60405180910390fd5b60005b82518110156111d9576111c6838281518110611170577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518383815181106111b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516111c1613089565b61337a565b80806111d190614c5f565b91505061112b565b5060016000819055505050565b6111ee61080b565b73ffffffffffffffffffffffffffffffffffffffff1661120c613089565b73ffffffffffffffffffffffffffffffffffffffff1614611262576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611259906146e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c990614821565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e160405160405180910390a361137b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006135be565b6113a5817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6135be565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113f161080b565b73ffffffffffffffffffffffffffffffffffffffff1661140f613089565b73ffffffffffffffffffffffffffffffffffffffff1614806114dd57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8611470613089565b6040518263ffffffff1660e01b815260040161148c9190614471565b60206040518083038186803b1580156114a457600080fd5b505afa1580156114b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dc9190613f1c565b5b61151c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611513906148c1565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8836040518263ffffffff1660e01b81526004016115759190614471565b60206040518083038186803b15801561158d57600080fd5b505afa1580156115a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c59190613f1c565b611604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fb90614721565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a49190613f6e565b905060008167ffffffffffffffff8111156116e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117165781602001602082028036833780820191505090505b50905060005b828160ff161015611857577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e0886f90826040518263ffffffff1660e01b81526004016117809190614976565b604080518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190613d3c565b50828260ff168151811061180c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050808061184f90614ca8565b91505061171c565b50733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16631c3db2e030836040518363ffffffff1660e01b81526004016118a79291906144ec565b600060405180830381600087803b1580156118c157600080fd5b505af11580156118d5573d6000803e3d6000fd5b50505050600073c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119289190614471565b60206040518083038186803b15801561194057600080fd5b505afa158015611954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119789190613f6e565b90506000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8f983c873c00e94cb662c3520282e6f5717214004a7f268888a876040518463ffffffff1660e01b81526004016119f2939291906144b5565b60006040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a479190613e74565b92509250925060008214611b9957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7826040518263ffffffff1660e01b8152600401611ab09190614901565b60206040518083038186803b158015611ac857600080fd5b505afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b009190613f45565b73ffffffffffffffffffffffffffffffffffffffff166338ed173985898630426040518663ffffffff1660e01b8152600401611b4095949392919061491c565b600060405180830381600087803b158015611b5a57600080fd5b505af1158015611b6e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b979190613edb565b505b6000600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d688a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c4f9190614471565b60206040518083038186803b158015611c6757600080fd5b505afa158015611c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9f9190613f6e565b6040518263ffffffff1660e01b8152600401611cbb9190614901565b602060405180830381600087803b158015611cd557600080fd5b505af1158015611ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0d9190613f6e565b14611d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4490614861565b60405180910390fd5b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415611dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db890614881565b60405180910390fd5b6002600081905550611dd161080b565b73ffffffffffffffffffffffffffffffffffffffff16611def613089565b73ffffffffffffffffffffffffffffffffffffffff1614611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c906146e1565b60405180910390fd5b60005b81518110156122c0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8838381518110611ec6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611eea9190614471565b60206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a9190613f1c565b611f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7090614721565b60405180910390fd5b600060036000848481518110611fb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663db006a758373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016120749190614471565b60206040518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190613f6e565b6040518263ffffffff1660e01b81526004016120e09190614901565b602060405180830381600087803b1580156120fa57600080fd5b505af115801561210e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121329190613f6e565b14612172576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612169906147e1565b60405180910390fd5b6122ac61217d613089565b8484815181106121b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121f69190614471565b60206040518083038186803b15801561220e57600080fd5b505afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122469190613f6e565b85858151811061227f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166130919092919063ffffffff16565b5080806122b890614c5f565b915050611e48565b50600160008190555050565b60026000541415612312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230990614881565b60405180910390fd5b600260008190555061232261080b565b73ffffffffffffffffffffffffffffffffffffffff16612340613089565b73ffffffffffffffffffffffffffffffffffffffff1614806123b65750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661239e613089565b73ffffffffffffffffffffffffffffffffffffffff16145b6123f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ec906148c1565b60405180910390fd5b61240083838361337a565b6001600081905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61245f61080b565b73ffffffffffffffffffffffffffffffffffffffff1661247d613089565b73ffffffffffffffffffffffffffffffffffffffff16146124d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ca906146e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a906146c1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156125d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cb90614761565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbb0958cd5add04c553a378aa342c839507b619a0459617e004c5d13602cfa72360405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600d81526020017f565553442d54726561737572790000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612948576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561286b57600080fd5b505afa15801561287f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a39190613f6e565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016128dc9190614471565b60206040518083038186803b1580156128f457600080fd5b505afa158015612908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292c9190613f6e565b6129369190614aaa565b6129409190614a79565b91505061294d565b600090505b919050565b61295a61080b565b73ffffffffffffffffffffffffffffffffffffffff16612978613089565b73ffffffffffffffffffffffffffffffffffffffff16146129ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c5906146e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3590614661565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663edac52036040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8457600080fd5b505afa158015612a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abc9190613c9b565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614612b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b40906147c1565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb157600080fd5b505afa158015612bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be99190613f6e565b905060005b81811015612d6a5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e0886f90836040518263ffffffff1660e01b8152600401612c519190614901565b604080518083038186803b158015612c6857600080fd5b505afa158015612c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca09190613d3c565b509050612d56848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612ce09190614471565b60206040518083038186803b158015612cf857600080fd5b505afa158015612d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d309190613f6e565b8373ffffffffffffffffffffffffffffffffffffffff166130919092919063ffffffff16565b508080612d6290614c5f565b915050612bee565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415612dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd090614881565b60405180910390fd5b6002600081905550612de961080b565b73ffffffffffffffffffffffffffffffffffffffff16612e07613089565b73ffffffffffffffffffffffffffffffffffffffff161480612e7d5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612e65613089565b73ffffffffffffffffffffffffffffffffffffffff16145b612ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb3906148c1565b60405180910390fd5b612ece8282612ec9613089565b61337a565b60016000819055505050565b6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6000811480612fac575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612f5a92919061448c565b60206040518083038186803b158015612f7257600080fd5b505afa158015612f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612faa9190613f6e565b145b612feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe2906148a1565b60405180910390fd5b61306c8363095ea7b360e01b848460405160240161300a929190614545565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613747565b505050565b6060613080848460008561380e565b90509392505050565b600033905090565b6131128363a9059cbb60e01b84846040516024016130b0929190614545565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613747565b505050565b8373ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f846040518263ffffffff1660e01b81526004016131509190614471565b602060405180830381600087803b15801561316a57600080fd5b505af115801561317e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a29190613f1c565b6131e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d890614741565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b815260040161321a9190614471565b602060405180830381600087803b15801561323457600080fd5b505af1158015613248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326c9190613f1c565b6132ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a290614741565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613374817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8573ffffffffffffffffffffffffffffffffffffffff16612f139092919063ffffffff16565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b81526004016133d39190614471565b60206040518083038186803b1580156133eb57600080fd5b505afa1580156133ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134239190613f1c565b613462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161345990614721565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b81526004016134fc9190614901565b602060405180830381600087803b15801561351657600080fd5b505af115801561352a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354e9190613f6e565b1461358e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613585906147a1565b60405180910390fd5b6135b981838573ffffffffffffffffffffffffffffffffffffffff166130919092919063ffffffff16565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561360757600080fd5b505afa15801561361b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363f9190613f6e565b8110156137425761372f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7836040518263ffffffff1660e01b81526004016136a49190614901565b60206040518083038186803b1580156136bc57600080fd5b505afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f49190613f45565b8373c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff16612f139092919063ffffffff16565b808061373a90614c5f565b9150506135c1565b505050565b60006137a9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130719092919063ffffffff16565b905060008151111561380957808060200190518101906137c99190613f1c565b613808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137ff90614841565b60405180910390fd5b5b505050565b606082471015613853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384a906146a1565b60405180910390fd5b61385c85613922565b61389b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389290614801565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516138c4919061445a565b60006040518083038185875af1925050503d8060008114613901576040519150601f19603f3d011682016040523d82523d6000602084013e613906565b606091505b5091509150613916828286613935565b92505050949350505050565b600080823b905060008111915050919050565b6060831561394557829050613995565b6000835111156139585782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161398c91906145bf565b60405180910390fd5b9392505050565b60006139af6139aa846149b6565b614991565b905080838252602082019050828560208602820111156139ce57600080fd5b60005b858110156139fe57816139e48882613b4c565b8452602084019350602083019250506001810190506139d1565b5050509392505050565b6000613a1b613a16846149b6565b614991565b90508083825260208201905082856020860282011115613a3a57600080fd5b60005b85811015613a6a5781613a508882613b61565b845260208401935060208301925050600181019050613a3d565b5050509392505050565b6000613a87613a82846149e2565b614991565b90508083825260208201905082856020860282011115613aa657600080fd5b60005b85811015613ad65781613abc8882613c48565b845260208401935060208301925050600181019050613aa9565b5050509392505050565b6000613af3613aee846149e2565b614991565b90508083825260208201905082856020860282011115613b1257600080fd5b60005b85811015613b425781613b288882613c5d565b845260208401935060208301925050600181019050613b15565b5050509392505050565b600081359050613b5b816151e3565b92915050565b600081519050613b70816151e3565b92915050565b600082601f830112613b8757600080fd5b8135613b9784826020860161399c565b91505092915050565b600082601f830112613bb157600080fd5b8151613bc1848260208601613a08565b91505092915050565b600082601f830112613bdb57600080fd5b8135613beb848260208601613a74565b91505092915050565b600082601f830112613c0557600080fd5b8151613c15848260208601613ae0565b91505092915050565b600081519050613c2d816151fa565b92915050565b600081519050613c4281615211565b92915050565b600081359050613c5781615228565b92915050565b600081519050613c6c81615228565b92915050565b600060208284031215613c8457600080fd5b6000613c9284828501613b4c565b91505092915050565b600060208284031215613cad57600080fd5b6000613cbb84828501613b61565b91505092915050565b60008060408385031215613cd757600080fd5b6000613ce585828601613b4c565b9250506020613cf685828601613b4c565b9150509250929050565b60008060408385031215613d1357600080fd5b6000613d2185828601613b4c565b9250506020613d3285828601613c48565b9150509250929050565b60008060408385031215613d4f57600080fd5b6000613d5d85828601613b61565b9250506020613d6e85828601613c5d565b9150509250929050565b600080600060608486031215613d8d57600080fd5b6000613d9b86828701613b4c565b9350506020613dac86828701613c48565b9250506040613dbd86828701613b4c565b9150509250925092565b600060208284031215613dd957600080fd5b600082013567ffffffffffffffff811115613df357600080fd5b613dff84828501613b76565b91505092915050565b60008060408385031215613e1b57600080fd5b600083013567ffffffffffffffff811115613e3557600080fd5b613e4185828601613b76565b925050602083013567ffffffffffffffff811115613e5e57600080fd5b613e6a85828601613bca565b9150509250929050565b600080600060608486031215613e8957600080fd5b600084015167ffffffffffffffff811115613ea357600080fd5b613eaf86828701613ba0565b9350506020613ec086828701613c5d565b9250506040613ed186828701613c5d565b9150509250925092565b600060208284031215613eed57600080fd5b600082015167ffffffffffffffff811115613f0757600080fd5b613f1384828501613bf4565b91505092915050565b600060208284031215613f2e57600080fd5b6000613f3c84828501613c1e565b91505092915050565b600060208284031215613f5757600080fd5b6000613f6584828501613c33565b91505092915050565b600060208284031215613f8057600080fd5b6000613f8e84828501613c5d565b91505092915050565b6000613fa38383613faf565b60208301905092915050565b613fb881614b04565b82525050565b613fc781614b04565b82525050565b6000613fd882614a1e565b613fe28185614a4c565b9350613fed83614a0e565b8060005b8381101561401e5781516140058882613f97565b975061401083614a3f565b925050600181019050613ff1565b5085935050505092915050565b600061403682614a29565b6140408185614a5d565b9350614050818560208601614bfb565b80840191505092915050565b61406581614b6b565b82525050565b61407481614b8f565b82525050565b61408381614bb3565b82525050565b61409281614bd7565b82525050565b60006140a382614a34565b6140ad8185614a68565b93506140bd818560208601614bfb565b6140c681614d5f565b840191505092915050565b60006140de601e83614a68565b91506140e982614d70565b602082019050919050565b6000614101601683614a68565b915061410c82614d99565b602082019050919050565b6000614124601183614a68565b915061412f82614dc2565b602082019050919050565b6000614147601583614a68565b915061415282614deb565b602082019050919050565b600061416a601c83614a68565b915061417582614e14565b602082019050919050565b600061418d601483614a68565b915061419882614e3d565b602082019050919050565b60006141b0602683614a68565b91506141bb82614e66565b604082019050919050565b60006141d3601883614a68565b91506141de82614eb5565b602082019050919050565b60006141f6601a83614a68565b915061420182614ede565b602082019050919050565b6000614219601583614a68565b915061422482614f07565b602082019050919050565b600061423c601683614a68565b915061424782614f30565b602082019050919050565b600061425f601283614a68565b915061426a82614f59565b602082019050919050565b6000614282600d83614a68565b915061428d82614f82565b602082019050919050565b60006142a5601783614a68565b91506142b082614fab565b602082019050919050565b60006142c8601883614a68565b91506142d382614fd4565b602082019050919050565b60006142eb600d83614a68565b91506142f682614ffd565b602082019050919050565b600061430e600d83614a68565b915061431982615026565b602082019050919050565b6000614331601d83614a68565b915061433c8261504f565b602082019050919050565b6000614354601c83614a68565b915061435f82615078565b602082019050919050565b6000614377602a83614a68565b9150614382826150a1565b604082019050919050565b600061439a601283614a68565b91506143a5826150f0565b602082019050919050565b60006143bd601f83614a68565b91506143c882615119565b602082019050919050565b60006143e0603683614a68565b91506143eb82615142565b604082019050919050565b6000614403601883614a68565b915061440e82615191565b602082019050919050565b6000614426601683614a68565b9150614431826151ba565b602082019050919050565b61444581614b54565b82525050565b61445481614be9565b82525050565b6000614466828461402b565b915081905092915050565b60006020820190506144866000830184613fbe565b92915050565b60006040820190506144a16000830185613fbe565b6144ae6020830184613fbe565b9392505050565b60006060820190506144ca6000830186613fbe565b6144d76020830185613fbe565b6144e4604083018461443c565b949350505050565b60006040820190506145016000830185613fbe565b81810360208301526145138184613fcd565b90509392505050565b60006040820190506145316000830185613fbe565b61453e6020830184614089565b9392505050565b600060408201905061455a6000830185613fbe565b614567602083018461443c565b9392505050565b6000602082019050614583600083018461405c565b92915050565b600060208201905061459e600083018461406b565b92915050565b60006020820190506145b9600083018461407a565b92915050565b600060208201905081810360008301526145d98184614098565b905092915050565b600060208201905081810360008301526145fa816140d1565b9050919050565b6000602082019050818103600083015261461a816140f4565b9050919050565b6000602082019050818103600083015261463a81614117565b9050919050565b6000602082019050818103600083015261465a8161413a565b9050919050565b6000602082019050818103600083015261467a8161415d565b9050919050565b6000602082019050818103600083015261469a81614180565b9050919050565b600060208201905081810360008301526146ba816141a3565b9050919050565b600060208201905081810360008301526146da816141c6565b9050919050565b600060208201905081810360008301526146fa816141e9565b9050919050565b6000602082019050818103600083015261471a8161420c565b9050919050565b6000602082019050818103600083015261473a8161422f565b9050919050565b6000602082019050818103600083015261475a81614252565b9050919050565b6000602082019050818103600083015261477a81614275565b9050919050565b6000602082019050818103600083015261479a81614298565b9050919050565b600060208201905081810360008301526147ba816142bb565b9050919050565b600060208201905081810360008301526147da816142de565b9050919050565b600060208201905081810360008301526147fa81614301565b9050919050565b6000602082019050818103600083015261481a81614324565b9050919050565b6000602082019050818103600083015261483a81614347565b9050919050565b6000602082019050818103600083015261485a8161436a565b9050919050565b6000602082019050818103600083015261487a8161438d565b9050919050565b6000602082019050818103600083015261489a816143b0565b9050919050565b600060208201905081810360008301526148ba816143d3565b9050919050565b600060208201905081810360008301526148da816143f6565b9050919050565b600060208201905081810360008301526148fa81614419565b9050919050565b6000602082019050614916600083018461443c565b92915050565b600060a082019050614931600083018861443c565b61493e602083018761443c565b81810360408301526149508186613fcd565b905061495f6060830185613fbe565b61496c608083018461443c565b9695505050505050565b600060208201905061498b600083018461444b565b92915050565b600061499b6149ac565b90506149a78282614c2e565b919050565b6000604051905090565b600067ffffffffffffffff8211156149d1576149d0614d30565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156149fd576149fc614d30565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000614a8482614b54565b9150614a8f83614b54565b925082614a9f57614a9e614d01565b5b828204905092915050565b6000614ab582614b54565b9150614ac083614b54565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614af957614af8614cd2565b5b828202905092915050565b6000614b0f82614b34565b9050919050565b60008115159050919050565b6000614b2d82614b04565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614b7682614b7d565b9050919050565b6000614b8882614b34565b9050919050565b6000614b9a82614ba1565b9050919050565b6000614bac82614b34565b9050919050565b6000614bbe82614bc5565b9050919050565b6000614bd082614b34565b9050919050565b6000614be282614b54565b9050919050565b6000614bf482614b5e565b9050919050565b60005b83811015614c19578082015181840152602081019050614bfe565b83811115614c28576000848401525b50505050565b614c3782614d5f565b810181811067ffffffffffffffff82111715614c5657614c55614d30565b5b80604052505050565b6000614c6a82614b54565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c9d57614c9c614cd2565b5b600182019050919050565b6000614cb382614b5e565b915060ff821415614cc757614cc6614cd2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f63546f6b656e2d69732d6e6f742d616c6c6f7765642d746f2d73776565700000600082015250565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6164642d6b65657065722d6661696c6564000000000000000000000000000000600082015250565b7f696e7075742d6c656e6774682d6d69736d617463680000000000000000000000600082015250565b7f6e65772d74726561737572792d616464726573732d69732d7a65726f00000000600082015250565b7f72656d6f76652d6b65657065722d6661696c6564000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f72656465656d65722d616464726573732d69732d7a65726f0000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d72656465656d657200000000000000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f72656465656d2d756e6465726c79696e672d6661696c65640000000000000000600082015250565b7f767573642d6d69736d6174636800000000000000000000000000000000000000600082015250565b7f72656465656d2d6661696c656400000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f737761702d6d616e616765722d616464726573732d69732d7a65726f00000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d617574686f72697a65640000000000000000600082015250565b7f6b65657065722d616464726573732d69732d7a65726f00000000000000000000600082015250565b6151ec81614b04565b81146151f757600080fd5b50565b61520381614b16565b811461520e57600080fd5b50565b61521a81614b22565b811461522557600080fd5b50565b61523181614b54565b811461523c57600080fd5b5056fea2646970667358221220315e94dd1658cd42b3a37b1a0fea087d5d99d74114c92a53b8d949d6f02be0ff64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "addWhitelistedToken(address,address)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_token": "address which we want to add in token list."
        }
      },
      "claimCompAndConvertTo(address,uint256)": {
        "params": {
          "_minOut": "Minimum _toToken expected after conversion",
          "_toToken": "COMP will be swapped to _toToken"
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "migrate(address)": {
        "params": {
          "_newTreasury": "Address of new treasury of VUSD system"
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "removeWhitelistedToken(address)": {
        "details": "Removing token even if treasury has some balance of that token is intended behavior.",
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "sweep(address)": {
        "details": "OnlyGovernor can call this and CTokens are not allowed to sweep",
        "params": {
          "_fromToken": "Token address to sweep"
        }
      },
      "updateRedeemer(address)": {
        "params": {
          "_newRedeemer": "new redeemer address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_newSwapManager": "new swap manager address"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens."
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens.",
          "_tokenReceiver": "Address of token receiver"
        }
      },
      "withdrawAll(address[])": {
        "details": "Only Governor is allowed to call.",
        "params": {
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawMulti(address[],uint256[])": {
        "details": "Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length",
        "params": {
          "_amounts": "Array of token amount to withdraw",
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawable(address)": {
        "params": {
          "_token": "Token to withdraw"
        }
      }
    },
    "title": "VUSD Treasury, It stores cTokens and redeem those from Compound as needed.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "addWhitelistedToken(address,address)": {
        "notice": "Add token into treasury management system"
      },
      "claimCompAndConvertTo(address,uint256)": {
        "notice": "Claim comp from all markets and convert to given token. Also deposit those tokens to Compound"
      },
      "migrate(address)": {
        "notice": "Migrate assets to new treasury"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from treasury management system"
      },
      "sweep(address)": {
        "notice": "Sweep any ERC20 token to governor address"
      },
      "updateRedeemer(address)": {
        "notice": "Update redeemer address"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw given amount of token."
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw given amount of token."
      },
      "withdrawAll(address[])": {
        "notice": "Withdraw all of multiple tokens."
      },
      "withdrawMulti(address[],uint256[])": {
        "notice": "Withdraw multiple tokens."
      },
      "withdrawable(address)": {
        "notice": "Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 734,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "redeemer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 740,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "swapManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwapManager)2207"
      },
      {
        "astId": 744,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "cTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)2207": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}