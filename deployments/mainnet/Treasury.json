{
  "address": "0x813E891e2Bb6729beF4185663624bd09F4902bD8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousRedeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRedeemer",
          "type": "address"
        }
      ],
      "name": "UpdatedRedeemer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenList",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "claimCompAndConvertTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRedeemer",
          "type": "address"
        }
      ],
      "name": "updateRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSwapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0x813E891e2Bb6729beF4185663624bd09F4902bD8",
    "transactionIndex": 10,
    "gasUsed": "8359228",
    "logsBloom": "0x000000040000000000800000000000001000000000004000000100000102000000041000001009000000030400000900000000000000002000000000202000000000000000000002080000084000000000000000000000000000400000000000100040800200000000000000000008000000002000000000004000000000022000000000000020000040000004010002000400000100100000002004021000000a0000000000200000000080000000000000000000000000001000200800004000000000000000000000000420000000000002024400000108020000000020000018000000000000000000000080400006000000800040110000000000000000",
    "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2",
    "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc4C51Ea17cCA9dC14068aB5867AE4f917eB6D67A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc4C51Ea17cCA9dC14068aB5867AE4f917eB6D67A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000c4c51ea17cca9dc14068ab5867ae4f917eb6d67a"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xB69ee5Ba8cf9151596CE91121D4C2c72A65ED224",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xB69ee5Ba8cf9151596CE91121D4C2c72A65ED224",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000b69ee5ba8cf9151596ce91121d4c2c72a65ed224"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc4C51Ea17cCA9dC14068aB5867AE4f917eB6D67A",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xB69ee5Ba8cf9151596CE91121D4C2c72A65ED224",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 44,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc4C51Ea17cCA9dC14068aB5867AE4f917eB6D67A",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xB69ee5Ba8cf9151596CE91121D4C2c72A65ED224",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 47,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc4C51Ea17cCA9dC14068aB5867AE4f917eB6D67A",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xB69ee5Ba8cf9151596CE91121D4C2c72A65ED224",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 50,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 51,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 12543409,
        "transactionHash": "0x03e5c4a1f7226da88017d779a9cf152daeb1c9065f6ef68201fab9497732200b",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000813e891e2bb6729bef4185663624bd09f4902bd8",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 52,
        "blockHash": "0x7ec4f2018c7a32c56f3d5621aaa146f9973733bdc0c1d1278ea9f583c6185af2"
      }
    ],
    "blockNumber": 12543409,
    "cumulativeGasUsed": "9278004",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619"
  ],
  "solcInputHash": "2421f05dab484b75fab1e136c8789882",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRedeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"}],\"name\":\"UpdatedRedeemer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenList\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"claimCompAndConvertTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRedeemer\",\"type\":\"address\"}],\"name\":\"updateRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelistedToken(address,address)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_token\":\"address which we want to add in token list.\"}},\"claimCompAndConvertTo(address)\":{\"params\":{\"_toToken\":\"COMP will be swapped to _toToken\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"removeWhitelistedToken(address)\":{\"details\":\"Removing token even if treasury has some balance of that token is intended behavior.\",\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"sweep(address)\":{\"details\":\"OnlyGovernor can call this and CTokens are not allowed to sweep\",\"params\":{\"_fromToken\":\"Token address to sweep\"}},\"updateRedeemer(address)\":{\"params\":{\"_newRedeemer\":\"new redeemer address\"}},\"updateSwapManager(address)\":{\"params\":{\"_newSwapManager\":\"new swap manager address\"}},\"withdraw(address,uint256)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\",\"_tokenReceiver\":\"Address of token receiver\"}},\"withdrawAll(address[])\":{\"details\":\"Only Governor is allowed to call.\",\"params\":{\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawMulti(address[],uint256[])\":{\"details\":\"Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length\",\"params\":{\"_amounts\":\"Array of token amount to withdraw\",\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawable(address)\":{\"params\":{\"_token\":\"Token to withdraw\"}}},\"title\":\"VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedToken(address,address)\":{\"notice\":\"Add token into treasury management system\"},\"claimCompAndConvertTo(address)\":{\"notice\":\"Claim comp from all markets and convert to given token. Also deposit those tokens to Compound\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from treasury management system\"},\"sweep(address)\":{\"notice\":\"Sweep any ERC20 token to governor address\"},\"updateRedeemer(address)\":{\"notice\":\"Update redeemer address\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdrawAll(address[])\":{\"notice\":\"Withdraw all of multiple tokens.\"},\"withdrawMulti(address[],uint256[])\":{\"notice\":\"Withdraw multiple tokens.\"},\"withdrawable(address)\":{\"notice\":\"Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ed084a02c5daa5bef324379ef57ebb3c930acec091a521083152e8291c95ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"./interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\n\\n/// @title VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\\ncontract Treasury is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"VUSD-Treasury\\\";\\n    string public constant VERSION = \\\"1.1.0\\\";\\n\\n    IAddressList public immutable whitelistedTokens;\\n    IAddressList public immutable cTokenList;\\n    IVUSD public immutable vusd;\\n    address public redeemer;\\n    ISwapManager public swapManager = ISwapManager(0xC48ea9A2daA4d816e4c9333D6689C70070010174);\\n    mapping(address => address) public cTokens;\\n\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    // solhint-disable const-name-snakecase\\n    address internal constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address internal constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n    address internal constant cUSDT = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\\n    // solhint-enable\\n\\n    event UpdatedRedeemer(address indexed previousRedeemer, address indexed newRedeemer);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n\\n    constructor(address _vusd) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n\\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\\n        IAddressList _cTokenList = IAddressList(_factory.createList());\\n        // Add token into the list, add cToken into the mapping\\n        _addToken(_whitelistedTokens, DAI, _cTokenList, cDAI);\\n        _addToken(_whitelistedTokens, USDC, _cTokenList, cUSDC);\\n        _addToken(_whitelistedTokens, USDT, _cTokenList, cUSDT);\\n\\n        whitelistedTokens = _whitelistedTokens;\\n        cTokenList = _cTokenList;\\n        _approveRouters(swapManager, type(uint256).max);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(_msgSender() == governor() || _msgSender() == redeemer, \\\"caller-is-not-authorized\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token into treasury management system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     */\\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\\n        require(_token != address(0), \\\"token-address-is-zero\\\");\\n        require(_cToken != address(0), \\\"cToken-address-is-zero\\\");\\n        _addToken(whitelistedTokens, _token, cTokenList, _cToken);\\n    }\\n\\n    /**\\n     * @notice Remove token from treasury management system\\n     * @dev Removing token even if treasury has some balance of that token is intended behavior.\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        require(cTokenList.remove(cTokens[_token]), \\\"remove-from-list-failed\\\");\\n        IERC20(_token).approve(cTokens[_token], 0);\\n        delete cTokens[_token];\\n    }\\n\\n    /**\\n     * @notice Update redeemer address\\n     * @param _newRedeemer new redeemer address\\n     */\\n    function updateRedeemer(address _newRedeemer) external onlyGovernor {\\n        require(_newRedeemer != address(0), \\\"redeemer-address-is-zero\\\");\\n        require(redeemer != _newRedeemer, \\\"same-redeemer\\\");\\n        emit UpdatedRedeemer(redeemer, _newRedeemer);\\n        redeemer = _newRedeemer;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _newSwapManager new swap manager address\\n     */\\n    function updateSwapManager(address _newSwapManager) external onlyGovernor {\\n        require(_newSwapManager != address(0), \\\"swap-manager-address-is-zero\\\");\\n        emit UpdatedSwapManager(address(swapManager), _newSwapManager);\\n        _approveRouters(swapManager, 0);\\n        _approveRouters(ISwapManager(_newSwapManager), type(uint256).max);\\n        swapManager = ISwapManager(_newSwapManager);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Claim comp from all markets and convert to given token.\\n     * Also deposit those tokens to Compound\\n     * @param _toToken COMP will be swapped to _toToken\\n     */\\n    function claimCompAndConvertTo(address _toToken) external onlyGovernor {\\n        require(whitelistedTokens.contains(_toToken), \\\"token-is-not-supported\\\");\\n        uint256 _len = cTokenList.length();\\n        address[] memory _market = new address[](_len);\\n        for (uint8 i = 0; i < _len; i++) {\\n            (_market[i], ) = cTokenList.at(i);\\n        }\\n        COMPTROLLER.claimComp(address(this), _market);\\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(COMP, _toToken, _compAmount);\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _compAmount,\\n                1,\\n                path,\\n                address(this),\\n                block.timestamp + 30\\n            );\\n        }\\n        require(CToken(cTokens[_toToken]).mint(IERC20(_toToken).balanceOf(address(this))) == 0, \\\"cToken-mint-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     */\\n    function withdraw(address _token, uint256 _amount) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     * @param _tokenReceiver Address of token receiver\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _tokenReceiver);\\n    }\\n\\n    /**\\n     * @notice Withdraw multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @dev _tokens and _amounts array are 1:1 and should have same length\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     * @param _amounts Array of token amount to withdraw\\n     */\\n    function withdrawMulti(address[] memory _tokens, uint256[] memory _amounts) external nonReentrant onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"input-length-mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _withdraw(_tokens[i], _amounts[i], _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw all of multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     */\\n    function withdrawAll(address[] memory _tokens) external nonReentrant onlyGovernor {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(whitelistedTokens.contains(_tokens[i]), \\\"token-is-not-supported\\\");\\n            CToken _cToken = CToken(cTokens[_tokens[i]]);\\n            require(_cToken.redeem(_cToken.balanceOf(address(this))) == 0, \\\"redeem-failed\\\");\\n            IERC20(_tokens[i]).safeTransfer(_msgSender(), IERC20(_tokens[i]).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Sweep any ERC20 token to governor address\\n     * @dev OnlyGovernor can call this and CTokens are not allowed to sweep\\n     * @param _fromToken Token address to sweep\\n     */\\n    function sweep(address _fromToken) external onlyGovernor {\\n        // Do not sweep cTokens\\n        require(!cTokenList.contains(_fromToken), \\\"cToken-is-not-allowed-to-sweep\\\");\\n\\n        uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n        IERC20(_fromToken).safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @notice Current withdrawable amount for given token.\\n     * If token is not supported by treasury, no cTokens in mapping, it will return 0.\\n     * @param _token Token to withdraw\\n     */\\n    function withdrawable(address _token) external view returns (uint256) {\\n        if (cTokens[_token] != address(0)) {\\n            CToken _cToken = CToken(cTokens[_token]);\\n            return (_cToken.balanceOf(address(this)) * _cToken.exchangeRateStored()) / 1e18;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /// @dev Add _token into the list, add _cToken in mapping\\n    function _addToken(\\n        IAddressList _list,\\n        address _token,\\n        IAddressList _cTokenList,\\n        address _cToken\\n    ) internal {\\n        require(_list.add(_token), \\\"add-in-list-failed\\\");\\n        require(_cTokenList.add(_cToken), \\\"add-in-list-failed\\\");\\n        cTokens[_token] = _cToken;\\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\\n    }\\n\\n    /// @notice Approve all routers to spend COMP\\n    function _approveRouters(ISwapManager _swapManager, uint256 _amount) internal {\\n        for (uint256 i = 0; i < _swapManager.N_DEX(); i++) {\\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    function _withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) internal {\\n        require(whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        require(CToken(cTokens[_token]).redeemUnderlying(_amount) == 0, \\\"redeem-underlying-failed\\\");\\n        IERC20(_token).safeTransfer(_tokenReceiver, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xeebcb6742a1caaf261be62638e0f587180f4282f4cf610c23a6e86405ea775eb\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x1c7aaf3402f7e1eb42959586b9a8bd51e03a6375d775deea1e0d353ba2328691\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../uniswap/IUniswap.sol\\\";\\n\\n//solhint-disable func-name-mixedcase\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswap);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xe8eb05919bc786056ab0c6368d50416d6d6b95e5f02acbd15dd2ae47cf77e756\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IUniswap {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa1edf985455d4e6aa0695cd9ddd6a3501d1ede39fb48776f8b572d57c5151d1c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405273c48ea9a2daa4d816e4c9333d6689c70070010174600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b5060405162005bef38038062005bef83398181016040528101906200008c919062000c70565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000107576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fe9062000f58565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050600073ded8217de022706a191ee7ee0dc9df1185fb5da3905060008173ffffffffffffffffffffffffffffffffffffffff16630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620001a257600080fd5b505af1158015620001b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001dd919062000c70565b905060008273ffffffffffffffffffffffffffffffffffffffff16630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200022a57600080fd5b505af11580156200023f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000265919062000c70565b9050620002a382736b175474e89094c44da98b954eedeac495271d0f83735d3a536e4d6dbd6114cc1ead35777bab948e3643620003e760201b60201c565b620002df8273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48837339aa39c021dfbae8fac545936693ac917d5e7563620003e760201b60201c565b6200031b8273dac17f958d2ee523a2206206994597c13d831ec78373f650c3d88d12db855b8bf7d11be6c55a4e07dcc9620003e760201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050620003dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6200066360201b60201c565b5050505062001365565b8373ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f846040518263ffffffff1660e01b815260040162000422919062000ebd565b602060405180830381600087803b1580156200043d57600080fd5b505af115801562000452573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000478919062000c9c565b620004ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004b19062000f9c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b8152600401620004f5919062000ebd565b602060405180830381600087803b1580156200051057600080fd5b505af115801562000525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054b919062000c9c565b6200058d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005849062000f9c565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200065d817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8573ffffffffffffffffffffffffffffffffffffffff166200080160201b62002647179092919060201c565b50505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015620006ad57600080fd5b505afa158015620006c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e8919062000cf4565b811015620007fc57620007e6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7836040518263ffffffff1660e01b815260040162000751919062001024565b60206040518083038186803b1580156200076a57600080fd5b505afa1580156200077f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007a5919062000cc8565b8373c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166200080160201b62002647179092919060201c565b8080620007f39062001107565b91505062000666565b505050565b6000811480620008a1575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016200084b92919062000eda565b60206040518083038186803b1580156200086457600080fd5b505afa15801562000879573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200089f919062000cf4565b145b620008e3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008da9062001002565b60405180910390fd5b6200096e8363095ea7b360e01b84846040516024016200090592919062000f07565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200097360201b60201c565b505050565b6000620009dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1662000a4760201b620027a5179092919060201c565b905060008151111562000a425780806020019051810190620009ff919062000c9c565b62000a41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a389062000fe0565b60405180910390fd5b5b505050565b606062000a5e848460008562000a6760201b60201c565b90509392505050565b60608247101562000aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000aa69062000f7a565b60405180910390fd5b62000ac08562000b9560201b60201c565b62000b02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000af99062000fbe565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405162000b2d919062000ea4565b60006040518083038185875af1925050503d806000811462000b6c576040519150601f19603f3d011682016040523d82523d6000602084013e62000b71565b606091505b509150915062000b8982828662000ba860201b60201c565b92505050949350505050565b600080823b905060008111915050919050565b6060831562000bba5782905062000c0d565b60008351111562000bce5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c04919062000f34565b60405180910390fd5b9392505050565b60008151905062000c2581620012fd565b92915050565b60008151905062000c3c8162001317565b92915050565b60008151905062000c538162001331565b92915050565b60008151905062000c6a816200134b565b92915050565b60006020828403121562000c8357600080fd5b600062000c938482850162000c14565b91505092915050565b60006020828403121562000caf57600080fd5b600062000cbf8482850162000c2b565b91505092915050565b60006020828403121562000cdb57600080fd5b600062000ceb8482850162000c42565b91505092915050565b60006020828403121562000d0757600080fd5b600062000d178482850162000c59565b91505092915050565b62000d2b8162001073565b82525050565b600062000d3e8262001041565b62000d4a818562001057565b935062000d5c818560208601620010d1565b80840191505092915050565b600062000d75826200104c565b62000d81818562001062565b935062000d93818560208601620010d1565b62000d9e8162001184565b840191505092915050565b600062000db860148362001062565b915062000dc58262001195565b602082019050919050565b600062000ddf60268362001062565b915062000dec82620011be565b604082019050919050565b600062000e0660128362001062565b915062000e13826200120d565b602082019050919050565b600062000e2d601d8362001062565b915062000e3a8262001236565b602082019050919050565b600062000e54602a8362001062565b915062000e61826200125f565b604082019050919050565b600062000e7b60368362001062565b915062000e8882620012ae565b604082019050919050565b62000e9e81620010c7565b82525050565b600062000eb2828462000d31565b915081905092915050565b600060208201905062000ed4600083018462000d20565b92915050565b600060408201905062000ef1600083018562000d20565b62000f00602083018462000d20565b9392505050565b600060408201905062000f1e600083018562000d20565b62000f2d602083018462000e93565b9392505050565b6000602082019050818103600083015262000f50818462000d68565b905092915050565b6000602082019050818103600083015262000f738162000da9565b9050919050565b6000602082019050818103600083015262000f958162000dd0565b9050919050565b6000602082019050818103600083015262000fb78162000df7565b9050919050565b6000602082019050818103600083015262000fd98162000e1e565b9050919050565b6000602082019050818103600083015262000ffb8162000e45565b9050919050565b600060208201905081810360008301526200101d8162000e6c565b9050919050565b60006020820190506200103b600083018462000e93565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006200108082620010a7565b9050919050565b60008115159050919050565b6000620010a08262001073565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620010f1578082015181840152602081019050620010d4565b8381111562001101576000848401525b50505050565b60006200111482620010c7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200114a576200114962001155565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f767573642d616464726573732d69732d7a65726f000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b620013088162001073565b81146200131457600080fd5b50565b620013228162001087565b81146200132e57600080fd5b50565b6200133c8162001093565b81146200134857600080fd5b50565b6200135681620010c7565b81146200136257600080fd5b50565b60805160601c60a05160601c60c05160601c614804620013eb6000396000818161077101526124a5015260008181610417015281816107440152818161097a015281816116c101528181611d480152611e69015260008181610722015281816108900152818161100b0152818161110501528181611c5e0152612ab001526148046000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636a95385f116100ad578063ce513b6f11610071578063ce513b6f146102f5578063de0c1c5d14610325578063edac520314610341578063f3fef3a31461035f578063ffa1ad741461037b5761012c565b80636a95385f1461024f578063709d039d1461026d5780637d138e131461028b5780638c0b09d0146102a7578063a3f4df7e146102d75761012c565b806342841531116100f457806342841531146101c15780634c36fad7146101dd5780635e1762a0146101f95780636568a2791461021757806369328dec146102335761012c565b806301681a621461013157806301ac85591461014d5780630c340a24146101695780631c88705d146101875780632ba29d38146101a3575b600080fd5b61014b600480360381019061014691906133a6565b610399565b005b610167600480360381019061016291906133f8565b6105c1565b005b61017161076d565b60405161017e9190613b05565b60405180910390f35b6101a1600480360381019061019c91906133a6565b610812565b005b6101ab610c14565b6040516101b89190613b05565b60405180910390f35b6101db60048036038101906101d6919061353c565b610c3a565b005b6101f760048036038101906101f291906133a6565b610e06565b005b610201611009565b60405161020e9190613c02565b60405180910390f35b610231600480360381019061022c91906134fb565b61102d565b005b61024d600480360381019061024891906134ac565b61157e565b005b6102576116bf565b6040516102649190613c02565b60405180910390f35b6102756116e3565b6040516102829190613c1d565b60405180910390f35b6102a560048036038101906102a091906133a6565b611709565b005b6102c160048036038101906102bc91906133a6565b611946565b6040516102ce9190613b05565b60405180910390f35b6102df611979565b6040516102ec9190613c53565b60405180910390f35b61030f600480360381019061030a91906133a6565b6119b2565b60405161031c9190613ef5565b60405180910390f35b61033f600480360381019061033a91906133a6565b611be0565b005b6103496124a3565b6040516103569190613c38565b60405180910390f35b61037960048036038101906103749190613434565b6124c7565b005b61038361260e565b6040516103909190613c53565b60405180910390f35b6103a161076d565b73ffffffffffffffffffffffffffffffffffffffff166103bf6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c90613d15565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8826040518263ffffffff1660e01b815260040161046e9190613b05565b60206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190613650565b156104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590613c75565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105399190613b05565b60206040518083038186803b15801561055157600080fd5b505afa158015610565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058991906136a2565b90506105bd6105966127bd565b828473ffffffffffffffffffffffffffffffffffffffff166127c59092919063ffffffff16565b5050565b6105c961076d565b73ffffffffffffffffffffffffffffffffffffffff166105e76127bd565b73ffffffffffffffffffffffffffffffffffffffff161461063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063490613d15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490613d35565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561071d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071490613c95565b60405180910390fd5b6107697f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000008461284b565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d91906133cf565b905090565b61081a61076d565b73ffffffffffffffffffffffffffffffffffffffff166108386127bd565b73ffffffffffffffffffffffffffffffffffffffff161461088e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088590613d15565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b81526004016108e79190613b05565b602060405180830381600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190613650565b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90613db5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610a309190613b05565b602060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a829190613650565b610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890613db5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518363ffffffff1660e01b8152600401610b5c929190613bb0565b602060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190613650565b50600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026000541415610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790613e95565b60405180910390fd5b6002600081905550610c9061076d565b73ffffffffffffffffffffffffffffffffffffffff16610cae6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfb90613d15565b60405180910390fd5b8051825114610d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3f90613cb5565b60405180910390fd5b60005b8251811015610df957610de6838281518110610d90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838381518110610dd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610de16127bd565b612aae565b8080610df1906142bb565b915050610d4b565b5060016000819055505050565b610e0e61076d565b73ffffffffffffffffffffffffffffffffffffffff16610e2c6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990613d15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990613e35565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e160405160405180910390a3610f9b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000612cf2565b610fc5817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612cf2565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90613e95565b60405180910390fd5b600260008190555061108361076d565b73ffffffffffffffffffffffffffffffffffffffff166110a16127bd565b73ffffffffffffffffffffffffffffffffffffffff16146110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee90613d15565b60405180910390fd5b60005b8151811015611572577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8838381518110611178577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161119c9190613b05565b60206040518083038186803b1580156111b457600080fd5b505afa1580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190613650565b61122b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122290613d55565b60405180910390fd5b60006003600084848151811061126a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663db006a758373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113269190613b05565b60206040518083038186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137691906136a2565b6040518263ffffffff1660e01b81526004016113929190613ef5565b602060405180830381600087803b1580156113ac57600080fd5b505af11580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e491906136a2565b14611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141b90613df5565b60405180910390fd5b61155e61142f6127bd565b848481518110611468577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114a89190613b05565b60206040518083038186803b1580156114c057600080fd5b505afa1580156114d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f891906136a2565b858581518110611531577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166127c59092919063ffffffff16565b50808061156a906142bb565b9150506110fa565b50600160008190555050565b600260005414156115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb90613e95565b60405180910390fd5b60026000819055506115d461076d565b73ffffffffffffffffffffffffffffffffffffffff166115f26127bd565b73ffffffffffffffffffffffffffffffffffffffff1614806116685750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116506127bd565b73ffffffffffffffffffffffffffffffffffffffff16145b6116a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169e90613ed5565b60405180910390fd5b6116b2838383612aae565b6001600081905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61171161076d565b73ffffffffffffffffffffffffffffffffffffffff1661172f6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614611785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177c90613d15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec90613cf5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d90613d95565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbb0958cd5add04c553a378aa342c839507b619a0459617e004c5d13602cfa72360405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600d81526020017f565553442d54726561737572790000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bd6576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3191906136a2565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b6a9190613b05565b60206040518083038186803b158015611b8257600080fd5b505afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba91906136a2565b611bc491906140f4565b611bce91906140c3565b915050611bdb565b600090505b919050565b611be861076d565b73ffffffffffffffffffffffffffffffffffffffff16611c066127bd565b73ffffffffffffffffffffffffffffffffffffffff1614611c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5390613d15565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8826040518263ffffffff1660e01b8152600401611cb59190613b05565b60206040518083038186803b158015611ccd57600080fd5b505afa158015611ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d059190613650565b611d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3b90613d55565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015611dac57600080fd5b505afa158015611dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de491906136a2565b905060008167ffffffffffffffff811115611e28577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611e565781602001602082028036833780820191505090505b50905060005b828160ff161015611f97577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e0886f90826040518263ffffffff1660e01b8152600401611ec09190613f6a565b604080518083038186803b158015611ed757600080fd5b505afa158015611eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0f9190613470565b50828260ff1681518110611f4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508080611f8f90614304565b915050611e5c565b50733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16631c3db2e030836040518363ffffffff1660e01b8152600401611fe7929190613b80565b600060405180830381600087803b15801561200157600080fd5b505af1158015612015573d6000803e3d6000fd5b50505050600073c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016120689190613b05565b60206040518083038186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b891906136a2565b90506000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8f983c873c00e94cb662c3520282e6f5717214004a7f2688889876040518463ffffffff1660e01b815260040161213293929190613b49565b60006040518083038186803b15801561214a57600080fd5b505afa15801561215e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061218791906135a8565b925092509250600082146122e657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7826040518263ffffffff1660e01b81526004016121f09190613ef5565b60206040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190613679565b73ffffffffffffffffffffffffffffffffffffffff166338ed17398560018630601e4261226d919061406d565b6040518663ffffffff1660e01b815260040161228d959493929190613f10565b600060405180830381600087803b1580156122a757600080fd5b505af11580156122bb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122e4919061360f565b505b6000600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d688973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161239c9190613b05565b60206040518083038186803b1580156123b457600080fd5b505afa1580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ec91906136a2565b6040518263ffffffff1660e01b81526004016124089190613ef5565b602060405180830381600087803b15801561242257600080fd5b505af1158015612436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245a91906136a2565b1461249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190613e75565b60405180910390fd5b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002600054141561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490613e95565b60405180910390fd5b600260008190555061251d61076d565b73ffffffffffffffffffffffffffffffffffffffff1661253b6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614806125b15750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125996127bd565b73ffffffffffffffffffffffffffffffffffffffff16145b6125f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e790613ed5565b60405180910390fd5b61260282826125fd6127bd565b612aae565b60016000819055505050565b6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b60008114806126e0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161268e929190613b20565b60206040518083038186803b1580156126a657600080fd5b505afa1580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de91906136a2565b145b61271f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271690613eb5565b60405180910390fd5b6127a08363095ea7b360e01b848460405160240161273e929190613bd9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e7b565b505050565b60606127b48484600085612f42565b90509392505050565b600033905090565b6128468363a9059cbb60e01b84846040516024016127e4929190613bd9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e7b565b505050565b8373ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f846040518263ffffffff1660e01b81526004016128849190613b05565b602060405180830381600087803b15801561289e57600080fd5b505af11580156128b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d69190613650565b612915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290c90613d75565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b815260040161294e9190613b05565b602060405180830381600087803b15801561296857600080fd5b505af115801561297c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a09190613650565b6129df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d690613d75565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612aa8817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8573ffffffffffffffffffffffffffffffffffffffff166126479092919063ffffffff16565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b8152600401612b079190613b05565b60206040518083038186803b158015612b1f57600080fd5b505afa158015612b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b579190613650565b612b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8d90613d55565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b8152600401612c309190613ef5565b602060405180830381600087803b158015612c4a57600080fd5b505af1158015612c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8291906136a2565b14612cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb990613dd5565b60405180910390fd5b612ced81838573ffffffffffffffffffffffffffffffffffffffff166127c59092919063ffffffff16565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3b57600080fd5b505afa158015612d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7391906136a2565b811015612e7657612e63600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7836040518263ffffffff1660e01b8152600401612dd89190613ef5565b60206040518083038186803b158015612df057600080fd5b505afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e289190613679565b8373c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166126479092919063ffffffff16565b8080612e6e906142bb565b915050612cf5565b505050565b6000612edd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127a59092919063ffffffff16565b9050600081511115612f3d5780806020019051810190612efd9190613650565b612f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3390613e55565b60405180910390fd5b5b505050565b606082471015612f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7e90613cd5565b60405180910390fd5b612f9085613056565b612fcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fc690613e15565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612ff89190613aee565b60006040518083038185875af1925050503d8060008114613035576040519150601f19603f3d011682016040523d82523d6000602084013e61303a565b606091505b509150915061304a828286613069565b92505050949350505050565b600080823b905060008111915050919050565b60608315613079578290506130c9565b60008351111561308c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c09190613c53565b60405180910390fd5b9392505050565b60006130e36130de84613faa565b613f85565b9050808382526020820190508285602086028201111561310257600080fd5b60005b8581101561313257816131188882613280565b845260208401935060208301925050600181019050613105565b5050509392505050565b600061314f61314a84613faa565b613f85565b9050808382526020820190508285602086028201111561316e57600080fd5b60005b8581101561319e57816131848882613295565b845260208401935060208301925050600181019050613171565b5050509392505050565b60006131bb6131b684613fd6565b613f85565b905080838252602082019050828560208602820111156131da57600080fd5b60005b8581101561320a57816131f0888261337c565b8452602084019350602083019250506001810190506131dd565b5050509392505050565b600061322761322284613fd6565b613f85565b9050808382526020820190508285602086028201111561324657600080fd5b60005b85811015613276578161325c8882613391565b845260208401935060208301925050600181019050613249565b5050509392505050565b60008135905061328f81614772565b92915050565b6000815190506132a481614772565b92915050565b600082601f8301126132bb57600080fd5b81356132cb8482602086016130d0565b91505092915050565b600082601f8301126132e557600080fd5b81516132f584826020860161313c565b91505092915050565b600082601f83011261330f57600080fd5b813561331f8482602086016131a8565b91505092915050565b600082601f83011261333957600080fd5b8151613349848260208601613214565b91505092915050565b60008151905061336181614789565b92915050565b600081519050613376816147a0565b92915050565b60008135905061338b816147b7565b92915050565b6000815190506133a0816147b7565b92915050565b6000602082840312156133b857600080fd5b60006133c684828501613280565b91505092915050565b6000602082840312156133e157600080fd5b60006133ef84828501613295565b91505092915050565b6000806040838503121561340b57600080fd5b600061341985828601613280565b925050602061342a85828601613280565b9150509250929050565b6000806040838503121561344757600080fd5b600061345585828601613280565b92505060206134668582860161337c565b9150509250929050565b6000806040838503121561348357600080fd5b600061349185828601613295565b92505060206134a285828601613391565b9150509250929050565b6000806000606084860312156134c157600080fd5b60006134cf86828701613280565b93505060206134e08682870161337c565b92505060406134f186828701613280565b9150509250925092565b60006020828403121561350d57600080fd5b600082013567ffffffffffffffff81111561352757600080fd5b613533848285016132aa565b91505092915050565b6000806040838503121561354f57600080fd5b600083013567ffffffffffffffff81111561356957600080fd5b613575858286016132aa565b925050602083013567ffffffffffffffff81111561359257600080fd5b61359e858286016132fe565b9150509250929050565b6000806000606084860312156135bd57600080fd5b600084015167ffffffffffffffff8111156135d757600080fd5b6135e3868287016132d4565b93505060206135f486828701613391565b925050604061360586828701613391565b9150509250925092565b60006020828403121561362157600080fd5b600082015167ffffffffffffffff81111561363b57600080fd5b61364784828501613328565b91505092915050565b60006020828403121561366257600080fd5b600061367084828501613352565b91505092915050565b60006020828403121561368b57600080fd5b600061369984828501613367565b91505092915050565b6000602082840312156136b457600080fd5b60006136c284828501613391565b91505092915050565b60006136d783836136e3565b60208301905092915050565b6136ec8161414e565b82525050565b6136fb8161414e565b82525050565b600061370c82614012565b6137168185614040565b935061372183614002565b8060005b8381101561375257815161373988826136cb565b975061374483614033565b925050600181019050613725565b5085935050505092915050565b600061376a8261401d565b6137748185614051565b9350613784818560208601614257565b80840191505092915050565b613799816141b5565b82525050565b6137a8816141d9565b82525050565b6137b7816141fd565b82525050565b6137c681614221565b82525050565b6137d581614233565b82525050565b60006137e682614028565b6137f0818561405c565b9350613800818560208601614257565b613809816143bb565b840191505092915050565b6000613821601e8361405c565b915061382c826143cc565b602082019050919050565b600061384460168361405c565b915061384f826143f5565b602082019050919050565b600061386760158361405c565b91506138728261441e565b602082019050919050565b600061388a60268361405c565b915061389582614447565b604082019050919050565b60006138ad60188361405c565b91506138b882614496565b602082019050919050565b60006138d0601a8361405c565b91506138db826144bf565b602082019050919050565b60006138f360158361405c565b91506138fe826144e8565b602082019050919050565b600061391660168361405c565b915061392182614511565b602082019050919050565b600061393960128361405c565b91506139448261453a565b602082019050919050565b600061395c600d8361405c565b915061396782614563565b602082019050919050565b600061397f60178361405c565b915061398a8261458c565b602082019050919050565b60006139a260188361405c565b91506139ad826145b5565b602082019050919050565b60006139c5600d8361405c565b91506139d0826145de565b602082019050919050565b60006139e8601d8361405c565b91506139f382614607565b602082019050919050565b6000613a0b601c8361405c565b9150613a1682614630565b602082019050919050565b6000613a2e602a8361405c565b9150613a3982614659565b604082019050919050565b6000613a5160128361405c565b9150613a5c826146a8565b602082019050919050565b6000613a74601f8361405c565b9150613a7f826146d1565b602082019050919050565b6000613a9760368361405c565b9150613aa2826146fa565b604082019050919050565b6000613aba60188361405c565b9150613ac582614749565b602082019050919050565b613ad98161419e565b82525050565b613ae881614245565b82525050565b6000613afa828461375f565b915081905092915050565b6000602082019050613b1a60008301846136f2565b92915050565b6000604082019050613b3560008301856136f2565b613b4260208301846136f2565b9392505050565b6000606082019050613b5e60008301866136f2565b613b6b60208301856136f2565b613b786040830184613ad0565b949350505050565b6000604082019050613b9560008301856136f2565b8181036020830152613ba78184613701565b90509392505050565b6000604082019050613bc560008301856136f2565b613bd260208301846137bd565b9392505050565b6000604082019050613bee60008301856136f2565b613bfb6020830184613ad0565b9392505050565b6000602082019050613c176000830184613790565b92915050565b6000602082019050613c32600083018461379f565b92915050565b6000602082019050613c4d60008301846137ae565b92915050565b60006020820190508181036000830152613c6d81846137db565b905092915050565b60006020820190508181036000830152613c8e81613814565b9050919050565b60006020820190508181036000830152613cae81613837565b9050919050565b60006020820190508181036000830152613cce8161385a565b9050919050565b60006020820190508181036000830152613cee8161387d565b9050919050565b60006020820190508181036000830152613d0e816138a0565b9050919050565b60006020820190508181036000830152613d2e816138c3565b9050919050565b60006020820190508181036000830152613d4e816138e6565b9050919050565b60006020820190508181036000830152613d6e81613909565b9050919050565b60006020820190508181036000830152613d8e8161392c565b9050919050565b60006020820190508181036000830152613dae8161394f565b9050919050565b60006020820190508181036000830152613dce81613972565b9050919050565b60006020820190508181036000830152613dee81613995565b9050919050565b60006020820190508181036000830152613e0e816139b8565b9050919050565b60006020820190508181036000830152613e2e816139db565b9050919050565b60006020820190508181036000830152613e4e816139fe565b9050919050565b60006020820190508181036000830152613e6e81613a21565b9050919050565b60006020820190508181036000830152613e8e81613a44565b9050919050565b60006020820190508181036000830152613eae81613a67565b9050919050565b60006020820190508181036000830152613ece81613a8a565b9050919050565b60006020820190508181036000830152613eee81613aad565b9050919050565b6000602082019050613f0a6000830184613ad0565b92915050565b600060a082019050613f256000830188613ad0565b613f3260208301876137cc565b8181036040830152613f448186613701565b9050613f5360608301856136f2565b613f606080830184613ad0565b9695505050505050565b6000602082019050613f7f6000830184613adf565b92915050565b6000613f8f613fa0565b9050613f9b828261428a565b919050565b6000604051905090565b600067ffffffffffffffff821115613fc557613fc461438c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ff157613ff061438c565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006140788261419e565b91506140838361419e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156140b8576140b761432e565b5b828201905092915050565b60006140ce8261419e565b91506140d98361419e565b9250826140e9576140e861435d565b5b828204905092915050565b60006140ff8261419e565b915061410a8361419e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141435761414261432e565b5b828202905092915050565b60006141598261417e565b9050919050565b60008115159050919050565b60006141778261414e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006141c0826141c7565b9050919050565b60006141d28261417e565b9050919050565b60006141e4826141eb565b9050919050565b60006141f68261417e565b9050919050565b60006142088261420f565b9050919050565b600061421a8261417e565b9050919050565b600061422c8261419e565b9050919050565b600061423e8261419e565b9050919050565b6000614250826141a8565b9050919050565b60005b8381101561427557808201518184015260208101905061425a565b83811115614284576000848401525b50505050565b614293826143bb565b810181811067ffffffffffffffff821117156142b2576142b161438c565b5b80604052505050565b60006142c68261419e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142f9576142f861432e565b5b600182019050919050565b600061430f826141a8565b915060ff8214156143235761432261432e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f63546f6b656e2d69732d6e6f742d616c6c6f7765642d746f2d73776565700000600082015250565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f696e7075742d6c656e6774682d6d69736d617463680000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f72656465656d65722d616464726573732d69732d7a65726f0000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d72656465656d657200000000000000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f72656465656d2d756e6465726c79696e672d6661696c65640000000000000000600082015250565b7f72656465656d2d6661696c656400000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f737761702d6d616e616765722d616464726573732d69732d7a65726f00000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d617574686f72697a65640000000000000000600082015250565b61477b8161414e565b811461478657600080fd5b50565b61479281614160565b811461479d57600080fd5b50565b6147a98161416c565b81146147b457600080fd5b50565b6147c08161419e565b81146147cb57600080fd5b5056fea2646970667358221220e659011103f933ba1b95340500070095fbde9545d483f31c46b390c27db32bce64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636a95385f116100ad578063ce513b6f11610071578063ce513b6f146102f5578063de0c1c5d14610325578063edac520314610341578063f3fef3a31461035f578063ffa1ad741461037b5761012c565b80636a95385f1461024f578063709d039d1461026d5780637d138e131461028b5780638c0b09d0146102a7578063a3f4df7e146102d75761012c565b806342841531116100f457806342841531146101c15780634c36fad7146101dd5780635e1762a0146101f95780636568a2791461021757806369328dec146102335761012c565b806301681a621461013157806301ac85591461014d5780630c340a24146101695780631c88705d146101875780632ba29d38146101a3575b600080fd5b61014b600480360381019061014691906133a6565b610399565b005b610167600480360381019061016291906133f8565b6105c1565b005b61017161076d565b60405161017e9190613b05565b60405180910390f35b6101a1600480360381019061019c91906133a6565b610812565b005b6101ab610c14565b6040516101b89190613b05565b60405180910390f35b6101db60048036038101906101d6919061353c565b610c3a565b005b6101f760048036038101906101f291906133a6565b610e06565b005b610201611009565b60405161020e9190613c02565b60405180910390f35b610231600480360381019061022c91906134fb565b61102d565b005b61024d600480360381019061024891906134ac565b61157e565b005b6102576116bf565b6040516102649190613c02565b60405180910390f35b6102756116e3565b6040516102829190613c1d565b60405180910390f35b6102a560048036038101906102a091906133a6565b611709565b005b6102c160048036038101906102bc91906133a6565b611946565b6040516102ce9190613b05565b60405180910390f35b6102df611979565b6040516102ec9190613c53565b60405180910390f35b61030f600480360381019061030a91906133a6565b6119b2565b60405161031c9190613ef5565b60405180910390f35b61033f600480360381019061033a91906133a6565b611be0565b005b6103496124a3565b6040516103569190613c38565b60405180910390f35b61037960048036038101906103749190613434565b6124c7565b005b61038361260e565b6040516103909190613c53565b60405180910390f35b6103a161076d565b73ffffffffffffffffffffffffffffffffffffffff166103bf6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c90613d15565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8826040518263ffffffff1660e01b815260040161046e9190613b05565b60206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190613650565b156104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590613c75565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105399190613b05565b60206040518083038186803b15801561055157600080fd5b505afa158015610565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058991906136a2565b90506105bd6105966127bd565b828473ffffffffffffffffffffffffffffffffffffffff166127c59092919063ffffffff16565b5050565b6105c961076d565b73ffffffffffffffffffffffffffffffffffffffff166105e76127bd565b73ffffffffffffffffffffffffffffffffffffffff161461063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063490613d15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490613d35565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561071d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071490613c95565b60405180910390fd5b6107697f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000008461284b565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d91906133cf565b905090565b61081a61076d565b73ffffffffffffffffffffffffffffffffffffffff166108386127bd565b73ffffffffffffffffffffffffffffffffffffffff161461088e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088590613d15565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b81526004016108e79190613b05565b602060405180830381600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190613650565b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90613db5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610a309190613b05565b602060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a829190613650565b610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890613db5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518363ffffffff1660e01b8152600401610b5c929190613bb0565b602060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190613650565b50600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026000541415610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790613e95565b60405180910390fd5b6002600081905550610c9061076d565b73ffffffffffffffffffffffffffffffffffffffff16610cae6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfb90613d15565b60405180910390fd5b8051825114610d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3f90613cb5565b60405180910390fd5b60005b8251811015610df957610de6838281518110610d90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838381518110610dd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610de16127bd565b612aae565b8080610df1906142bb565b915050610d4b565b5060016000819055505050565b610e0e61076d565b73ffffffffffffffffffffffffffffffffffffffff16610e2c6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990613d15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990613e35565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e160405160405180910390a3610f9b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000612cf2565b610fc5817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612cf2565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90613e95565b60405180910390fd5b600260008190555061108361076d565b73ffffffffffffffffffffffffffffffffffffffff166110a16127bd565b73ffffffffffffffffffffffffffffffffffffffff16146110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee90613d15565b60405180910390fd5b60005b8151811015611572577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8838381518110611178577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161119c9190613b05565b60206040518083038186803b1580156111b457600080fd5b505afa1580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190613650565b61122b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122290613d55565b60405180910390fd5b60006003600084848151811061126a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663db006a758373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113269190613b05565b60206040518083038186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137691906136a2565b6040518263ffffffff1660e01b81526004016113929190613ef5565b602060405180830381600087803b1580156113ac57600080fd5b505af11580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e491906136a2565b14611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141b90613df5565b60405180910390fd5b61155e61142f6127bd565b848481518110611468577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114a89190613b05565b60206040518083038186803b1580156114c057600080fd5b505afa1580156114d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f891906136a2565b858581518110611531577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166127c59092919063ffffffff16565b50808061156a906142bb565b9150506110fa565b50600160008190555050565b600260005414156115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb90613e95565b60405180910390fd5b60026000819055506115d461076d565b73ffffffffffffffffffffffffffffffffffffffff166115f26127bd565b73ffffffffffffffffffffffffffffffffffffffff1614806116685750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116506127bd565b73ffffffffffffffffffffffffffffffffffffffff16145b6116a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169e90613ed5565b60405180910390fd5b6116b2838383612aae565b6001600081905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61171161076d565b73ffffffffffffffffffffffffffffffffffffffff1661172f6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614611785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177c90613d15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec90613cf5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d90613d95565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbb0958cd5add04c553a378aa342c839507b619a0459617e004c5d13602cfa72360405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600d81526020017f565553442d54726561737572790000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bd6576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3191906136a2565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b6a9190613b05565b60206040518083038186803b158015611b8257600080fd5b505afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba91906136a2565b611bc491906140f4565b611bce91906140c3565b915050611bdb565b600090505b919050565b611be861076d565b73ffffffffffffffffffffffffffffffffffffffff16611c066127bd565b73ffffffffffffffffffffffffffffffffffffffff1614611c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5390613d15565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8826040518263ffffffff1660e01b8152600401611cb59190613b05565b60206040518083038186803b158015611ccd57600080fd5b505afa158015611ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d059190613650565b611d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3b90613d55565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015611dac57600080fd5b505afa158015611dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de491906136a2565b905060008167ffffffffffffffff811115611e28577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611e565781602001602082028036833780820191505090505b50905060005b828160ff161015611f97577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e0886f90826040518263ffffffff1660e01b8152600401611ec09190613f6a565b604080518083038186803b158015611ed757600080fd5b505afa158015611eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0f9190613470565b50828260ff1681518110611f4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508080611f8f90614304565b915050611e5c565b50733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16631c3db2e030836040518363ffffffff1660e01b8152600401611fe7929190613b80565b600060405180830381600087803b15801561200157600080fd5b505af1158015612015573d6000803e3d6000fd5b50505050600073c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016120689190613b05565b60206040518083038186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b891906136a2565b90506000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8f983c873c00e94cb662c3520282e6f5717214004a7f2688889876040518463ffffffff1660e01b815260040161213293929190613b49565b60006040518083038186803b15801561214a57600080fd5b505afa15801561215e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061218791906135a8565b925092509250600082146122e657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7826040518263ffffffff1660e01b81526004016121f09190613ef5565b60206040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190613679565b73ffffffffffffffffffffffffffffffffffffffff166338ed17398560018630601e4261226d919061406d565b6040518663ffffffff1660e01b815260040161228d959493929190613f10565b600060405180830381600087803b1580156122a757600080fd5b505af11580156122bb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122e4919061360f565b505b6000600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d688973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161239c9190613b05565b60206040518083038186803b1580156123b457600080fd5b505afa1580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ec91906136a2565b6040518263ffffffff1660e01b81526004016124089190613ef5565b602060405180830381600087803b15801561242257600080fd5b505af1158015612436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245a91906136a2565b1461249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190613e75565b60405180910390fd5b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002600054141561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490613e95565b60405180910390fd5b600260008190555061251d61076d565b73ffffffffffffffffffffffffffffffffffffffff1661253b6127bd565b73ffffffffffffffffffffffffffffffffffffffff1614806125b15750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125996127bd565b73ffffffffffffffffffffffffffffffffffffffff16145b6125f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e790613ed5565b60405180910390fd5b61260282826125fd6127bd565b612aae565b60016000819055505050565b6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b60008114806126e0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161268e929190613b20565b60206040518083038186803b1580156126a657600080fd5b505afa1580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de91906136a2565b145b61271f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271690613eb5565b60405180910390fd5b6127a08363095ea7b360e01b848460405160240161273e929190613bd9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e7b565b505050565b60606127b48484600085612f42565b90509392505050565b600033905090565b6128468363a9059cbb60e01b84846040516024016127e4929190613bd9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e7b565b505050565b8373ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f846040518263ffffffff1660e01b81526004016128849190613b05565b602060405180830381600087803b15801561289e57600080fd5b505af11580156128b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d69190613650565b612915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290c90613d75565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b815260040161294e9190613b05565b602060405180830381600087803b15801561296857600080fd5b505af115801561297c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a09190613650565b6129df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d690613d75565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612aa8817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8573ffffffffffffffffffffffffffffffffffffffff166126479092919063ffffffff16565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b8152600401612b079190613b05565b60206040518083038186803b158015612b1f57600080fd5b505afa158015612b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b579190613650565b612b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8d90613d55565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b8152600401612c309190613ef5565b602060405180830381600087803b158015612c4a57600080fd5b505af1158015612c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8291906136a2565b14612cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb990613dd5565b60405180910390fd5b612ced81838573ffffffffffffffffffffffffffffffffffffffff166127c59092919063ffffffff16565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3b57600080fd5b505afa158015612d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7391906136a2565b811015612e7657612e63600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7836040518263ffffffff1660e01b8152600401612dd89190613ef5565b60206040518083038186803b158015612df057600080fd5b505afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e289190613679565b8373c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166126479092919063ffffffff16565b8080612e6e906142bb565b915050612cf5565b505050565b6000612edd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127a59092919063ffffffff16565b9050600081511115612f3d5780806020019051810190612efd9190613650565b612f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3390613e55565b60405180910390fd5b5b505050565b606082471015612f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7e90613cd5565b60405180910390fd5b612f9085613056565b612fcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fc690613e15565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612ff89190613aee565b60006040518083038185875af1925050503d8060008114613035576040519150601f19603f3d011682016040523d82523d6000602084013e61303a565b606091505b509150915061304a828286613069565b92505050949350505050565b600080823b905060008111915050919050565b60608315613079578290506130c9565b60008351111561308c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c09190613c53565b60405180910390fd5b9392505050565b60006130e36130de84613faa565b613f85565b9050808382526020820190508285602086028201111561310257600080fd5b60005b8581101561313257816131188882613280565b845260208401935060208301925050600181019050613105565b5050509392505050565b600061314f61314a84613faa565b613f85565b9050808382526020820190508285602086028201111561316e57600080fd5b60005b8581101561319e57816131848882613295565b845260208401935060208301925050600181019050613171565b5050509392505050565b60006131bb6131b684613fd6565b613f85565b905080838252602082019050828560208602820111156131da57600080fd5b60005b8581101561320a57816131f0888261337c565b8452602084019350602083019250506001810190506131dd565b5050509392505050565b600061322761322284613fd6565b613f85565b9050808382526020820190508285602086028201111561324657600080fd5b60005b85811015613276578161325c8882613391565b845260208401935060208301925050600181019050613249565b5050509392505050565b60008135905061328f81614772565b92915050565b6000815190506132a481614772565b92915050565b600082601f8301126132bb57600080fd5b81356132cb8482602086016130d0565b91505092915050565b600082601f8301126132e557600080fd5b81516132f584826020860161313c565b91505092915050565b600082601f83011261330f57600080fd5b813561331f8482602086016131a8565b91505092915050565b600082601f83011261333957600080fd5b8151613349848260208601613214565b91505092915050565b60008151905061336181614789565b92915050565b600081519050613376816147a0565b92915050565b60008135905061338b816147b7565b92915050565b6000815190506133a0816147b7565b92915050565b6000602082840312156133b857600080fd5b60006133c684828501613280565b91505092915050565b6000602082840312156133e157600080fd5b60006133ef84828501613295565b91505092915050565b6000806040838503121561340b57600080fd5b600061341985828601613280565b925050602061342a85828601613280565b9150509250929050565b6000806040838503121561344757600080fd5b600061345585828601613280565b92505060206134668582860161337c565b9150509250929050565b6000806040838503121561348357600080fd5b600061349185828601613295565b92505060206134a285828601613391565b9150509250929050565b6000806000606084860312156134c157600080fd5b60006134cf86828701613280565b93505060206134e08682870161337c565b92505060406134f186828701613280565b9150509250925092565b60006020828403121561350d57600080fd5b600082013567ffffffffffffffff81111561352757600080fd5b613533848285016132aa565b91505092915050565b6000806040838503121561354f57600080fd5b600083013567ffffffffffffffff81111561356957600080fd5b613575858286016132aa565b925050602083013567ffffffffffffffff81111561359257600080fd5b61359e858286016132fe565b9150509250929050565b6000806000606084860312156135bd57600080fd5b600084015167ffffffffffffffff8111156135d757600080fd5b6135e3868287016132d4565b93505060206135f486828701613391565b925050604061360586828701613391565b9150509250925092565b60006020828403121561362157600080fd5b600082015167ffffffffffffffff81111561363b57600080fd5b61364784828501613328565b91505092915050565b60006020828403121561366257600080fd5b600061367084828501613352565b91505092915050565b60006020828403121561368b57600080fd5b600061369984828501613367565b91505092915050565b6000602082840312156136b457600080fd5b60006136c284828501613391565b91505092915050565b60006136d783836136e3565b60208301905092915050565b6136ec8161414e565b82525050565b6136fb8161414e565b82525050565b600061370c82614012565b6137168185614040565b935061372183614002565b8060005b8381101561375257815161373988826136cb565b975061374483614033565b925050600181019050613725565b5085935050505092915050565b600061376a8261401d565b6137748185614051565b9350613784818560208601614257565b80840191505092915050565b613799816141b5565b82525050565b6137a8816141d9565b82525050565b6137b7816141fd565b82525050565b6137c681614221565b82525050565b6137d581614233565b82525050565b60006137e682614028565b6137f0818561405c565b9350613800818560208601614257565b613809816143bb565b840191505092915050565b6000613821601e8361405c565b915061382c826143cc565b602082019050919050565b600061384460168361405c565b915061384f826143f5565b602082019050919050565b600061386760158361405c565b91506138728261441e565b602082019050919050565b600061388a60268361405c565b915061389582614447565b604082019050919050565b60006138ad60188361405c565b91506138b882614496565b602082019050919050565b60006138d0601a8361405c565b91506138db826144bf565b602082019050919050565b60006138f360158361405c565b91506138fe826144e8565b602082019050919050565b600061391660168361405c565b915061392182614511565b602082019050919050565b600061393960128361405c565b91506139448261453a565b602082019050919050565b600061395c600d8361405c565b915061396782614563565b602082019050919050565b600061397f60178361405c565b915061398a8261458c565b602082019050919050565b60006139a260188361405c565b91506139ad826145b5565b602082019050919050565b60006139c5600d8361405c565b91506139d0826145de565b602082019050919050565b60006139e8601d8361405c565b91506139f382614607565b602082019050919050565b6000613a0b601c8361405c565b9150613a1682614630565b602082019050919050565b6000613a2e602a8361405c565b9150613a3982614659565b604082019050919050565b6000613a5160128361405c565b9150613a5c826146a8565b602082019050919050565b6000613a74601f8361405c565b9150613a7f826146d1565b602082019050919050565b6000613a9760368361405c565b9150613aa2826146fa565b604082019050919050565b6000613aba60188361405c565b9150613ac582614749565b602082019050919050565b613ad98161419e565b82525050565b613ae881614245565b82525050565b6000613afa828461375f565b915081905092915050565b6000602082019050613b1a60008301846136f2565b92915050565b6000604082019050613b3560008301856136f2565b613b4260208301846136f2565b9392505050565b6000606082019050613b5e60008301866136f2565b613b6b60208301856136f2565b613b786040830184613ad0565b949350505050565b6000604082019050613b9560008301856136f2565b8181036020830152613ba78184613701565b90509392505050565b6000604082019050613bc560008301856136f2565b613bd260208301846137bd565b9392505050565b6000604082019050613bee60008301856136f2565b613bfb6020830184613ad0565b9392505050565b6000602082019050613c176000830184613790565b92915050565b6000602082019050613c32600083018461379f565b92915050565b6000602082019050613c4d60008301846137ae565b92915050565b60006020820190508181036000830152613c6d81846137db565b905092915050565b60006020820190508181036000830152613c8e81613814565b9050919050565b60006020820190508181036000830152613cae81613837565b9050919050565b60006020820190508181036000830152613cce8161385a565b9050919050565b60006020820190508181036000830152613cee8161387d565b9050919050565b60006020820190508181036000830152613d0e816138a0565b9050919050565b60006020820190508181036000830152613d2e816138c3565b9050919050565b60006020820190508181036000830152613d4e816138e6565b9050919050565b60006020820190508181036000830152613d6e81613909565b9050919050565b60006020820190508181036000830152613d8e8161392c565b9050919050565b60006020820190508181036000830152613dae8161394f565b9050919050565b60006020820190508181036000830152613dce81613972565b9050919050565b60006020820190508181036000830152613dee81613995565b9050919050565b60006020820190508181036000830152613e0e816139b8565b9050919050565b60006020820190508181036000830152613e2e816139db565b9050919050565b60006020820190508181036000830152613e4e816139fe565b9050919050565b60006020820190508181036000830152613e6e81613a21565b9050919050565b60006020820190508181036000830152613e8e81613a44565b9050919050565b60006020820190508181036000830152613eae81613a67565b9050919050565b60006020820190508181036000830152613ece81613a8a565b9050919050565b60006020820190508181036000830152613eee81613aad565b9050919050565b6000602082019050613f0a6000830184613ad0565b92915050565b600060a082019050613f256000830188613ad0565b613f3260208301876137cc565b8181036040830152613f448186613701565b9050613f5360608301856136f2565b613f606080830184613ad0565b9695505050505050565b6000602082019050613f7f6000830184613adf565b92915050565b6000613f8f613fa0565b9050613f9b828261428a565b919050565b6000604051905090565b600067ffffffffffffffff821115613fc557613fc461438c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ff157613ff061438c565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006140788261419e565b91506140838361419e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156140b8576140b761432e565b5b828201905092915050565b60006140ce8261419e565b91506140d98361419e565b9250826140e9576140e861435d565b5b828204905092915050565b60006140ff8261419e565b915061410a8361419e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141435761414261432e565b5b828202905092915050565b60006141598261417e565b9050919050565b60008115159050919050565b60006141778261414e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006141c0826141c7565b9050919050565b60006141d28261417e565b9050919050565b60006141e4826141eb565b9050919050565b60006141f68261417e565b9050919050565b60006142088261420f565b9050919050565b600061421a8261417e565b9050919050565b600061422c8261419e565b9050919050565b600061423e8261419e565b9050919050565b6000614250826141a8565b9050919050565b60005b8381101561427557808201518184015260208101905061425a565b83811115614284576000848401525b50505050565b614293826143bb565b810181811067ffffffffffffffff821117156142b2576142b161438c565b5b80604052505050565b60006142c68261419e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142f9576142f861432e565b5b600182019050919050565b600061430f826141a8565b915060ff8214156143235761432261432e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f63546f6b656e2d69732d6e6f742d616c6c6f7765642d746f2d73776565700000600082015250565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f696e7075742d6c656e6774682d6d69736d617463680000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f72656465656d65722d616464726573732d69732d7a65726f0000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d72656465656d657200000000000000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f72656465656d2d756e6465726c79696e672d6661696c65640000000000000000600082015250565b7f72656465656d2d6661696c656400000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f737761702d6d616e616765722d616464726573732d69732d7a65726f00000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d617574686f72697a65640000000000000000600082015250565b61477b8161414e565b811461478657600080fd5b50565b61479281614160565b811461479d57600080fd5b50565b6147a98161416c565b81146147b457600080fd5b50565b6147c08161419e565b81146147cb57600080fd5b5056fea2646970667358221220e659011103f933ba1b95340500070095fbde9545d483f31c46b390c27db32bce64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelistedToken(address,address)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_token": "address which we want to add in token list."
        }
      },
      "claimCompAndConvertTo(address)": {
        "params": {
          "_toToken": "COMP will be swapped to _toToken"
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "removeWhitelistedToken(address)": {
        "details": "Removing token even if treasury has some balance of that token is intended behavior.",
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "sweep(address)": {
        "details": "OnlyGovernor can call this and CTokens are not allowed to sweep",
        "params": {
          "_fromToken": "Token address to sweep"
        }
      },
      "updateRedeemer(address)": {
        "params": {
          "_newRedeemer": "new redeemer address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_newSwapManager": "new swap manager address"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens."
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens.",
          "_tokenReceiver": "Address of token receiver"
        }
      },
      "withdrawAll(address[])": {
        "details": "Only Governor is allowed to call.",
        "params": {
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawMulti(address[],uint256[])": {
        "details": "Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length",
        "params": {
          "_amounts": "Array of token amount to withdraw",
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawable(address)": {
        "params": {
          "_token": "Token to withdraw"
        }
      }
    },
    "title": "VUSD Treasury, It stores cTokens and redeem those from Compound as needed.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedToken(address,address)": {
        "notice": "Add token into treasury management system"
      },
      "claimCompAndConvertTo(address)": {
        "notice": "Claim comp from all markets and convert to given token. Also deposit those tokens to Compound"
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from treasury management system"
      },
      "sweep(address)": {
        "notice": "Sweep any ERC20 token to governor address"
      },
      "updateRedeemer(address)": {
        "notice": "Update redeemer address"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw given amount of token."
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw given amount of token."
      },
      "withdrawAll(address[])": {
        "notice": "Withdraw all of multiple tokens."
      },
      "withdrawMulti(address[],uint256[])": {
        "notice": "Withdraw multiple tokens."
      },
      "withdrawable(address)": {
        "notice": "Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1526,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "redeemer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1532,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "swapManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwapManager)2837"
      },
      {
        "astId": 1536,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "cTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)2837": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}