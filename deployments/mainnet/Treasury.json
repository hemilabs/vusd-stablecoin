{
  "address": "0x0e2Ba4DF2aB32fcc0a6975093e040568b37FAf49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousRedeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRedeemer",
          "type": "address"
        }
      ],
      "name": "UpdatedRedeemer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRedeemer",
          "type": "address"
        }
      ],
      "name": "updateRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0x0e2Ba4DF2aB32fcc0a6975093e040568b37FAf49",
    "transactionIndex": 57,
    "gasUsed": "4586739",
    "logsBloom": "0x
    "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6",
    "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 12517834,
        "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
        "address": "0xEAc291E36303f36E0678B924305DD596640974cB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000e2ba4df2ab32fcc0a6975093e040568b37faf49",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 12517834,
        "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
        "address": "0xEAc291E36303f36E0678B924305DD596640974cB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000000e2ba4df2ab32fcc0a6975093e040568b37faf49",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 12517834,
        "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000000e2ba4df2ab32fcc0a6975093e040568b37faf49",
          "0x000000000000000000000000eac291e36303f36e0678b924305dd596640974cb"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 12517834,
        "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
        "address": "0xEAc291E36303f36E0678B924305DD596640974cB",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f",
          "0x0000000000000000000000000e2ba4df2ab32fcc0a6975093e040568b37faf49"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 12517834,
        "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
        "address": "0xEAc291E36303f36E0678B924305DD596640974cB",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0x0000000000000000000000000e2ba4df2ab32fcc0a6975093e040568b37faf49"
        ],
        "data": "0x",
        "logIndex": 116,
        "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 12517834,
        "transactionHash": "0x97178eed47459f524a602d659408b4b3ed75751a92ba7a8d07efee52e6af3fcd",
        "address": "0xEAc291E36303f36E0678B924305DD596640974cB",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
          "0x0000000000000000000000000e2ba4df2ab32fcc0a6975093e040568b37faf49"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0x0aebb46679bb83e3107ca8772fa1b882ed0e10e14dab08b0b20b3755e85cb2e6"
      }
    ],
    "blockNumber": 12517834,
    "cumulativeGasUsed": "9297148",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619"
  ],
  "solcInputHash": "2ca97e329a6a43c8b41836cde7a46ae4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRedeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"}],\"name\":\"UpdatedRedeemer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRedeemer\",\"type\":\"address\"}],\"name\":\"updateRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelistedToken(address,address)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_token\":\"address which we want to add in token list.\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"removeWhitelistedToken(address)\":{\"details\":\"Removing token even if treasury has some balance of that token is intended behavior.\",\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"updateRedeemer(address)\":{\"params\":{\"_newRedeemer\":\"new redeemer address\"}},\"withdraw(address,uint256)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\",\"_tokenReceiver\":\"Address of token receiver\"}},\"withdrawAll(address[])\":{\"details\":\"Only Governor is allowed to call.\",\"params\":{\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawMulti(address[],uint256[])\":{\"details\":\"Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length\",\"params\":{\"_amounts\":\"Array of token amount to withdraw\",\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawable(address)\":{\"params\":{\"_token\":\"Token to withdraw\"}}},\"title\":\"VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedToken(address,address)\":{\"notice\":\"Add token into treasury management system\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from treasury management system\"},\"updateRedeemer(address)\":{\"notice\":\"Update redeemer address\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdrawAll(address[])\":{\"notice\":\"Withdraw all of multiple tokens.\"},\"withdrawMulti(address[],uint256[])\":{\"notice\":\"Withdraw multiple tokens.\"},\"withdrawable(address)\":{\"notice\":\"Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ed084a02c5daa5bef324379ef57ebb3c930acec091a521083152e8291c95ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\n\\n/// @title VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\\ncontract Treasury is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"VUSD-Treasury\\\";\\n    string public constant VERSION = \\\"1.1.0\\\";\\n\\n    IAddressList public immutable whitelistedTokens;\\n    IVUSD public immutable vusd;\\n    address public redeemer;\\n\\n    mapping(address => address) public cTokens;\\n\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    event UpdatedRedeemer(address indexed previousRedeemer, address indexed newRedeemer);\\n\\n    constructor(address _vusd) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n\\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\\n        // Add token into the list, add cToken into the mapping\\n        _addToken(_whitelistedTokens, DAI, address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\\n        _addToken(_whitelistedTokens, USDC, address(0x39AA39c021dfbaE8faC545936693aC917d5E7563));\\n        _addToken(_whitelistedTokens, USDT, address(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9));\\n\\n        whitelistedTokens = _whitelistedTokens;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(_msgSender() == governor() || _msgSender() == redeemer, \\\"caller-is-not-authorized\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token into treasury management system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     */\\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\\n        require(_token != address(0), \\\"token-address-is-zero\\\");\\n        require(_cToken != address(0), \\\"cToken-address-is-zero\\\");\\n        _addToken(whitelistedTokens, _token, _cToken);\\n    }\\n\\n    /**\\n     * @notice Remove token from treasury management system\\n     * @dev Removing token even if treasury has some balance of that token is intended behavior.\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        delete cTokens[_token];\\n    }\\n\\n    /**\\n     * @notice Update redeemer address\\n     * @param _newRedeemer new redeemer address\\n     */\\n    function updateRedeemer(address _newRedeemer) external onlyGovernor {\\n        require(_newRedeemer != address(0), \\\"redeemer-address-is-zero\\\");\\n        require(redeemer != _newRedeemer, \\\"same-redeemer\\\");\\n        emit UpdatedRedeemer(redeemer, _newRedeemer);\\n        redeemer = _newRedeemer;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     */\\n    function withdraw(address _token, uint256 _amount) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     * @param _tokenReceiver Address of token receiver\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _tokenReceiver);\\n    }\\n\\n    /**\\n     * @notice Withdraw multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @dev _tokens and _amounts array are 1:1 and should have same length\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     * @param _amounts Array of token amount to withdraw\\n     */\\n    function withdrawMulti(address[] memory _tokens, uint256[] memory _amounts) external nonReentrant onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"input-length-mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _withdraw(_tokens[i], _amounts[i], _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw all of multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     */\\n    function withdrawAll(address[] memory _tokens) external nonReentrant onlyGovernor {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(whitelistedTokens.contains(_tokens[i]), \\\"token-is-not-supported\\\");\\n            CToken _cToken = CToken(cTokens[_tokens[i]]);\\n            require(_cToken.redeem(_cToken.balanceOf(address(this))) == 0, \\\"redeem-failed\\\");\\n            IERC20(_tokens[i]).safeTransfer(_msgSender(), IERC20(_tokens[i]).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Current withdrawable amount for given token.\\n     * If token is not supported by treasury, no cTokens in mapping, it will return 0.\\n     * @param _token Token to withdraw\\n     */\\n    function withdrawable(address _token) external view returns (uint256) {\\n        if (cTokens[_token] != address(0)) {\\n            CToken _cToken = CToken(cTokens[_token]);\\n            return (_cToken.balanceOf(address(this)) * _cToken.exchangeRateStored()) / 1e18;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /// @dev Add _token into the list, add _cToken in mapping\\n    function _addToken(\\n        IAddressList _list,\\n        address _token,\\n        address _cToken\\n    ) internal {\\n        require(_list.add(_token), \\\"add-in-list-failed\\\");\\n        cTokens[_token] = _cToken;\\n    }\\n\\n    function _withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) internal {\\n        require(whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        require(CToken(cTokens[_token]).redeemUnderlying(_amount) == 0, \\\"redeem-underlying-failed\\\");\\n        IERC20(_token).safeTransfer(_tokenReceiver, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xec62b43834dde6b6b60e455294cfcdc8612b8ba61c88c5bd5fcd6faaaee9bc2b\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003276380380620032768339818101604052810190620000379190620003ff565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a990620004d3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050600073ded8217de022706a191ee7ee0dc9df1185fb5da3905060008173ffffffffffffffffffffffffffffffffffffffff16630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200014d57600080fd5b505af115801562000162573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001889190620003ff565b9050620001c581736b175474e89094c44da98b954eedeac495271d0f735d3a536e4d6dbd6114cc1ead35777bab948e36436200027b60201b60201c565b620002008173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb487339aa39c021dfbae8fac545936693ac917d5e75636200027b60201b60201c565b6200023b8173dac17f958d2ee523a2206206994597c13d831ec773f650c3d88d12db855b8bf7d11be6c55a4e07dcc96200027b60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505050620005ee565b8273ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f836040518263ffffffff1660e01b8152600401620002b69190620004b6565b602060405180830381600087803b158015620002d157600080fd5b505af1158015620002e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030c91906200042b565b6200034e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034590620004f5565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600081519050620003e281620005ba565b92915050565b600081519050620003f981620005d4565b92915050565b6000602082840312156200041257600080fd5b60006200042284828501620003d1565b91505092915050565b6000602082840312156200043e57600080fd5b60006200044e84828501620003e8565b91505092915050565b620004628162000528565b82525050565b60006200047760148362000517565b9150620004848262000568565b602082019050919050565b60006200049e60128362000517565b9150620004ab8262000591565b602082019050919050565b6000602082019050620004cd600083018462000457565b92915050565b60006020820190508181036000830152620004ee8162000468565b9050919050565b6000602082019050818103600083015262000510816200048f565b9050919050565b600082825260208201905092915050565b6000620005358262000548565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f767573642d616464726573732d69732d7a65726f000000000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b620005c58162000528565b8114620005d157600080fd5b50565b620005df816200053c565b8114620005eb57600080fd5b50565b60805160601c60a05160601c612c396200063d60003960008181610461015261144e01526000818161043301528181610580015281816108c1015281816109bb01526117470152612c396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806369328dec11610097578063ce513b6f11610066578063ce513b6f1461024a578063edac52031461027a578063f3fef3a314610298578063ffa1ad74146102b4576100f5565b806369328dec146101c45780637d138e13146101e05780638c0b09d0146101fc578063a3f4df7e1461022c576100f5565b80632ba29d38116100d35780632ba29d3814610150578063428415311461016e5780635e1762a01461018a5780636568a279146101a8576100f5565b806301ac8559146100fa5780630c340a24146101165780631c88705d14610134575b600080fd5b610114600480360381019061010f9190611e63565b6102d2565b005b61011e61045d565b60405161012b9190612316565b60405180910390f35b61014e60048036038101906101499190611e11565b610502565b005b6101586106cd565b6040516101659190612316565b60405180910390f35b61018860048036038101906101839190611f6b565b6106f3565b005b6101926108bf565b60405161019f919061235a565b60405180910390f35b6101c260048036038101906101bd9190611f2a565b6108e3565b005b6101de60048036038101906101d99190611edb565b610e34565b005b6101fa60048036038101906101f59190611e11565b610f75565b005b61021660048036038101906102119190611e11565b6111b2565b6040516102239190612316565b60405180910390f35b6102346111e5565b6040516102419190612390565b60405180910390f35b610264600480360381019061025f9190611e11565b61121e565b60405161027191906125b2565b60405180910390f35b61028261144c565b60405161028f9190612375565b60405180910390f35b6102b260048036038101906102ad9190611e9f565b611470565b005b6102bc6115b7565b6040516102c99190612390565b60405180910390f35b6102da61045d565b73ffffffffffffffffffffffffffffffffffffffff166102f86115f0565b73ffffffffffffffffffffffffffffffffffffffff161461034e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034590612432565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590612452565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561042e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610425906123b2565b60405180910390fd5b6104597f000000000000000000000000000000000000000000000000000000000000000083836115f8565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c557600080fd5b505afa1580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190611e3a565b905090565b61050a61045d565b73ffffffffffffffffffffffffffffffffffffffff166105286115f0565b73ffffffffffffffffffffffffffffffffffffffff161461057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590612432565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b81526004016105d79190612316565b602060405180830381600087803b1580156105f157600080fd5b505af1158015610605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106299190611fd7565b610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f906124d2565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026000541415610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090612572565b60405180910390fd5b600260008190555061074961045d565b73ffffffffffffffffffffffffffffffffffffffff166107676115f0565b73ffffffffffffffffffffffffffffffffffffffff16146107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490612432565b60405180910390fd5b8051825114610801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f8906123d2565b60405180910390fd5b60005b82518110156108b25761089f838281518110610849577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183838151811061088a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161089a6115f0565b611745565b80806108aa906127fb565b915050610804565b5060016000819055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090612572565b60405180910390fd5b600260008190555061093961045d565b73ffffffffffffffffffffffffffffffffffffffff166109576115f0565b73ffffffffffffffffffffffffffffffffffffffff16146109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490612432565b60405180910390fd5b60005b8151811015610e28577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8838381518110610a2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610a529190612316565b60206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190611fd7565b610ae1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad890612472565b60405180910390fd5b600060026000848481518110610b20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663db006a758373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bdc9190612316565b60206040518083038186803b158015610bf457600080fd5b505afa158015610c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2c9190612000565b6040518263ffffffff1660e01b8152600401610c4891906125b2565b602060405180830381600087803b158015610c6257600080fd5b505af1158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a9190612000565b14610cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd190612512565b60405180910390fd5b610e14610ce56115f0565b848481518110610d1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d5e9190612316565b60206040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae9190612000565b858581518110610de7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166119899092919063ffffffff16565b508080610e20906127fb565b9150506109b0565b50600160008190555050565b60026000541415610e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7190612572565b60405180910390fd5b6002600081905550610e8a61045d565b73ffffffffffffffffffffffffffffffffffffffff16610ea86115f0565b73ffffffffffffffffffffffffffffffffffffffff161480610f1e5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f066115f0565b73ffffffffffffffffffffffffffffffffffffffff16145b610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5490612592565b60405180910390fd5b610f68838383611745565b6001600081905550505050565b610f7d61045d565b73ffffffffffffffffffffffffffffffffffffffff16610f9b6115f0565b73ffffffffffffffffffffffffffffffffffffffff1614610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe890612432565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890612412565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e9906124b2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbb0958cd5add04c553a378aa342c839507b619a0459617e004c5d13602cfa72360405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600d81526020017f565553442d54726561737572790000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611442576000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561136557600080fd5b505afa158015611379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139d9190612000565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113d69190612316565b60206040518083038186803b1580156113ee57600080fd5b505afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190612000565b61143091906126ad565b61143a919061267c565b915050611447565b600090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260005414156114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90612572565b60405180910390fd5b60026000819055506114c661045d565b73ffffffffffffffffffffffffffffffffffffffff166114e46115f0565b73ffffffffffffffffffffffffffffffffffffffff16148061155a5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115426115f0565b73ffffffffffffffffffffffffffffffffffffffff16145b611599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159090612592565b60405180910390fd5b6115ab82826115a66115f0565b611745565b60016000819055505050565b6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b600033905090565b8273ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f836040518263ffffffff1660e01b81526004016116319190612316565b602060405180830381600087803b15801561164b57600080fd5b505af115801561165f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116839190611fd7565b6116c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b990612492565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b815260040161179e9190612316565b60206040518083038186803b1580156117b657600080fd5b505afa1580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190611fd7565b61182d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182490612472565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b81526004016118c791906125b2565b602060405180830381600087803b1580156118e157600080fd5b505af11580156118f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119199190612000565b14611959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611950906124f2565b60405180910390fd5b61198481838573ffffffffffffffffffffffffffffffffffffffff166119899092919063ffffffff16565b505050565b611a0a8363a9059cbb60e01b84846040516024016119a8929190612331565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0f565b505050565b6000611a71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ad69092919063ffffffff16565b9050600081511115611ad15780806020019051810190611a919190611fd7565b611ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac790612552565b60405180910390fd5b5b505050565b6060611ae58484600085611aee565b90509392505050565b606082471015611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a906123f2565b60405180910390fd5b611b3c85611c02565b611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290612532565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ba491906122ff565b60006040518083038185875af1925050503d8060008114611be1576040519150601f19603f3d011682016040523d82523d6000602084013e611be6565b606091505b5091509150611bf6828286611c15565b92505050949350505050565b600080823b905060008111915050919050565b60608315611c2557829050611c75565b600083511115611c385782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6c9190612390565b60405180910390fd5b9392505050565b6000611c8f611c8a846125f2565b6125cd565b90508083825260208201905082856020860282011115611cae57600080fd5b60005b85811015611cde5781611cc48882611d54565b845260208401935060208301925050600181019050611cb1565b5050509392505050565b6000611cfb611cf68461261e565b6125cd565b90508083825260208201905082856020860282011115611d1a57600080fd5b60005b85811015611d4a5781611d308882611de7565b845260208401935060208301925050600181019050611d1d565b5050509392505050565b600081359050611d6381612bbe565b92915050565b600081519050611d7881612bbe565b92915050565b600082601f830112611d8f57600080fd5b8135611d9f848260208601611c7c565b91505092915050565b600082601f830112611db957600080fd5b8135611dc9848260208601611ce8565b91505092915050565b600081519050611de181612bd5565b92915050565b600081359050611df681612bec565b92915050565b600081519050611e0b81612bec565b92915050565b600060208284031215611e2357600080fd5b6000611e3184828501611d54565b91505092915050565b600060208284031215611e4c57600080fd5b6000611e5a84828501611d69565b91505092915050565b60008060408385031215611e7657600080fd5b6000611e8485828601611d54565b9250506020611e9585828601611d54565b9150509250929050565b60008060408385031215611eb257600080fd5b6000611ec085828601611d54565b9250506020611ed185828601611de7565b9150509250929050565b600080600060608486031215611ef057600080fd5b6000611efe86828701611d54565b9350506020611f0f86828701611de7565b9250506040611f2086828701611d54565b9150509250925092565b600060208284031215611f3c57600080fd5b600082013567ffffffffffffffff811115611f5657600080fd5b611f6284828501611d7e565b91505092915050565b60008060408385031215611f7e57600080fd5b600083013567ffffffffffffffff811115611f9857600080fd5b611fa485828601611d7e565b925050602083013567ffffffffffffffff811115611fc157600080fd5b611fcd85828601611da8565b9150509250929050565b600060208284031215611fe957600080fd5b6000611ff784828501611dd2565b91505092915050565b60006020828403121561201257600080fd5b600061202084828501611dfc565b91505092915050565b61203281612707565b82525050565b60006120438261264a565b61204d8185612660565b935061205d818560208601612797565b80840191505092915050565b6120728161274f565b82525050565b61208181612773565b82525050565b600061209282612655565b61209c818561266b565b93506120ac818560208601612797565b6120b5816128d1565b840191505092915050565b60006120cd60168361266b565b91506120d8826128e2565b602082019050919050565b60006120f060158361266b565b91506120fb8261290b565b602082019050919050565b600061211360268361266b565b915061211e82612934565b604082019050919050565b600061213660188361266b565b915061214182612983565b602082019050919050565b6000612159601a8361266b565b9150612164826129ac565b602082019050919050565b600061217c60158361266b565b9150612187826129d5565b602082019050919050565b600061219f60168361266b565b91506121aa826129fe565b602082019050919050565b60006121c260128361266b565b91506121cd82612a27565b602082019050919050565b60006121e5600d8361266b565b91506121f082612a50565b602082019050919050565b600061220860178361266b565b915061221382612a79565b602082019050919050565b600061222b60188361266b565b915061223682612aa2565b602082019050919050565b600061224e600d8361266b565b915061225982612acb565b602082019050919050565b6000612271601d8361266b565b915061227c82612af4565b602082019050919050565b6000612294602a8361266b565b915061229f82612b1d565b604082019050919050565b60006122b7601f8361266b565b91506122c282612b6c565b602082019050919050565b60006122da60188361266b565b91506122e582612b95565b602082019050919050565b6122f981612745565b82525050565b600061230b8284612038565b915081905092915050565b600060208201905061232b6000830184612029565b92915050565b60006040820190506123466000830185612029565b61235360208301846122f0565b9392505050565b600060208201905061236f6000830184612069565b92915050565b600060208201905061238a6000830184612078565b92915050565b600060208201905081810360008301526123aa8184612087565b905092915050565b600060208201905081810360008301526123cb816120c0565b9050919050565b600060208201905081810360008301526123eb816120e3565b9050919050565b6000602082019050818103600083015261240b81612106565b9050919050565b6000602082019050818103600083015261242b81612129565b9050919050565b6000602082019050818103600083015261244b8161214c565b9050919050565b6000602082019050818103600083015261246b8161216f565b9050919050565b6000602082019050818103600083015261248b81612192565b9050919050565b600060208201905081810360008301526124ab816121b5565b9050919050565b600060208201905081810360008301526124cb816121d8565b9050919050565b600060208201905081810360008301526124eb816121fb565b9050919050565b6000602082019050818103600083015261250b8161221e565b9050919050565b6000602082019050818103600083015261252b81612241565b9050919050565b6000602082019050818103600083015261254b81612264565b9050919050565b6000602082019050818103600083015261256b81612287565b9050919050565b6000602082019050818103600083015261258b816122aa565b9050919050565b600060208201905081810360008301526125ab816122cd565b9050919050565b60006020820190506125c760008301846122f0565b92915050565b60006125d76125e8565b90506125e382826127ca565b919050565b6000604051905090565b600067ffffffffffffffff82111561260d5761260c6128a2565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612639576126386128a2565b5b602082029050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061268782612745565b915061269283612745565b9250826126a2576126a1612873565b5b828204905092915050565b60006126b882612745565b91506126c383612745565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126fc576126fb612844565b5b828202905092915050565b600061271282612725565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061275a82612761565b9050919050565b600061276c82612725565b9050919050565b600061277e82612785565b9050919050565b600061279082612725565b9050919050565b60005b838110156127b557808201518184015260208101905061279a565b838111156127c4576000848401525b50505050565b6127d3826128d1565b810181811067ffffffffffffffff821117156127f2576127f16128a2565b5b80604052505050565b600061280682612745565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561283957612838612844565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f696e7075742d6c656e6774682d6d69736d617463680000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f72656465656d65722d616464726573732d69732d7a65726f0000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d72656465656d657200000000000000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f72656465656d2d756e6465726c79696e672d6661696c65640000000000000000600082015250565b7f72656465656d2d6661696c656400000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f63616c6c65722d69732d6e6f742d617574686f72697a65640000000000000000600082015250565b612bc781612707565b8114612bd257600080fd5b50565b612bde81612719565b8114612be957600080fd5b50565b612bf581612745565b8114612c0057600080fd5b5056fea2646970667358221220b1338aa67e2e247ee5aea6ece052b1fe268b888cbbf32228af07f3c6db04b4a764736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelistedToken(address,address)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_token": "address which we want to add in token list."
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "removeWhitelistedToken(address)": {
        "details": "Removing token even if treasury has some balance of that token is intended behavior.",
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "updateRedeemer(address)": {
        "params": {
          "_newRedeemer": "new redeemer address"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens."
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens.",
          "_tokenReceiver": "Address of token receiver"
        }
      },
      "withdrawAll(address[])": {
        "details": "Only Governor is allowed to call.",
        "params": {
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawMulti(address[],uint256[])": {
        "details": "Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length",
        "params": {
          "_amounts": "Array of token amount to withdraw",
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawable(address)": {
        "params": {
          "_token": "Token to withdraw"
        }
      }
    },
    "title": "VUSD Treasury, It stores cTokens and redeem those from Compound as needed.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedToken(address,address)": {
        "notice": "Add token into treasury management system"
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from treasury management system"
      },
      "updateRedeemer(address)": {
        "notice": "Update redeemer address"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw given amount of token."
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw given amount of token."
      },
      "withdrawAll(address[])": {
        "notice": "Withdraw all of multiple tokens."
      },
      "withdrawMulti(address[],uint256[])": {
        "notice": "Withdraw multiple tokens."
      },
      "withdrawable(address)": {
        "notice": "Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2706,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "redeemer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2710,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "cTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}