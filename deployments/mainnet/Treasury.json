{
  "address": "0x9dfC7054B78E6f48f2D8e064B95B4251fc2E9692",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousRedeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRedeemer",
          "type": "address"
        }
      ],
      "name": "UpdatedRedeemer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenList",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "claimCompAndConvertTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRedeemer",
          "type": "address"
        }
      ],
      "name": "updateRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSwapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
  "receipt": {
    "to": null,
    "from": "0xcc4ba6Ef2aC12FA5932ef584ebc4a762FE970919",
    "contractAddress": "0x9dfC7054B78E6f48f2D8e064B95B4251fc2E9692",
    "transactionIndex": 124,
    "gasUsed": "10743998",
    "logsBloom": "0x000000040000000000800000000000000004000200004000000500000002000000041000001009000000030400000900000040000000002000000000202000000000100004000083080000084000000000000000000000000200600000000000100004000200000000100000000008000000002020080000000040000000002008000000000000000040000000010002000400000100000000002004021000000a0000008000200080000084000000000000000000000000001020000800004000000000010008000000002420000000000002020400000108020000000020000010000000000000000000000080400004000000000000110000000000000000",
    "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac",
    "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
    "logs": [
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xbdf417E2A45CDb7748dDd56bB1708181b62B1A71",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xbdf417E2A45CDb7748dDd56bB1708181b62B1A71",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000bdf417e2a45cdb7748ddd56bb1708181b62b1a71"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x4e5E249C4e54c6e3a58a610Bb87571983dBF198f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x4e5E249C4e54c6e3a58a610Bb87571983dBF198f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x0000000000000000000000004e5e249c4e54c6e3a58a610bb87571983dbf198f"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x86DD905491DB5D13AF9C97c0009b9ECC915E3F48",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x86DD905491DB5D13AF9C97c0009b9ECC915E3F48",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x00000000000000000000000086dd905491db5d13af9c97c0009b9ecc915e3f48"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x86DD905491DB5D13AF9C97c0009b9ECC915E3F48",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000cc4ba6ef2ac12fa5932ef584ebc4a762fe970919",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xbdf417E2A45CDb7748dDd56bB1708181b62B1A71",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x4e5E249C4e54c6e3a58a610Bb87571983dBF198f",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 110,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xbdf417E2A45CDb7748dDd56bB1708181b62B1A71",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 111,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x4e5E249C4e54c6e3a58a610Bb87571983dBF198f",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 113,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xbdf417E2A45CDb7748dDd56bB1708181b62B1A71",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0x4e5E249C4e54c6e3a58a610Bb87571983dBF198f",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 116,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 117,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 13378061,
        "transactionHash": "0xf1e02118f31a0f8f9128034ae95f29e13835bf971912e807edd8d08f0d2c992d",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009dfc7054b78e6f48f2d8e064b95b4251fc2e9692",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 118,
        "blockHash": "0x63e79839d3713c0a19975887f48658bf037c9b4c7a111ed3a9fac6b9df6466ac"
      }
    ],
    "blockNumber": 13378061,
    "cumulativeGasUsed": "17281312",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619"
  ],
  "solcInputHash": "39c191a09ff8c148e0d92695bc150374",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRedeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"}],\"name\":\"UpdatedRedeemer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenList\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"claimCompAndConvertTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRedeemer\",\"type\":\"address\"}],\"name\":\"updateRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"addWhitelistedToken(address,address)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_token\":\"address which we want to add in token list.\"}},\"claimCompAndConvertTo(address,uint256)\":{\"params\":{\"_minOut\":\"Minimum _toToken expected after conversion\",\"_toToken\":\"COMP will be swapped to _toToken\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"migrate(address)\":{\"params\":{\"_newTreasury\":\"Address of new treasury of VUSD system\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"removeWhitelistedToken(address)\":{\"details\":\"Removing token even if treasury has some balance of that token is intended behavior.\",\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"sweep(address)\":{\"details\":\"OnlyGovernor can call this and CTokens are not allowed to sweep\",\"params\":{\"_fromToken\":\"Token address to sweep\"}},\"updateRedeemer(address)\":{\"params\":{\"_newRedeemer\":\"new redeemer address\"}},\"updateSwapManager(address)\":{\"params\":{\"_newSwapManager\":\"new swap manager address\"}},\"withdraw(address,uint256)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Only Redeemer and Governor are allowed to call\",\"params\":{\"_amount\":\"token amount to withdraw\",\"_token\":\"Token to withdraw, it should be 1 of the supported tokens.\",\"_tokenReceiver\":\"Address of token receiver\"}},\"withdrawAll(address[])\":{\"details\":\"Only Governor is allowed to call.\",\"params\":{\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawMulti(address[],uint256[])\":{\"details\":\"Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length\",\"params\":{\"_amounts\":\"Array of token amount to withdraw\",\"_tokens\":\"Array of token addresses, tokens should be supported tokens.\"}},\"withdrawable(address)\":{\"params\":{\"_token\":\"Token to withdraw\"}}},\"title\":\"VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"addWhitelistedToken(address,address)\":{\"notice\":\"Add token into treasury management system\"},\"claimCompAndConvertTo(address,uint256)\":{\"notice\":\"Claim comp from all markets and convert to given token. Also deposit those tokens to Compound\"},\"migrate(address)\":{\"notice\":\"Migrate assets to new treasury\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from treasury management system\"},\"sweep(address)\":{\"notice\":\"Sweep any ERC20 token to governor address\"},\"updateRedeemer(address)\":{\"notice\":\"Update redeemer address\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw given amount of token.\"},\"withdrawAll(address[])\":{\"notice\":\"Withdraw all of multiple tokens.\"},\"withdrawMulti(address[],uint256[])\":{\"notice\":\"Withdraw multiple tokens.\"},\"withdrawable(address)\":{\"notice\":\"Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"./interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\n/// @title VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\\ncontract Treasury is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"VUSD-Treasury\\\";\\n    string public constant VERSION = \\\"1.2.1\\\";\\n\\n    IAddressList public immutable whitelistedTokens;\\n    IAddressList public immutable cTokenList;\\n    IAddressList public immutable keepers;\\n    IVUSD public immutable vusd;\\n    address public redeemer;\\n\\n    ISwapManager public swapManager = ISwapManager(0xC48ea9A2daA4d816e4c9333D6689C70070010174);\\n    mapping(address => address) public cTokens;\\n\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    // solhint-disable const-name-snakecase\\n    address internal constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address internal constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n    address internal constant cUSDT = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\\n    // solhint-enable\\n\\n    event UpdatedRedeemer(address indexed previousRedeemer, address indexed newRedeemer);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n\\n    constructor(address _vusd) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n\\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\\n        IAddressList _cTokenList = IAddressList(_factory.createList());\\n        IAddressList _keepers = IAddressList(_factory.createList());\\n        _keepers.add(_msgSender());\\n\\n        // Add token into the list, add cToken into the mapping\\n        _addToken(_whitelistedTokens, DAI, _cTokenList, cDAI);\\n        _addToken(_whitelistedTokens, USDC, _cTokenList, cUSDC);\\n        _addToken(_whitelistedTokens, USDT, _cTokenList, cUSDT);\\n\\n        whitelistedTokens = _whitelistedTokens;\\n        cTokenList = _cTokenList;\\n        keepers = _keepers;\\n        _approveRouters(swapManager, type(uint256).max);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(_msgSender() == governor() || _msgSender() == redeemer, \\\"caller-is-not-authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeperOrGovernor() {\\n        require(_msgSender() == governor() || keepers.contains(_msgSender()), \\\"caller-is-not-authorized\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token into treasury management system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     */\\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\\n        require(_token != address(0), \\\"token-address-is-zero\\\");\\n        require(_cToken != address(0), \\\"cToken-address-is-zero\\\");\\n        _addToken(whitelistedTokens, _token, cTokenList, _cToken);\\n    }\\n\\n    /**\\n     * @notice Remove token from treasury management system\\n     * @dev Removing token even if treasury has some balance of that token is intended behavior.\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        require(cTokenList.remove(cTokens[_token]), \\\"remove-from-list-failed\\\");\\n        IERC20(_token).safeApprove(cTokens[_token], 0);\\n        delete cTokens[_token];\\n    }\\n\\n    /**\\n     * @notice Update redeemer address\\n     * @param _newRedeemer new redeemer address\\n     */\\n    function updateRedeemer(address _newRedeemer) external onlyGovernor {\\n        require(_newRedeemer != address(0), \\\"redeemer-address-is-zero\\\");\\n        require(redeemer != _newRedeemer, \\\"same-redeemer\\\");\\n        emit UpdatedRedeemer(redeemer, _newRedeemer);\\n        redeemer = _newRedeemer;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keeperAddress != address(0), \\\"keeper-address-is-zero\\\");\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _newSwapManager new swap manager address\\n     */\\n    function updateSwapManager(address _newSwapManager) external onlyGovernor {\\n        require(_newSwapManager != address(0), \\\"swap-manager-address-is-zero\\\");\\n        emit UpdatedSwapManager(address(swapManager), _newSwapManager);\\n        _approveRouters(swapManager, 0);\\n        _approveRouters(ISwapManager(_newSwapManager), type(uint256).max);\\n        swapManager = ISwapManager(_newSwapManager);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Claim comp from all markets and convert to given token.\\n     * Also deposit those tokens to Compound\\n     * @param _toToken COMP will be swapped to _toToken\\n     * @param _minOut Minimum _toToken expected after conversion\\n     */\\n    function claimCompAndConvertTo(address _toToken, uint256 _minOut) external onlyKeeperOrGovernor {\\n        require(whitelistedTokens.contains(_toToken), \\\"token-is-not-supported\\\");\\n        uint256 _len = cTokenList.length();\\n        address[] memory _market = new address[](_len);\\n        for (uint8 i = 0; i < _len; i++) {\\n            (_market[i], ) = cTokenList.at(i);\\n        }\\n        COMPTROLLER.claimComp(address(this), _market);\\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) = swapManager.bestOutputFixedInput(\\n            COMP,\\n            _toToken,\\n            _compAmount\\n        );\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _compAmount,\\n                _minOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n        require(CToken(cTokens[_toToken]).mint(IERC20(_toToken).balanceOf(address(this))) == 0, \\\"cToken-mint-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate assets to new treasury\\n     * @param _newTreasury Address of new treasury of VUSD system\\n     */\\n    function migrate(address _newTreasury) external onlyGovernor {\\n        require(_newTreasury != address(0), \\\"new-treasury-address-is-zero\\\");\\n        require(address(vusd) == ITreasury(_newTreasury).vusd(), \\\"vusd-mismatch\\\");\\n        uint256 _len = cTokenList.length();\\n        for (uint256 i = 0; i < _len; i++) {\\n            (address _cToken, ) = cTokenList.at(i);\\n            IERC20(_cToken).safeTransfer(_newTreasury, IERC20(_cToken).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     */\\n    function withdraw(address _token, uint256 _amount) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of token.\\n     * @dev Only Redeemer and Governor are allowed to call\\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\\n     * @param _amount token amount to withdraw\\n     * @param _tokenReceiver Address of token receiver\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external nonReentrant onlyAuthorized {\\n        _withdraw(_token, _amount, _tokenReceiver);\\n    }\\n\\n    /**\\n     * @notice Withdraw multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @dev _tokens and _amounts array are 1:1 and should have same length\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     * @param _amounts Array of token amount to withdraw\\n     */\\n    function withdrawMulti(address[] memory _tokens, uint256[] memory _amounts) external nonReentrant onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"input-length-mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _withdraw(_tokens[i], _amounts[i], _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw all of multiple tokens.\\n     * @dev Only Governor is allowed to call.\\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\\n     */\\n    function withdrawAll(address[] memory _tokens) external nonReentrant onlyGovernor {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(whitelistedTokens.contains(_tokens[i]), \\\"token-is-not-supported\\\");\\n            CToken _cToken = CToken(cTokens[_tokens[i]]);\\n            require(_cToken.redeem(_cToken.balanceOf(address(this))) == 0, \\\"redeem-failed\\\");\\n            IERC20(_tokens[i]).safeTransfer(_msgSender(), IERC20(_tokens[i]).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Sweep any ERC20 token to governor address\\n     * @dev OnlyGovernor can call this and CTokens are not allowed to sweep\\n     * @param _fromToken Token address to sweep\\n     */\\n    function sweep(address _fromToken) external onlyGovernor {\\n        // Do not sweep cTokens\\n        require(!cTokenList.contains(_fromToken), \\\"cToken-is-not-allowed-to-sweep\\\");\\n\\n        uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n        IERC20(_fromToken).safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @notice Current withdrawable amount for given token.\\n     * If token is not supported by treasury, no cTokens in mapping, it will return 0.\\n     * @param _token Token to withdraw\\n     */\\n    function withdrawable(address _token) external view returns (uint256) {\\n        if (cTokens[_token] != address(0)) {\\n            CToken _cToken = CToken(cTokens[_token]);\\n            return (_cToken.balanceOf(address(this)) * _cToken.exchangeRateStored()) / 1e18;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /// @dev Add _token into the list, add _cToken in mapping\\n    function _addToken(\\n        IAddressList _list,\\n        address _token,\\n        IAddressList _cTokenList,\\n        address _cToken\\n    ) internal {\\n        require(_list.add(_token), \\\"add-in-list-failed\\\");\\n        require(_cTokenList.add(_cToken), \\\"add-in-list-failed\\\");\\n        cTokens[_token] = _cToken;\\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\\n    }\\n\\n    /// @notice Approve all routers to spend COMP\\n    function _approveRouters(ISwapManager _swapManager, uint256 _amount) internal {\\n        for (uint256 i = 0; i < _swapManager.N_DEX(); i++) {\\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    function _withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) internal {\\n        require(whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        require(CToken(cTokens[_token]).redeemUnderlying(_amount) == 0, \\\"redeem-underlying-failed\\\");\\n        IERC20(_token).safeTransfer(_tokenReceiver, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6c29070ab3344ae322765a632890c6275199637cadaa05099d2073dabb466dbc\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./bloq/IAddressList.sol\\\";\\n\\ninterface ITreasury {\\n    function withdraw(address _token, uint256 _amount) external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external;\\n\\n    function withdrawable(address _token) external view returns (uint256);\\n\\n    function whitelistedTokens() external view returns (IAddressList);\\n\\n    function vusd() external view returns (address);\\n}\\n\",\"keccak256\":\"0x035de37738bdf36e7a3ea6a2b4d09ee852f839087d536752cdf996e6a8e256b6\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x1c7aaf3402f7e1eb42959586b9a8bd51e03a6375d775deea1e0d353ba2328691\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../uniswap/IUniswap.sol\\\";\\n\\n//solhint-disable func-name-mixedcase\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswap);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xe8eb05919bc786056ab0c6368d50416d6d6b95e5f02acbd15dd2ae47cf77e756\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IUniswap {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa1edf985455d4e6aa0695cd9ddd6a3501d1ede39fb48776f8b572d57c5151d1c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806369328dec116100c3578063a3f4df7e1161007c578063a3f4df7e14610375578063ce513b6f14610393578063ce5494bb146103c3578063edac5203146103df578063f3fef3a3146103fd578063ffa1ad741461041957610158565b806369328dec146102b35780636a95385f146102cf578063709d039d146102ed5780637d138e131461030b5780638c0b09d014610327578063951dc22c1461035757610158565b80634032b72b116101155780634032b72b1461020957806342841531146102255780634c36fad71461024157806356f0693e1461025d5780635e1762a0146102795780636568a2791461029757610158565b806301681a621461015d57806301ac8559146101795780630c340a241461019557806314ae9f2e146101b35780631c88705d146101cf5780632ba29d38146101eb575b600080fd5b61017760048036038101906101729190613c0f565b610437565b005b610193600480360381019061018e9190613c61565b61065f565b005b61019d61080b565b6040516101aa91906143ff565b60405180910390f35b6101cd60048036038101906101c89190613c0f565b6108b0565b005b6101e960048036038101906101e49190613c0f565b610a19565b005b6101f3610db8565b60405161020091906143ff565b60405180910390f35b610223600480360381019061021e9190613c0f565b610dde565b005b61023f600480360381019061023a9190613da5565b610fb7565b005b61025b60048036038101906102569190613c0f565b611183565b005b61027760048036038101906102729190613c9d565b611386565b005b610281611cf4565b60405161028e91906144d3565b60405180910390f35b6102b160048036038101906102ac9190613d64565b611d18565b005b6102cd60048036038101906102c89190613d15565b612269565b005b6102d76123aa565b6040516102e491906144d3565b60405180910390f35b6102f56123ce565b60405161030291906144ee565b60405180910390f35b61032560048036038101906103209190613c0f565b6123f4565b005b610341600480360381019061033c9190613c0f565b612631565b60405161034e91906143ff565b60405180910390f35b61035f612664565b60405161036c91906144d3565b60405180910390f35b61037d612688565b60405161038a9190614524565b60405180910390f35b6103ad60048036038101906103a89190613c0f565b6126c1565b6040516103ba9190614866565b60405180910390f35b6103dd60048036038101906103d89190613c0f565b6128ef565b005b6103e7612d0c565b6040516103f49190614509565b60405180910390f35b61041760048036038101906104129190613c9d565b612d30565b005b610421612e77565b60405161042e9190614524565b60405180910390f35b61043f61080b565b73ffffffffffffffffffffffffffffffffffffffff1661045d613026565b73ffffffffffffffffffffffffffffffffffffffff16146104b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104aa90614646565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8826040518263ffffffff1660e01b815260040161050c91906143ff565b60206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190613eb9565b1561059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059390614546565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105d791906143ff565b60206040518083038186803b1580156105ef57600080fd5b505afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190613f0b565b905061065b610634613026565b828473ffffffffffffffffffffffffffffffffffffffff1661302e9092919063ffffffff16565b5050565b61066761080b565b73ffffffffffffffffffffffffffffffffffffffff16610685613026565b73ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d290614646565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074290614666565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290614566565b60405180910390fd5b6108077f0000000000000000000000000000000000000000000000000000000000000000837f0000000000000000000000000000000000000000000000000000000000000000846130b4565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190613c38565b905090565b6108b861080b565b73ffffffffffffffffffffffffffffffffffffffff166108d6613026565b73ffffffffffffffffffffffffffffffffffffffff161461092c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092390614646565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b815260040161098591906143ff565b602060405180830381600087803b15801561099f57600080fd5b505af11580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190613eb9565b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d906145e6565b60405180910390fd5b50565b610a2161080b565b73ffffffffffffffffffffffffffffffffffffffff16610a3f613026565b73ffffffffffffffffffffffffffffffffffffffff1614610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c90614646565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b8152600401610aee91906143ff565b602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190613eb9565b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b76906146e6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610c3791906143ff565b602060405180830381600087803b158015610c5157600080fd5b505af1158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190613eb9565b610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf906146e6565b60405180910390fd5b610d53600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff16612eb09092919063ffffffff16565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610de661080b565b73ffffffffffffffffffffffffffffffffffffffff16610e04613026565b73ffffffffffffffffffffffffffffffffffffffff1614610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5190614646565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec190614846565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b8152600401610f2391906143ff565b602060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f759190613eb9565b610fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fab90614586565b60405180910390fd5b50565b60026000541415610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff4906147e6565b60405180910390fd5b600260008190555061100d61080b565b73ffffffffffffffffffffffffffffffffffffffff1661102b613026565b73ffffffffffffffffffffffffffffffffffffffff1614611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890614646565b60405180910390fd5b80518251146110c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bc906145a6565b60405180910390fd5b60005b82518110156111765761116383828151811061110d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183838151811061114e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161115e613026565b613317565b808061116e90614bb2565b9150506110c8565b5060016000819055505050565b61118b61080b565b73ffffffffffffffffffffffffffffffffffffffff166111a9613026565b73ffffffffffffffffffffffffffffffffffffffff16146111ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f690614646565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561126f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126690614786565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e160405160405180910390a3611318600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600061355b565b611342817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61355b565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61138e61080b565b73ffffffffffffffffffffffffffffffffffffffff166113ac613026565b73ffffffffffffffffffffffffffffffffffffffff16148061147a57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e861140d613026565b6040518263ffffffff1660e01b815260040161142991906143ff565b60206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114799190613eb9565b5b6114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b090614826565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8836040518263ffffffff1660e01b815260040161151291906143ff565b60206040518083038186803b15801561152a57600080fd5b505afa15801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190613eb9565b6115a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159890614686565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190613f0b565b905060008167ffffffffffffffff811115611685577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116b35781602001602082028036833780820191505090505b50905060005b828160ff1610156117f4577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e0886f90826040518263ffffffff1660e01b815260040161171d91906148db565b604080518083038186803b15801561173457600080fd5b505afa158015611748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176c9190613cd9565b50828260ff16815181106117a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505080806117ec90614bfb565b9150506116b9565b50733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16631c3db2e030836040518363ffffffff1660e01b815260040161184492919061447a565b600060405180830381600087803b15801561185e57600080fd5b505af1158015611872573d6000803e3d6000fd5b50505050600073c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118c591906143ff565b60206040518083038186803b1580156118dd57600080fd5b505afa1580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119159190613f0b565b90506000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8f983c873c00e94cb662c3520282e6f5717214004a7f268888a876040518463ffffffff1660e01b815260040161198f93929190614443565b60006040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119e49190613e11565b92509250925060008214611b3657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7826040518263ffffffff1660e01b8152600401611a4d9190614866565b60206040518083038186803b158015611a6557600080fd5b505afa158015611a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d9190613ee2565b73ffffffffffffffffffffffffffffffffffffffff166338ed173985898630426040518663ffffffff1660e01b8152600401611add959493929190614881565b600060405180830381600087803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b349190613e78565b505b6000600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d688a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bec91906143ff565b60206040518083038186803b158015611c0457600080fd5b505afa158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c9190613f0b565b6040518263ffffffff1660e01b8152600401611c589190614866565b602060405180830381600087803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caa9190613f0b565b14611cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce1906147c6565b60405180910390fd5b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d55906147e6565b60405180910390fd5b6002600081905550611d6e61080b565b73ffffffffffffffffffffffffffffffffffffffff16611d8c613026565b73ffffffffffffffffffffffffffffffffffffffff1614611de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd990614646565b60405180910390fd5b60005b815181101561225d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8838381518110611e63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611e8791906143ff565b60206040518083038186803b158015611e9f57600080fd5b505afa158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed79190613eb9565b611f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0d90614686565b60405180910390fd5b600060036000848481518110611f55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663db006a758373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161201191906143ff565b60206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190613f0b565b6040518263ffffffff1660e01b815260040161207d9190614866565b602060405180830381600087803b15801561209757600080fd5b505af11580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf9190613f0b565b1461210f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210690614746565b60405180910390fd5b61224961211a613026565b848481518110612153577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161219391906143ff565b60206040518083038186803b1580156121ab57600080fd5b505afa1580156121bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e39190613f0b565b85858151811061221c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661302e9092919063ffffffff16565b50808061225590614bb2565b915050611de5565b50600160008190555050565b600260005414156122af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a6906147e6565b60405180910390fd5b60026000819055506122bf61080b565b73ffffffffffffffffffffffffffffffffffffffff166122dd613026565b73ffffffffffffffffffffffffffffffffffffffff1614806123535750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661233b613026565b73ffffffffffffffffffffffffffffffffffffffff16145b612392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238990614826565b60405180910390fd5b61239d838383613317565b6001600081905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6123fc61080b565b73ffffffffffffffffffffffffffffffffffffffff1661241a613026565b73ffffffffffffffffffffffffffffffffffffffff1614612470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246790614646565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d790614626565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612571576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612568906146c6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbb0958cd5add04c553a378aa342c839507b619a0459617e004c5d13602cfa72360405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600d81526020017f565553442d54726561737572790000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146128e5576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561280857600080fd5b505afa15801561281c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128409190613f0b565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161287991906143ff565b60206040518083038186803b15801561289157600080fd5b505afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c99190613f0b565b6128d39190614a0f565b6128dd91906149de565b9150506128ea565b600090505b919050565b6128f761080b565b73ffffffffffffffffffffffffffffffffffffffff16612915613026565b73ffffffffffffffffffffffffffffffffffffffff161461296b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296290614646565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d2906145c6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663edac52036040518163ffffffff1660e01b815260040160206040518083038186803b158015612a2157600080fd5b505afa158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a599190613c38565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614612ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612add90614726565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015612b4e57600080fd5b505afa158015612b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b869190613f0b565b905060005b81811015612d075760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e0886f90836040518263ffffffff1660e01b8152600401612bee9190614866565b604080518083038186803b158015612c0557600080fd5b505afa158015612c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3d9190613cd9565b509050612cf3848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612c7d91906143ff565b60206040518083038186803b158015612c9557600080fd5b505afa158015612ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccd9190613f0b565b8373ffffffffffffffffffffffffffffffffffffffff1661302e9092919063ffffffff16565b508080612cff90614bb2565b915050612b8b565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415612d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6d906147e6565b60405180910390fd5b6002600081905550612d8661080b565b73ffffffffffffffffffffffffffffffffffffffff16612da4613026565b73ffffffffffffffffffffffffffffffffffffffff161480612e1a5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612e02613026565b73ffffffffffffffffffffffffffffffffffffffff16145b612e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5090614826565b60405180910390fd5b612e6b8282612e66613026565b613317565b60016000819055505050565b6040518060400160405280600581526020017f312e322e3100000000000000000000000000000000000000000000000000000081525081565b6000811480612f49575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612ef792919061441a565b60206040518083038186803b158015612f0f57600080fd5b505afa158015612f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f479190613f0b565b145b612f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7f90614806565b60405180910390fd5b6130098363095ea7b360e01b8484604051602401612fa79291906144aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506136e4565b505050565b606061301d84846000856137ab565b90509392505050565b600033905090565b6130af8363a9059cbb60e01b848460405160240161304d9291906144aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506136e4565b505050565b8373ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f846040518263ffffffff1660e01b81526004016130ed91906143ff565b602060405180830381600087803b15801561310757600080fd5b505af115801561311b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313f9190613eb9565b61317e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613175906146a6565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f826040518263ffffffff1660e01b81526004016131b791906143ff565b602060405180830381600087803b1580156131d157600080fd5b505af11580156131e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132099190613eb9565b613248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323f906146a6565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613311817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8573ffffffffffffffffffffffffffffffffffffffff16612eb09092919063ffffffff16565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b815260040161337091906143ff565b60206040518083038186803b15801561338857600080fd5b505afa15801561339c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c09190613eb9565b6133ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133f690614686565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b81526004016134999190614866565b602060405180830381600087803b1580156134b357600080fd5b505af11580156134c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134eb9190613f0b565b1461352b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352290614706565b60405180910390fd5b61355681838573ffffffffffffffffffffffffffffffffffffffff1661302e9092919063ffffffff16565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156135a457600080fd5b505afa1580156135b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135dc9190613f0b565b8110156136df576136cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e74a6f7836040518263ffffffff1660e01b81526004016136419190614866565b60206040518083038186803b15801561365957600080fd5b505afa15801561366d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136919190613ee2565b8373c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff16612eb09092919063ffffffff16565b80806136d790614bb2565b91505061355e565b505050565b6000613746826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661300e9092919063ffffffff16565b90506000815111156137a657808060200190518101906137669190613eb9565b6137a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161379c906147a6565b60405180910390fd5b5b505050565b6060824710156137f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137e790614606565b60405180910390fd5b6137f9856138bf565b613838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161382f90614766565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161386191906143e8565b60006040518083038185875af1925050503d806000811461389e576040519150601f19603f3d011682016040523d82523d6000602084013e6138a3565b606091505b50915091506138b38282866138d2565b92505050949350505050565b600080823b905060008111915050919050565b606083156138e257829050613932565b6000835111156138f55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139299190614524565b60405180910390fd5b9392505050565b600061394c6139478461491b565b6148f6565b9050808382526020820190508285602086028201111561396b57600080fd5b60005b8581101561399b57816139818882613ae9565b84526020840193506020830192505060018101905061396e565b5050509392505050565b60006139b86139b38461491b565b6148f6565b905080838252602082019050828560208602820111156139d757600080fd5b60005b85811015613a0757816139ed8882613afe565b8452602084019350602083019250506001810190506139da565b5050509392505050565b6000613a24613a1f84614947565b6148f6565b90508083825260208201905082856020860282011115613a4357600080fd5b60005b85811015613a735781613a598882613be5565b845260208401935060208301925050600181019050613a46565b5050509392505050565b6000613a90613a8b84614947565b6148f6565b90508083825260208201905082856020860282011115613aaf57600080fd5b60005b85811015613adf5781613ac58882613bfa565b845260208401935060208301925050600181019050613ab2565b5050509392505050565b600081359050613af881615136565b92915050565b600081519050613b0d81615136565b92915050565b600082601f830112613b2457600080fd5b8135613b34848260208601613939565b91505092915050565b600082601f830112613b4e57600080fd5b8151613b5e8482602086016139a5565b91505092915050565b600082601f830112613b7857600080fd5b8135613b88848260208601613a11565b91505092915050565b600082601f830112613ba257600080fd5b8151613bb2848260208601613a7d565b91505092915050565b600081519050613bca8161514d565b92915050565b600081519050613bdf81615164565b92915050565b600081359050613bf48161517b565b92915050565b600081519050613c098161517b565b92915050565b600060208284031215613c2157600080fd5b6000613c2f84828501613ae9565b91505092915050565b600060208284031215613c4a57600080fd5b6000613c5884828501613afe565b91505092915050565b60008060408385031215613c7457600080fd5b6000613c8285828601613ae9565b9250506020613c9385828601613ae9565b9150509250929050565b60008060408385031215613cb057600080fd5b6000613cbe85828601613ae9565b9250506020613ccf85828601613be5565b9150509250929050565b60008060408385031215613cec57600080fd5b6000613cfa85828601613afe565b9250506020613d0b85828601613bfa565b9150509250929050565b600080600060608486031215613d2a57600080fd5b6000613d3886828701613ae9565b9350506020613d4986828701613be5565b9250506040613d5a86828701613ae9565b9150509250925092565b600060208284031215613d7657600080fd5b600082013567ffffffffffffffff811115613d9057600080fd5b613d9c84828501613b13565b91505092915050565b60008060408385031215613db857600080fd5b600083013567ffffffffffffffff811115613dd257600080fd5b613dde85828601613b13565b925050602083013567ffffffffffffffff811115613dfb57600080fd5b613e0785828601613b67565b9150509250929050565b600080600060608486031215613e2657600080fd5b600084015167ffffffffffffffff811115613e4057600080fd5b613e4c86828701613b3d565b9350506020613e5d86828701613bfa565b9250506040613e6e86828701613bfa565b9150509250925092565b600060208284031215613e8a57600080fd5b600082015167ffffffffffffffff811115613ea457600080fd5b613eb084828501613b91565b91505092915050565b600060208284031215613ecb57600080fd5b6000613ed984828501613bbb565b91505092915050565b600060208284031215613ef457600080fd5b6000613f0284828501613bd0565b91505092915050565b600060208284031215613f1d57600080fd5b6000613f2b84828501613bfa565b91505092915050565b6000613f408383613f4c565b60208301905092915050565b613f5581614a69565b82525050565b613f6481614a69565b82525050565b6000613f7582614983565b613f7f81856149b1565b9350613f8a83614973565b8060005b83811015613fbb578151613fa28882613f34565b9750613fad836149a4565b925050600181019050613f8e565b5085935050505092915050565b6000613fd38261498e565b613fdd81856149c2565b9350613fed818560208601614b4e565b80840191505092915050565b61400281614ad0565b82525050565b61401181614af4565b82525050565b61402081614b18565b82525050565b600061403182614999565b61403b81856149cd565b935061404b818560208601614b4e565b61405481614cb2565b840191505092915050565b600061406c601e836149cd565b915061407782614cc3565b602082019050919050565b600061408f6016836149cd565b915061409a82614cec565b602082019050919050565b60006140b26011836149cd565b91506140bd82614d15565b602082019050919050565b60006140d56015836149cd565b91506140e082614d3e565b602082019050919050565b60006140f8601c836149cd565b915061410382614d67565b602082019050919050565b600061411b6014836149cd565b915061412682614d90565b602082019050919050565b600061413e6026836149cd565b915061414982614db9565b604082019050919050565b60006141616018836149cd565b915061416c82614e08565b602082019050919050565b6000614184601a836149cd565b915061418f82614e31565b602082019050919050565b60006141a76015836149cd565b91506141b282614e5a565b602082019050919050565b60006141ca6016836149cd565b91506141d582614e83565b602082019050919050565b60006141ed6012836149cd565b91506141f882614eac565b602082019050919050565b6000614210600d836149cd565b915061421b82614ed5565b602082019050919050565b60006142336017836149cd565b915061423e82614efe565b602082019050919050565b60006142566018836149cd565b915061426182614f27565b602082019050919050565b6000614279600d836149cd565b915061428482614f50565b602082019050919050565b600061429c600d836149cd565b91506142a782614f79565b602082019050919050565b60006142bf601d836149cd565b91506142ca82614fa2565b602082019050919050565b60006142e2601c836149cd565b91506142ed82614fcb565b602082019050919050565b6000614305602a836149cd565b915061431082614ff4565b604082019050919050565b60006143286012836149cd565b915061433382615043565b602082019050919050565b600061434b601f836149cd565b91506143568261506c565b602082019050919050565b600061436e6036836149cd565b915061437982615095565b604082019050919050565b60006143916018836149cd565b915061439c826150e4565b602082019050919050565b60006143b46016836149cd565b91506143bf8261510d565b602082019050919050565b6143d381614ab9565b82525050565b6143e281614b3c565b82525050565b60006143f48284613fc8565b915081905092915050565b60006020820190506144146000830184613f5b565b92915050565b600060408201905061442f6000830185613f5b565b61443c6020830184613f5b565b9392505050565b60006060820190506144586000830186613f5b565b6144656020830185613f5b565b61447260408301846143ca565b949350505050565b600060408201905061448f6000830185613f5b565b81810360208301526144a18184613f6a565b90509392505050565b60006040820190506144bf6000830185613f5b565b6144cc60208301846143ca565b9392505050565b60006020820190506144e86000830184613ff9565b92915050565b60006020820190506145036000830184614008565b92915050565b600060208201905061451e6000830184614017565b92915050565b6000602082019050818103600083015261453e8184614026565b905092915050565b6000602082019050818103600083015261455f8161405f565b9050919050565b6000602082019050818103600083015261457f81614082565b9050919050565b6000602082019050818103600083015261459f816140a5565b9050919050565b600060208201905081810360008301526145bf816140c8565b9050919050565b600060208201905081810360008301526145df816140eb565b9050919050565b600060208201905081810360008301526145ff8161410e565b9050919050565b6000602082019050818103600083015261461f81614131565b9050919050565b6000602082019050818103600083015261463f81614154565b9050919050565b6000602082019050818103600083015261465f81614177565b9050919050565b6000602082019050818103600083015261467f8161419a565b9050919050565b6000602082019050818103600083015261469f816141bd565b9050919050565b600060208201905081810360008301526146bf816141e0565b9050919050565b600060208201905081810360008301526146df81614203565b9050919050565b600060208201905081810360008301526146ff81614226565b9050919050565b6000602082019050818103600083015261471f81614249565b9050919050565b6000602082019050818103600083015261473f8161426c565b9050919050565b6000602082019050818103600083015261475f8161428f565b9050919050565b6000602082019050818103600083015261477f816142b2565b9050919050565b6000602082019050818103600083015261479f816142d5565b9050919050565b600060208201905081810360008301526147bf816142f8565b9050919050565b600060208201905081810360008301526147df8161431b565b9050919050565b600060208201905081810360008301526147ff8161433e565b9050919050565b6000602082019050818103600083015261481f81614361565b9050919050565b6000602082019050818103600083015261483f81614384565b9050919050565b6000602082019050818103600083015261485f816143a7565b9050919050565b600060208201905061487b60008301846143ca565b92915050565b600060a08201905061489660008301886143ca565b6148a360208301876143ca565b81810360408301526148b58186613f6a565b90506148c46060830185613f5b565b6148d160808301846143ca565b9695505050505050565b60006020820190506148f060008301846143d9565b92915050565b6000614900614911565b905061490c8282614b81565b919050565b6000604051905090565b600067ffffffffffffffff82111561493657614935614c83565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561496257614961614c83565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006149e982614ab9565b91506149f483614ab9565b925082614a0457614a03614c54565b5b828204905092915050565b6000614a1a82614ab9565b9150614a2583614ab9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a5e57614a5d614c25565b5b828202905092915050565b6000614a7482614a99565b9050919050565b60008115159050919050565b6000614a9282614a69565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614adb82614ae2565b9050919050565b6000614aed82614a99565b9050919050565b6000614aff82614b06565b9050919050565b6000614b1182614a99565b9050919050565b6000614b2382614b2a565b9050919050565b6000614b3582614a99565b9050919050565b6000614b4782614ac3565b9050919050565b60005b83811015614b6c578082015181840152602081019050614b51565b83811115614b7b576000848401525b50505050565b614b8a82614cb2565b810181811067ffffffffffffffff82111715614ba957614ba8614c83565b5b80604052505050565b6000614bbd82614ab9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614bf057614bef614c25565b5b600182019050919050565b6000614c0682614ac3565b915060ff821415614c1a57614c19614c25565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f63546f6b656e2d69732d6e6f742d616c6c6f7765642d746f2d73776565700000600082015250565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6164642d6b65657065722d6661696c6564000000000000000000000000000000600082015250565b7f696e7075742d6c656e6774682d6d69736d617463680000000000000000000000600082015250565b7f6e65772d74726561737572792d616464726573732d69732d7a65726f00000000600082015250565b7f72656d6f76652d6b65657065722d6661696c6564000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f72656465656d65722d616464726573732d69732d7a65726f0000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d72656465656d657200000000000000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f72656465656d2d756e6465726c79696e672d6661696c65640000000000000000600082015250565b7f767573642d6d69736d6174636800000000000000000000000000000000000000600082015250565b7f72656465656d2d6661696c656400000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f737761702d6d616e616765722d616464726573732d69732d7a65726f00000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d617574686f72697a65640000000000000000600082015250565b7f6b65657065722d616464726573732d69732d7a65726f00000000000000000000600082015250565b61513f81614a69565b811461514a57600080fd5b50565b61515681614a7b565b811461516157600080fd5b50565b61516d81614a87565b811461517857600080fd5b50565b61518481614ab9565b811461518f57600080fd5b5056fea2646970667358221220ea09ab964083fa438a60c2cd8da19b5df613b0836fd445f1bd8d474d0fb746ba64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "addWhitelistedToken(address,address)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_token": "address which we want to add in token list."
        }
      },
      "claimCompAndConvertTo(address,uint256)": {
        "params": {
          "_minOut": "Minimum _toToken expected after conversion",
          "_toToken": "COMP will be swapped to _toToken"
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "migrate(address)": {
        "params": {
          "_newTreasury": "Address of new treasury of VUSD system"
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "removeWhitelistedToken(address)": {
        "details": "Removing token even if treasury has some balance of that token is intended behavior.",
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "sweep(address)": {
        "details": "OnlyGovernor can call this and CTokens are not allowed to sweep",
        "params": {
          "_fromToken": "Token address to sweep"
        }
      },
      "updateRedeemer(address)": {
        "params": {
          "_newRedeemer": "new redeemer address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_newSwapManager": "new swap manager address"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens."
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Only Redeemer and Governor are allowed to call",
        "params": {
          "_amount": "token amount to withdraw",
          "_token": "Token to withdraw, it should be 1 of the supported tokens.",
          "_tokenReceiver": "Address of token receiver"
        }
      },
      "withdrawAll(address[])": {
        "details": "Only Governor is allowed to call.",
        "params": {
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawMulti(address[],uint256[])": {
        "details": "Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length",
        "params": {
          "_amounts": "Array of token amount to withdraw",
          "_tokens": "Array of token addresses, tokens should be supported tokens."
        }
      },
      "withdrawable(address)": {
        "params": {
          "_token": "Token to withdraw"
        }
      }
    },
    "title": "VUSD Treasury, It stores cTokens and redeem those from Compound as needed.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "addWhitelistedToken(address,address)": {
        "notice": "Add token into treasury management system"
      },
      "claimCompAndConvertTo(address,uint256)": {
        "notice": "Claim comp from all markets and convert to given token. Also deposit those tokens to Compound"
      },
      "migrate(address)": {
        "notice": "Migrate assets to new treasury"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from treasury management system"
      },
      "sweep(address)": {
        "notice": "Sweep any ERC20 token to governor address"
      },
      "updateRedeemer(address)": {
        "notice": "Update redeemer address"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw given amount of token."
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw given amount of token."
      },
      "withdrawAll(address[])": {
        "notice": "Withdraw all of multiple tokens."
      },
      "withdrawMulti(address[],uint256[])": {
        "notice": "Withdraw multiple tokens."
      },
      "withdrawable(address)": {
        "notice": "Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2862,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "redeemer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2868,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "swapManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwapManager)4551"
      },
      {
        "astId": 2872,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "cTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4551": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}