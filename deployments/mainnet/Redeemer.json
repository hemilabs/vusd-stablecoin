{
  "address": "0x43c704BC0F773B529E871EAAF4E283C2233512F9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTolerance",
          "type": "uint256"
        }
      ],
      "name": "UpdatedPriceTolerance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRedeemFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRedeemFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRedeemFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousStalePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "UpdatedStalePeriod",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_REDEEM_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vusdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "redeemable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vusdAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTolerance",
          "type": "uint256"
        }
      ],
      "name": "updatePriceTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRedeemFee",
          "type": "uint256"
        }
      ],
      "name": "updateRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "updateStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusdDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x875c803594285676eea7f839507d1769a8de45911a215bed0c5665cb71b8f64f",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x43c704BC0F773B529E871EAAF4E283C2233512F9",
    "transactionIndex": 29,
    "gasUsed": "1932776",
    "logsBloom": "0x
    "blockHash": "0x2aab997eec57398aa5ce4fe246e649b1d4c321bd67281822bb3479ae0ae34a6e",
    "transactionHash": "0x875c803594285676eea7f839507d1769a8de45911a215bed0c5665cb71b8f64f",
    "logs": [],
    "blockNumber": 22582096,
    "cumulativeGasUsed": "5315007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619"
  ],
  "solcInputHash": "d0a6b6d63ed5c6f0cd3f48ef76bbf589",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTolerance\",\"type\":\"uint256\"}],\"name\":\"UpdatedPriceTolerance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedeemFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedRedeemFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"UpdatedStalePeriod\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REDEEM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vusdAmount\",\"type\":\"uint256\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTolerance\",\"type\":\"uint256\"}],\"name\":\"updatePriceTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRedeemFee\",\"type\":\"uint256\"}],\"name\":\"updateRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"updateStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusdDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"redeem(address,uint256,uint256,address)\":{\"params\":{\"_token\":\"Token to redeem, it should be 1 of the supported tokens from treasury.\",\"_tokenReceiver\":\"Address of token receiver\",\"_vusdAmount\":\"VUSD amount to burn. VUSD will be burnt from caller\"}},\"redeemable(address)\":{\"details\":\"Current redeemable amount for given token\"},\"redeemable(address,uint256)\":{\"params\":{\"_token\":\"Token to redeem\",\"_vusdAmount\":\"VUSD amount to burn\"}},\"treasury()\":{\"details\":\"Treasury is defined in VUSD token contract only\"}},\"title\":\"VUSD Redeemer, User can redeem their VUSD with any supported tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redeem(address,uint256,uint256,address)\":{\"notice\":\"Redeem token and burn VUSD amount less redeem fee, if any.\"},\"redeemable(address,uint256)\":{\"notice\":\"Current redeemable amount for given token and vusdAmount. If token is not supported by treasury it will return 0. If vusdAmount is higher than current total redeemable of token it will return 0.\"},\"updatePriceTolerance(uint256)\":{\"notice\":\"Update price tolerance\"},\"updateRedeemFee(uint256)\":{\"notice\":\"Update redeem fee\"},\"updateStalePeriod(address,uint256)\":{\"notice\":\"Update stale period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Redeemer.sol\":\"Redeemer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Redeemer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/chainlink/IAggregatorV3.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\n/// @title VUSD Redeemer, User can redeem their VUSD with any supported tokens\\ncontract Redeemer is Context, ReentrancyGuard {\\n    string public constant NAME = \\\"VUSD-Redeemer\\\";\\n    string public constant VERSION = \\\"1.4.2\\\";\\n\\n    IVUSD public immutable vusd;\\n    uint8 public immutable vusdDecimals;\\n\\n    uint256 public redeemFee = 30; // Default 0.3% fee\\n    uint256 public constant MAX_REDEEM_FEE = 10_000; // 10_000 = 100%\\n    uint256 public priceTolerance = 100; // Default 1% based on BPS\\n    // Oracle => stalePeriod mapping\\n    mapping(address => uint256) public stalePeriod;\\n\\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    event UpdatedRedeemFee(uint256 previousRedeemFee, uint256 newRedeemFee);\\n    event UpdatedPriceTolerance(uint256 previousTolerance, uint256 newTolerance);\\n    event UpdatedStalePeriod(address indexed oracle, uint256 previousStalePeriod, uint256 newStalePeriod);\\n\\n    constructor(address _vusd) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n        vusdDecimals = IERC20Metadata(_vusd).decimals();\\n\\n        // set default stale periods for DAI, USDC, USDT, oracles\\n        ITreasury _treasury = ITreasury(IVUSD(_vusd).treasury());\\n        stalePeriod[_treasury.oracles(DAI)] = 1 hours;\\n        stalePeriod[_treasury.oracles(USDC)] = 24 hours;\\n        stalePeriod[_treasury.oracles(USDT)] = 24 hours;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n\\n    /// @notice Update redeem fee\\n    function updateRedeemFee(uint256 _newRedeemFee) external onlyGovernor {\\n        require(_newRedeemFee <= MAX_REDEEM_FEE, \\\"redeem-fee-limit-reached\\\");\\n        uint256 _previousRedeemFee = redeemFee;\\n        require(_previousRedeemFee != _newRedeemFee, \\\"same-redeem-fee\\\");\\n        redeemFee = _newRedeemFee;\\n        emit UpdatedRedeemFee(_previousRedeemFee, _newRedeemFee);\\n    }\\n\\n    /// @notice Update price tolerance\\n    function updatePriceTolerance(uint256 _newTolerance) external onlyGovernor {\\n        require(_newTolerance <= MAX_REDEEM_FEE, \\\"price-tolerance-is-invalid\\\");\\n        uint256 _previousTolerance = priceTolerance;\\n        require(_previousTolerance != _newTolerance, \\\"same-tolerance\\\");\\n        priceTolerance = _newTolerance;\\n        emit UpdatedPriceTolerance(_previousTolerance, _newTolerance);\\n    }\\n\\n    /// @notice Update stale period\\n    function updateStalePeriod(address _oracle, uint256 _newStalePeriod) external onlyGovernor {\\n        require(_newStalePeriod > 0, \\\"stale-period-is-invalid\\\");\\n        uint256 _currentStalePeriod = stalePeriod[_oracle];\\n        require(_currentStalePeriod != _newStalePeriod, \\\"same-stale-period\\\");\\n        emit UpdatedStalePeriod(_oracle, _currentStalePeriod, _newStalePeriod);\\n        stalePeriod[_oracle] = _newStalePeriod;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Redeem token and burn VUSD amount less redeem fee, if any.\\n     * @param _token Token to redeem, it should be 1 of the supported tokens from treasury.\\n     * @param _vusdAmount VUSD amount to burn. VUSD will be burnt from caller\\n     * @param _tokenReceiver Address of token receiver\\n     */\\n    function redeem(\\n        address _token,\\n        uint256 _vusdAmount,\\n        uint256 _minAmountOut,\\n        address _tokenReceiver\\n    ) external nonReentrant {\\n        _redeem(_token, _vusdAmount, _minAmountOut, _tokenReceiver);\\n    }\\n\\n    /**\\n     * @notice Current redeemable amount for given token and vusdAmount.\\n     * If token is not supported by treasury it will return 0.\\n     * If vusdAmount is higher than current total redeemable of token it will return 0.\\n     * @param _token Token to redeem\\n     * @param _vusdAmount VUSD amount to burn\\n     */\\n    function redeemable(address _token, uint256 _vusdAmount) external view returns (uint256) {\\n        ITreasury _treasury = ITreasury(treasury());\\n        if (_treasury.isWhitelistedToken(_token)) {\\n            uint256 _redeemable = _calculateRedeemable(_token, _vusdAmount);\\n            return _redeemable > redeemable(_token) ? 0 : _redeemable;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Current redeemable amount for given token\\n    function redeemable(address _token) public view returns (uint256) {\\n        return ITreasury(treasury()).withdrawable(_token);\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /// @dev Treasury is defined in VUSD token contract only\\n    function treasury() public view returns (address) {\\n        return vusd.treasury();\\n    }\\n\\n    function _redeem(\\n        address _token,\\n        uint256 _vusdAmount,\\n        uint256 _minAmountOut,\\n        address _tokenReceiver\\n    ) internal {\\n        uint256 _redeemable = _calculateRedeemable(_token, _vusdAmount);\\n        require(_redeemable >= _minAmountOut, \\\"redeemable-amount-is-less-than-minimum\\\");\\n        vusd.burnFrom(_msgSender(), _vusdAmount);\\n        ITreasury(treasury()).withdraw(_token, _redeemable, _tokenReceiver);\\n    }\\n\\n    /**\\n     * @notice Calculate redeemable amount based on oracle price and redeemFee, if any.\\n     * Also covert 18 decimal VUSD amount to _token defined decimal amount.\\n     * @return Token amount that user will get after burning vusdAmount\\n     */\\n    function _calculateRedeemable(address _token, uint256 _vusdAmount) internal view returns (uint256) {\\n        IAggregatorV3 _oracle = IAggregatorV3(ITreasury(treasury()).oracles(_token));\\n        (, int256 _price, , uint256 _updatedAt, ) = IAggregatorV3(_oracle).latestRoundData();\\n        require(block.timestamp - _updatedAt < stalePeriod[address(_oracle)], \\\"oracle-price-is-stale\\\");\\n        uint256 _latestPrice = uint256(_price);\\n        uint8 _oracleDecimal = IAggregatorV3(_oracle).decimals();\\n\\n        // Token is expected to be stable coin only. Ideal price is 1 USD\\n        uint256 _oneUSD = 10**_oracleDecimal;\\n        uint256 _tolerance = (_oneUSD * priceTolerance) / MAX_REDEEM_FEE;\\n        uint256 _priceUpperBound = _oneUSD + _tolerance;\\n        uint256 _priceLowerBound = _oneUSD - _tolerance;\\n\\n        require(_latestPrice <= _priceUpperBound && _latestPrice >= _priceLowerBound, \\\"price-tolerance-exceeded\\\");\\n        uint256 _redeemable = _latestPrice <= _oneUSD ? _vusdAmount : (_vusdAmount * _oneUSD) / _latestPrice;\\n        uint256 _redeemFee = redeemFee;\\n        if (_redeemFee != 0) {\\n            _redeemable -= (_redeemable * _redeemFee) / MAX_REDEEM_FEE;\\n        }\\n        // convert redeemable to _token defined decimal\\n        return _redeemable / 10**(vusdDecimals - IERC20Metadata(_token).decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x04987a6af861f2eb75125e47dfa73a9117041deb84d8ca81451d71723ecce6ff\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ITreasury {\\n    function withdraw(address _token, uint256 _amount) external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _tokenReceiver\\n    ) external;\\n\\n    function isWhitelistedToken(address _address) external view returns (bool);\\n\\n    function oracles(address _token) external view returns (address);\\n\\n    function withdrawable(address _token) external view returns (uint256);\\n\\n    function whitelistedTokens() external view returns (address[] memory);\\n\\n    function vusd() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd7a1f000e2b43a4cc589ba935df8f61ab4b838d60ac97199bdaf6be7471bab9a\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x997961bc6c7780fbc360cc48a7f855f9abe92cf719913f0a906da96d8df6cecd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601e60015560646002553480156200001b57600080fd5b50604051620025aa380380620025aa8339818101604052810190620000419190620004fb565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000bc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b390620005a8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013a57600080fd5b505afa1580156200014f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000175919062000527565b60ff1660a08160ff1660f81b8152505060008173ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015620001ce57600080fd5b505afa158015620001e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002099190620004fb565b9050610e10600360008373ffffffffffffffffffffffffffffffffffffffff1663addd5099736b175474e89094c44da98b954eedeac495271d0f6040518263ffffffff1660e01b81526004016200026191906200058b565b60206040518083038186803b1580156200027a57600080fd5b505afa1580156200028f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b59190620004fb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062015180600360008373ffffffffffffffffffffffffffffffffffffffff1663addd509973a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518263ffffffff1660e01b81526004016200034a91906200058b565b60206040518083038186803b1580156200036357600080fd5b505afa15801562000378573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039e9190620004fb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062015180600360008373ffffffffffffffffffffffffffffffffffffffff1663addd509973dac17f958d2ee523a2206206994597c13d831ec76040518263ffffffff1660e01b81526004016200043391906200058b565b60206040518083038186803b1580156200044c57600080fd5b505afa15801562000461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004879190620004fb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505062000679565b600081519050620004de8162000645565b92915050565b600081519050620004f5816200065f565b92915050565b6000602082840312156200050e57600080fd5b60006200051e84828501620004cd565b91505092915050565b6000602082840312156200053a57600080fd5b60006200054a84828501620004e4565b91505092915050565b6200055e81620005db565b82525050565b600062000573601483620005ca565b915062000580826200061c565b602082019050919050565b6000602082019050620005a2600083018462000553565b92915050565b60006020820190508181036000830152620005c38162000564565b9050919050565b600082825260208201905092915050565b6000620005e882620005ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b7f767573642d616464726573732d69732d7a65726f000000000000000000000000600082015250565b6200065081620005db565b81146200065c57600080fd5b50565b6200066a816200060f565b81146200067657600080fd5b50565b60805160601c60a05160f81c611ee9620006c16000396000818161082101526110ae015260008181610317015281816106a8015281816109eb0152610bf00152611ee96000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637d92272211610097578063c760af5c11610066578063c760af5c1461029f578063edac5203146102bb578063fb00d514146102d9578063ffa1ad74146102f557610100565b80637d92272214610215578063965fa21e14610233578063a3f4df7e14610251578063bae5e3931461026f57610100565b8063484267a4116100d3578063484267a41461017957806359011cd1146101a957806361d027b3146101c757806367627b62146101e557610100565b80630c340a24146101055780631bee36d91461012357806326ac1d561461013f57806343bcfab61461015d575b600080fd5b61010d610313565b60405161011a91906115ab565b60405180910390f35b61013d600480360381019061013891906111fb565b6103b8565b005b610147610597565b60405161015491906117c3565b60405180910390f35b61017760048036038101906101729190611237565b61059d565b005b610193600480360381019061018e91906111a9565b610605565b6040516101a091906117c3565b60405180910390f35b6101b161069e565b6040516101be91906117c3565b60405180910390f35b6101cf6106a4565b6040516101dc91906115ab565b60405180910390f35b6101ff60048036038101906101fa91906111fb565b610749565b60405161020c91906117c3565b60405180910390f35b61021d61081f565b60405161022a9190611807565b60405180910390f35b61023b610843565b60405161024891906117c3565b60405180910390f35b610259610849565b6040516102669190611641565b60405180910390f35b610289600480360381019061028491906111a9565b610882565b60405161029691906117c3565b60405180910390f35b6102b960048036038101906102b491906112c3565b61089a565b005b6102c36109e9565b6040516102d09190611626565b60405180910390f35b6102f360048036038101906102ee91906112c3565b610a0d565b005b6102fd610b5c565b60405161030a9190611641565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561037b57600080fd5b505afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b391906111d2565b905090565b6103c0610313565b73ffffffffffffffffffffffffffffffffffffffff166103de610b95565b73ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906116c3565b60405180910390fd5b60008111610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90611703565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818114156104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590611663565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fa4d13447e0a7888b1316f15dd7e76bfe640e00a29607696ed1d452414b3d4b6f82846040516105469291906117de565b60405180910390a281600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b61271081565b600260005414156105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da90611763565b60405180910390fd5b60026000819055506105f784848484610b9d565b600160008190555050505050565b600061060f6106a4565b73ffffffffffffffffffffffffffffffffffffffff1663ce513b6f836040518263ffffffff1660e01b815260040161064791906115ab565b60206040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069791906112ec565b9050919050565b60025481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906111d2565b905090565b6000806107546106a4565b90508073ffffffffffffffffffffffffffffffffffffffff1663ab37f486856040518263ffffffff1660e01b815260040161078f91906115ab565b60206040518083038186803b1580156107a757600080fd5b505afa1580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df919061129a565b156108135760006107f08585610cff565b90506107fb85610605565b8111610807578061080a565b60005b92505050610819565b60009150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b6040518060400160405280600d81526020017f565553442d52656465656d65720000000000000000000000000000000000000081525081565b60036020528060005260406000206000915090505481565b6108a2610313565b73ffffffffffffffffffffffffffffffffffffffff166108c0610b95565b73ffffffffffffffffffffffffffffffffffffffff1614610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d906116c3565b60405180910390fd5b61271081111561095b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610952906116e3565b60405180910390fd5b60006002549050818114156109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611683565b60405180910390fd5b816002819055507f3cb23ae97dcd603618548f333b96dbb9e41059b6fd0eb7face59058c5ac3b11b81836040516109dd9291906117de565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a15610313565b73ffffffffffffffffffffffffffffffffffffffff16610a33610b95565b73ffffffffffffffffffffffffffffffffffffffff1614610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a80906116c3565b60405180910390fd5b612710811115610ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac590611783565b60405180910390fd5b6000600154905081811415610b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0f90611723565b60405180910390fd5b816001819055507f78f68725a1b1a56a998dd7a8d279eb9bfbd45bc0fcee78f408200737275873e58183604051610b509291906117de565b60405180910390a15050565b6040518060400160405280600581526020017f312e342e3200000000000000000000000000000000000000000000000000000081525081565b600033905090565b6000610ba98585610cff565b905082811015610bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be5906117a3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc6790610c32610b95565b866040518363ffffffff1660e01b8152600401610c509291906115c6565b600060405180830381600087803b158015610c6a57600080fd5b505af1158015610c7e573d6000803e3d6000fd5b50505050610c8a6106a4565b73ffffffffffffffffffffffffffffffffffffffff166369328dec8683856040518463ffffffff1660e01b8152600401610cc6939291906115ef565b600060405180830381600087803b158015610ce057600080fd5b505af1158015610cf4573d6000803e3d6000fd5b505050505050505050565b600080610d0a6106a4565b73ffffffffffffffffffffffffffffffffffffffff1663addd5099856040518263ffffffff1660e01b8152600401610d4291906115ab565b60206040518083038186803b158015610d5a57600080fd5b505afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9291906111d2565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190611315565b50935050925050600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548142610e689190611a90565b10610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f90611743565b60405180910390fd5b600082905060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ef557600080fd5b505afa158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d919061138c565b9050600081600a610f3e9190611918565b9050600061271060025483610f539190611a36565b610f5d9190611894565b905060008183610f6d919061183e565b905060008284610f7d9190611a90565b9050818611158015610f8f5750808610155b610fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc5906116a3565b60405180910390fd5b600084871115610ff45786858d610fe59190611a36565b610fef9190611894565b610ff6565b8b5b9050600060015490506000811461102e5761271081836110169190611a36565b6110209190611894565b8261102b9190611a90565b91505b8d73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107457600080fd5b505afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac919061138c565b7f00000000000000000000000000000000000000000000000000000000000000006110d79190611ac4565b600a6110e39190611918565b826110ee9190611894565b9b50505050505050505050505092915050565b60008135905061111081611e29565b92915050565b60008151905061112581611e29565b92915050565b60008151905061113a81611e40565b92915050565b60008151905061114f81611e57565b92915050565b60008135905061116481611e6e565b92915050565b60008151905061117981611e6e565b92915050565b60008151905061118e81611e9c565b92915050565b6000815190506111a381611e85565b92915050565b6000602082840312156111bb57600080fd5b60006111c984828501611101565b91505092915050565b6000602082840312156111e457600080fd5b60006111f284828501611116565b91505092915050565b6000806040838503121561120e57600080fd5b600061121c85828601611101565b925050602061122d85828601611155565b9150509250929050565b6000806000806080858703121561124d57600080fd5b600061125b87828801611101565b945050602061126c87828801611155565b935050604061127d87828801611155565b925050606061128e87828801611101565b91505092959194509250565b6000602082840312156112ac57600080fd5b60006112ba8482850161112b565b91505092915050565b6000602082840312156112d557600080fd5b60006112e384828501611155565b91505092915050565b6000602082840312156112fe57600080fd5b600061130c8482850161116a565b91505092915050565b600080600080600060a0868803121561132d57600080fd5b600061133b8882890161117f565b955050602061134c88828901611140565b945050604061135d8882890161116a565b935050606061136e8882890161116a565b925050608061137f8882890161117f565b9150509295509295909350565b60006020828403121561139e57600080fd5b60006113ac84828501611194565b91505092915050565b6113be81611af8565b82525050565b6113cd81611b6d565b82525050565b60006113de82611822565b6113e8818561182d565b93506113f8818560208601611b91565b61140181611c22565b840191505092915050565b600061141960118361182d565b915061142482611c40565b602082019050919050565b600061143c600e8361182d565b915061144782611c69565b602082019050919050565b600061145f60188361182d565b915061146a82611c92565b602082019050919050565b6000611482601a8361182d565b915061148d82611cbb565b602082019050919050565b60006114a5601a8361182d565b91506114b082611ce4565b602082019050919050565b60006114c860178361182d565b91506114d382611d0d565b602082019050919050565b60006114eb600f8361182d565b91506114f682611d36565b602082019050919050565b600061150e60158361182d565b915061151982611d5f565b602082019050919050565b6000611531601f8361182d565b915061153c82611d88565b602082019050919050565b600061155460188361182d565b915061155f82611db1565b602082019050919050565b600061157760268361182d565b915061158282611dda565b604082019050919050565b61159681611b40565b82525050565b6115a581611b4a565b82525050565b60006020820190506115c060008301846113b5565b92915050565b60006040820190506115db60008301856113b5565b6115e8602083018461158d565b9392505050565b600060608201905061160460008301866113b5565b611611602083018561158d565b61161e60408301846113b5565b949350505050565b600060208201905061163b60008301846113c4565b92915050565b6000602082019050818103600083015261165b81846113d3565b905092915050565b6000602082019050818103600083015261167c8161140c565b9050919050565b6000602082019050818103600083015261169c8161142f565b9050919050565b600060208201905081810360008301526116bc81611452565b9050919050565b600060208201905081810360008301526116dc81611475565b9050919050565b600060208201905081810360008301526116fc81611498565b9050919050565b6000602082019050818103600083015261171c816114bb565b9050919050565b6000602082019050818103600083015261173c816114de565b9050919050565b6000602082019050818103600083015261175c81611501565b9050919050565b6000602082019050818103600083015261177c81611524565b9050919050565b6000602082019050818103600083015261179c81611547565b9050919050565b600060208201905081810360008301526117bc8161156a565b9050919050565b60006020820190506117d8600083018461158d565b92915050565b60006040820190506117f3600083018561158d565b611800602083018461158d565b9392505050565b600060208201905061181c600083018461159c565b92915050565b600081519050919050565b600082825260208201905092915050565b600061184982611b40565b915061185483611b40565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561188957611888611bc4565b5b828201905092915050565b600061189f82611b40565b91506118aa83611b40565b9250826118ba576118b9611bf3565b5b828204905092915050565b6000808291508390505b600185111561190f578086048111156118eb576118ea611bc4565b5b60018516156118fa5780820291505b808102905061190885611c33565b94506118cf565b94509492505050565b600061192382611b40565b915061192e83611b4a565b925061195b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611963565b905092915050565b6000826119735760019050611a2f565b816119815760009050611a2f565b816001811461199757600281146119a1576119d0565b6001915050611a2f565b60ff8411156119b3576119b2611bc4565b5b8360020a9150848211156119ca576119c9611bc4565b5b50611a2f565b5060208310610133831016604e8410600b8410161715611a055782820a905083811115611a00576119ff611bc4565b5b611a2f565b611a1284848460016118c5565b92509050818404811115611a2957611a28611bc4565b5b81810290505b9392505050565b6000611a4182611b40565b9150611a4c83611b40565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a8557611a84611bc4565b5b828202905092915050565b6000611a9b82611b40565b9150611aa683611b40565b925082821015611ab957611ab8611bc4565b5b828203905092915050565b6000611acf82611b4a565b9150611ada83611b4a565b925082821015611aed57611aec611bc4565b5b828203905092915050565b6000611b0382611b20565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b6000611b7882611b7f565b9050919050565b6000611b8a82611b20565b9050919050565b60005b83811015611baf578082015181840152602081019050611b94565b83811115611bbe576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f73616d652d7374616c652d706572696f64000000000000000000000000000000600082015250565b7f73616d652d746f6c6572616e6365000000000000000000000000000000000000600082015250565b7f70726963652d746f6c6572616e63652d65786365656465640000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f70726963652d746f6c6572616e63652d69732d696e76616c6964000000000000600082015250565b7f7374616c652d706572696f642d69732d696e76616c6964000000000000000000600082015250565b7f73616d652d72656465656d2d6665650000000000000000000000000000000000600082015250565b7f6f7261636c652d70726963652d69732d7374616c650000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f72656465656d2d6665652d6c696d69742d726561636865640000000000000000600082015250565b7f72656465656d61626c652d616d6f756e742d69732d6c6573732d7468616e2d6d60008201527f696e696d756d0000000000000000000000000000000000000000000000000000602082015250565b611e3281611af8565b8114611e3d57600080fd5b50565b611e4981611b0a565b8114611e5457600080fd5b50565b611e6081611b16565b8114611e6b57600080fd5b50565b611e7781611b40565b8114611e8257600080fd5b50565b611e8e81611b4a565b8114611e9957600080fd5b50565b611ea581611b57565b8114611eb057600080fd5b5056fea264697066735822122007301dd11ed6dae068e14b90d6599b18c95673e3340ec05a5c98cc0d305f907d64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637d92272211610097578063c760af5c11610066578063c760af5c1461029f578063edac5203146102bb578063fb00d514146102d9578063ffa1ad74146102f557610100565b80637d92272214610215578063965fa21e14610233578063a3f4df7e14610251578063bae5e3931461026f57610100565b8063484267a4116100d3578063484267a41461017957806359011cd1146101a957806361d027b3146101c757806367627b62146101e557610100565b80630c340a24146101055780631bee36d91461012357806326ac1d561461013f57806343bcfab61461015d575b600080fd5b61010d610313565b60405161011a91906115ab565b60405180910390f35b61013d600480360381019061013891906111fb565b6103b8565b005b610147610597565b60405161015491906117c3565b60405180910390f35b61017760048036038101906101729190611237565b61059d565b005b610193600480360381019061018e91906111a9565b610605565b6040516101a091906117c3565b60405180910390f35b6101b161069e565b6040516101be91906117c3565b60405180910390f35b6101cf6106a4565b6040516101dc91906115ab565b60405180910390f35b6101ff60048036038101906101fa91906111fb565b610749565b60405161020c91906117c3565b60405180910390f35b61021d61081f565b60405161022a9190611807565b60405180910390f35b61023b610843565b60405161024891906117c3565b60405180910390f35b610259610849565b6040516102669190611641565b60405180910390f35b610289600480360381019061028491906111a9565b610882565b60405161029691906117c3565b60405180910390f35b6102b960048036038101906102b491906112c3565b61089a565b005b6102c36109e9565b6040516102d09190611626565b60405180910390f35b6102f360048036038101906102ee91906112c3565b610a0d565b005b6102fd610b5c565b60405161030a9190611641565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561037b57600080fd5b505afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b391906111d2565b905090565b6103c0610313565b73ffffffffffffffffffffffffffffffffffffffff166103de610b95565b73ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906116c3565b60405180910390fd5b60008111610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90611703565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818114156104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590611663565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fa4d13447e0a7888b1316f15dd7e76bfe640e00a29607696ed1d452414b3d4b6f82846040516105469291906117de565b60405180910390a281600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b61271081565b600260005414156105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da90611763565b60405180910390fd5b60026000819055506105f784848484610b9d565b600160008190555050505050565b600061060f6106a4565b73ffffffffffffffffffffffffffffffffffffffff1663ce513b6f836040518263ffffffff1660e01b815260040161064791906115ab565b60206040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069791906112ec565b9050919050565b60025481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906111d2565b905090565b6000806107546106a4565b90508073ffffffffffffffffffffffffffffffffffffffff1663ab37f486856040518263ffffffff1660e01b815260040161078f91906115ab565b60206040518083038186803b1580156107a757600080fd5b505afa1580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df919061129a565b156108135760006107f08585610cff565b90506107fb85610605565b8111610807578061080a565b60005b92505050610819565b60009150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b6040518060400160405280600d81526020017f565553442d52656465656d65720000000000000000000000000000000000000081525081565b60036020528060005260406000206000915090505481565b6108a2610313565b73ffffffffffffffffffffffffffffffffffffffff166108c0610b95565b73ffffffffffffffffffffffffffffffffffffffff1614610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d906116c3565b60405180910390fd5b61271081111561095b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610952906116e3565b60405180910390fd5b60006002549050818114156109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611683565b60405180910390fd5b816002819055507f3cb23ae97dcd603618548f333b96dbb9e41059b6fd0eb7face59058c5ac3b11b81836040516109dd9291906117de565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a15610313565b73ffffffffffffffffffffffffffffffffffffffff16610a33610b95565b73ffffffffffffffffffffffffffffffffffffffff1614610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a80906116c3565b60405180910390fd5b612710811115610ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac590611783565b60405180910390fd5b6000600154905081811415610b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0f90611723565b60405180910390fd5b816001819055507f78f68725a1b1a56a998dd7a8d279eb9bfbd45bc0fcee78f408200737275873e58183604051610b509291906117de565b60405180910390a15050565b6040518060400160405280600581526020017f312e342e3200000000000000000000000000000000000000000000000000000081525081565b600033905090565b6000610ba98585610cff565b905082811015610bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be5906117a3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc6790610c32610b95565b866040518363ffffffff1660e01b8152600401610c509291906115c6565b600060405180830381600087803b158015610c6a57600080fd5b505af1158015610c7e573d6000803e3d6000fd5b50505050610c8a6106a4565b73ffffffffffffffffffffffffffffffffffffffff166369328dec8683856040518463ffffffff1660e01b8152600401610cc6939291906115ef565b600060405180830381600087803b158015610ce057600080fd5b505af1158015610cf4573d6000803e3d6000fd5b505050505050505050565b600080610d0a6106a4565b73ffffffffffffffffffffffffffffffffffffffff1663addd5099856040518263ffffffff1660e01b8152600401610d4291906115ab565b60206040518083038186803b158015610d5a57600080fd5b505afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9291906111d2565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190611315565b50935050925050600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548142610e689190611a90565b10610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f90611743565b60405180910390fd5b600082905060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ef557600080fd5b505afa158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d919061138c565b9050600081600a610f3e9190611918565b9050600061271060025483610f539190611a36565b610f5d9190611894565b905060008183610f6d919061183e565b905060008284610f7d9190611a90565b9050818611158015610f8f5750808610155b610fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc5906116a3565b60405180910390fd5b600084871115610ff45786858d610fe59190611a36565b610fef9190611894565b610ff6565b8b5b9050600060015490506000811461102e5761271081836110169190611a36565b6110209190611894565b8261102b9190611a90565b91505b8d73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107457600080fd5b505afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac919061138c565b7f00000000000000000000000000000000000000000000000000000000000000006110d79190611ac4565b600a6110e39190611918565b826110ee9190611894565b9b50505050505050505050505092915050565b60008135905061111081611e29565b92915050565b60008151905061112581611e29565b92915050565b60008151905061113a81611e40565b92915050565b60008151905061114f81611e57565b92915050565b60008135905061116481611e6e565b92915050565b60008151905061117981611e6e565b92915050565b60008151905061118e81611e9c565b92915050565b6000815190506111a381611e85565b92915050565b6000602082840312156111bb57600080fd5b60006111c984828501611101565b91505092915050565b6000602082840312156111e457600080fd5b60006111f284828501611116565b91505092915050565b6000806040838503121561120e57600080fd5b600061121c85828601611101565b925050602061122d85828601611155565b9150509250929050565b6000806000806080858703121561124d57600080fd5b600061125b87828801611101565b945050602061126c87828801611155565b935050604061127d87828801611155565b925050606061128e87828801611101565b91505092959194509250565b6000602082840312156112ac57600080fd5b60006112ba8482850161112b565b91505092915050565b6000602082840312156112d557600080fd5b60006112e384828501611155565b91505092915050565b6000602082840312156112fe57600080fd5b600061130c8482850161116a565b91505092915050565b600080600080600060a0868803121561132d57600080fd5b600061133b8882890161117f565b955050602061134c88828901611140565b945050604061135d8882890161116a565b935050606061136e8882890161116a565b925050608061137f8882890161117f565b9150509295509295909350565b60006020828403121561139e57600080fd5b60006113ac84828501611194565b91505092915050565b6113be81611af8565b82525050565b6113cd81611b6d565b82525050565b60006113de82611822565b6113e8818561182d565b93506113f8818560208601611b91565b61140181611c22565b840191505092915050565b600061141960118361182d565b915061142482611c40565b602082019050919050565b600061143c600e8361182d565b915061144782611c69565b602082019050919050565b600061145f60188361182d565b915061146a82611c92565b602082019050919050565b6000611482601a8361182d565b915061148d82611cbb565b602082019050919050565b60006114a5601a8361182d565b91506114b082611ce4565b602082019050919050565b60006114c860178361182d565b91506114d382611d0d565b602082019050919050565b60006114eb600f8361182d565b91506114f682611d36565b602082019050919050565b600061150e60158361182d565b915061151982611d5f565b602082019050919050565b6000611531601f8361182d565b915061153c82611d88565b602082019050919050565b600061155460188361182d565b915061155f82611db1565b602082019050919050565b600061157760268361182d565b915061158282611dda565b604082019050919050565b61159681611b40565b82525050565b6115a581611b4a565b82525050565b60006020820190506115c060008301846113b5565b92915050565b60006040820190506115db60008301856113b5565b6115e8602083018461158d565b9392505050565b600060608201905061160460008301866113b5565b611611602083018561158d565b61161e60408301846113b5565b949350505050565b600060208201905061163b60008301846113c4565b92915050565b6000602082019050818103600083015261165b81846113d3565b905092915050565b6000602082019050818103600083015261167c8161140c565b9050919050565b6000602082019050818103600083015261169c8161142f565b9050919050565b600060208201905081810360008301526116bc81611452565b9050919050565b600060208201905081810360008301526116dc81611475565b9050919050565b600060208201905081810360008301526116fc81611498565b9050919050565b6000602082019050818103600083015261171c816114bb565b9050919050565b6000602082019050818103600083015261173c816114de565b9050919050565b6000602082019050818103600083015261175c81611501565b9050919050565b6000602082019050818103600083015261177c81611524565b9050919050565b6000602082019050818103600083015261179c81611547565b9050919050565b600060208201905081810360008301526117bc8161156a565b9050919050565b60006020820190506117d8600083018461158d565b92915050565b60006040820190506117f3600083018561158d565b611800602083018461158d565b9392505050565b600060208201905061181c600083018461159c565b92915050565b600081519050919050565b600082825260208201905092915050565b600061184982611b40565b915061185483611b40565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561188957611888611bc4565b5b828201905092915050565b600061189f82611b40565b91506118aa83611b40565b9250826118ba576118b9611bf3565b5b828204905092915050565b6000808291508390505b600185111561190f578086048111156118eb576118ea611bc4565b5b60018516156118fa5780820291505b808102905061190885611c33565b94506118cf565b94509492505050565b600061192382611b40565b915061192e83611b4a565b925061195b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611963565b905092915050565b6000826119735760019050611a2f565b816119815760009050611a2f565b816001811461199757600281146119a1576119d0565b6001915050611a2f565b60ff8411156119b3576119b2611bc4565b5b8360020a9150848211156119ca576119c9611bc4565b5b50611a2f565b5060208310610133831016604e8410600b8410161715611a055782820a905083811115611a00576119ff611bc4565b5b611a2f565b611a1284848460016118c5565b92509050818404811115611a2957611a28611bc4565b5b81810290505b9392505050565b6000611a4182611b40565b9150611a4c83611b40565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a8557611a84611bc4565b5b828202905092915050565b6000611a9b82611b40565b9150611aa683611b40565b925082821015611ab957611ab8611bc4565b5b828203905092915050565b6000611acf82611b4a565b9150611ada83611b4a565b925082821015611aed57611aec611bc4565b5b828203905092915050565b6000611b0382611b20565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b6000611b7882611b7f565b9050919050565b6000611b8a82611b20565b9050919050565b60005b83811015611baf578082015181840152602081019050611b94565b83811115611bbe576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f73616d652d7374616c652d706572696f64000000000000000000000000000000600082015250565b7f73616d652d746f6c6572616e6365000000000000000000000000000000000000600082015250565b7f70726963652d746f6c6572616e63652d65786365656465640000000000000000600082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f70726963652d746f6c6572616e63652d69732d696e76616c6964000000000000600082015250565b7f7374616c652d706572696f642d69732d696e76616c6964000000000000000000600082015250565b7f73616d652d72656465656d2d6665650000000000000000000000000000000000600082015250565b7f6f7261636c652d70726963652d69732d7374616c650000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f72656465656d2d6665652d6c696d69742d726561636865640000000000000000600082015250565b7f72656465656d61626c652d616d6f756e742d69732d6c6573732d7468616e2d6d60008201527f696e696d756d0000000000000000000000000000000000000000000000000000602082015250565b611e3281611af8565b8114611e3d57600080fd5b50565b611e4981611b0a565b8114611e5457600080fd5b50565b611e6081611b16565b8114611e6b57600080fd5b50565b611e7781611b40565b8114611e8257600080fd5b50565b611e8e81611b4a565b8114611e9957600080fd5b50565b611ea581611b57565b8114611eb057600080fd5b5056fea264697066735822122007301dd11ed6dae068e14b90d6599b18c95673e3340ec05a5c98cc0d305f907d64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "redeem(address,uint256,uint256,address)": {
        "params": {
          "_token": "Token to redeem, it should be 1 of the supported tokens from treasury.",
          "_tokenReceiver": "Address of token receiver",
          "_vusdAmount": "VUSD amount to burn. VUSD will be burnt from caller"
        }
      },
      "redeemable(address)": {
        "details": "Current redeemable amount for given token"
      },
      "redeemable(address,uint256)": {
        "params": {
          "_token": "Token to redeem",
          "_vusdAmount": "VUSD amount to burn"
        }
      },
      "treasury()": {
        "details": "Treasury is defined in VUSD token contract only"
      }
    },
    "title": "VUSD Redeemer, User can redeem their VUSD with any supported tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redeem(address,uint256,uint256,address)": {
        "notice": "Redeem token and burn VUSD amount less redeem fee, if any."
      },
      "redeemable(address,uint256)": {
        "notice": "Current redeemable amount for given token and vusdAmount. If token is not supported by treasury it will return 0. If vusdAmount is higher than current total redeemable of token it will return 0."
      },
      "updatePriceTolerance(uint256)": {
        "notice": "Update price tolerance"
      },
      "updateRedeemFee(uint256)": {
        "notice": "Update redeem fee"
      },
      "updateStalePeriod(address,uint256)": {
        "notice": "Update stale period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Redeemer.sol:Redeemer",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4003,
        "contract": "contracts/Redeemer.sol:Redeemer",
        "label": "redeemFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4009,
        "contract": "contracts/Redeemer.sol:Redeemer",
        "label": "priceTolerance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4013,
        "contract": "contracts/Redeemer.sol:Redeemer",
        "label": "stalePeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}