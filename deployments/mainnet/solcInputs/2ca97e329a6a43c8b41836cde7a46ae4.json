{
  "language": "Solidity",
  "sources": {
    "contracts/VUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Governed.sol\";\n\n/// @title VUSD, A stablecoin pegged to the US Dollar, backed by interest-generating collateral.\ncontract VUSD is ERC20Permit, ERC20Burnable, Governed {\n    using SafeERC20 for IERC20;\n\n    address public minter;\n    address public treasury;\n\n    event UpdatedMinter(address indexed previousMinter, address indexed newMinter);\n    event UpdatedTreasury(address indexed previousTreasury, address indexed newTreasury);\n\n    constructor(address _treasury) ERC20Permit(\"VUSD\") ERC20(\"VUSD\", \"VUSD\") {\n        require(_treasury != address(0), \"treasury-address-is-zero\");\n        treasury = _treasury;\n        emit UpdatedTreasury(address(0), _treasury);\n    }\n\n    modifier onlyMinter() {\n        require(_msgSender() == minter, \"caller-is-not-minter\");\n        _;\n    }\n\n    /**\n     * @notice Mint VUSD, only minter can call this.\n     * @param _to Address where VUSD will be minted\n     * @param _amount VUSD amount to mint\n     */\n    function mint(address _to, uint256 _amount) external onlyMinter {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @notice Transfer tokens to multiple recipient\n     * @dev Address array and amount array are 1:1 and are in order.\n     * @param _recipients array of recipient addresses\n     * @param _amounts array of token amounts\n     * @return true/false\n     */\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool) {\n        require(_recipients.length == _amounts.length, \"input-length-mismatch\");\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(transfer(_recipients[i], _amounts[i]), \"multi-transfer-failed\");\n        }\n        return true;\n    }\n\n    /**\n     * @notice Update VUSD minter address\n     * @param _newMinter new minter address\n     */\n    function updateMinter(address _newMinter) external onlyGovernor {\n        require(_newMinter != address(0), \"minter-address-is-zero\");\n        require(minter != _newMinter, \"same-minter\");\n        emit UpdatedMinter(minter, _newMinter);\n        minter = _newMinter;\n    }\n\n    /**\n     * @notice Update VUSD treasury address\n     * @param _newTreasury new treasury address\n     */\n    function updateTreasury(address _newTreasury) external onlyGovernor {\n        require(_newTreasury != address(0), \"treasury-address-is-zero\");\n        require(treasury != _newTreasury, \"same-treasury\");\n        emit UpdatedTreasury(treasury, _newTreasury);\n        treasury = _newTreasury;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping (address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                _useNonce(owner),\n                deadline\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/Governed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\ncontract Governed is Context {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor {\n        require(governor == _msgSender(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        //solhint-disable-next-line reason-string\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero-address\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        //solhint-disable-next-line reason-string\n        require(proposedGovernor == _msgSender(), \"caller-is-not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                typeHash,\n                name,\n                version,\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/bloq/IAddressList.sol\";\nimport \"./interfaces/bloq/IAddressListFactory.sol\";\nimport \"./interfaces/compound/ICompound.sol\";\nimport \"./interfaces/IVUSD.sol\";\n\n/// @title VUSD Treasury, It stores cTokens and redeem those from Compound as needed.\ncontract Treasury is Context, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    string public constant NAME = \"VUSD-Treasury\";\n    string public constant VERSION = \"1.1.0\";\n\n    IAddressList public immutable whitelistedTokens;\n    IVUSD public immutable vusd;\n    address public redeemer;\n\n    mapping(address => address) public cTokens;\n\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    event UpdatedRedeemer(address indexed previousRedeemer, address indexed newRedeemer);\n\n    constructor(address _vusd) {\n        require(_vusd != address(0), \"vusd-address-is-zero\");\n        vusd = IVUSD(_vusd);\n\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\n        // Add token into the list, add cToken into the mapping\n        _addToken(_whitelistedTokens, DAI, address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\n        _addToken(_whitelistedTokens, USDC, address(0x39AA39c021dfbaE8faC545936693aC917d5E7563));\n        _addToken(_whitelistedTokens, USDT, address(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9));\n\n        whitelistedTokens = _whitelistedTokens;\n    }\n\n    modifier onlyGovernor() {\n        require(_msgSender() == governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        require(_msgSender() == governor() || _msgSender() == redeemer, \"caller-is-not-authorized\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n    /**\n     * @notice Add token into treasury management system\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\n     * @param _token address which we want to add in token list.\n     * @param _cToken CToken address correspond to _token\n     */\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\n        require(_token != address(0), \"token-address-is-zero\");\n        require(_cToken != address(0), \"cToken-address-is-zero\");\n        _addToken(whitelistedTokens, _token, _cToken);\n    }\n\n    /**\n     * @notice Remove token from treasury management system\n     * @dev Removing token even if treasury has some balance of that token is intended behavior.\n     * @param _token address which we want to remove from token list.\n     */\n    function removeWhitelistedToken(address _token) external onlyGovernor {\n        require(whitelistedTokens.remove(_token), \"remove-from-list-failed\");\n        delete cTokens[_token];\n    }\n\n    /**\n     * @notice Update redeemer address\n     * @param _newRedeemer new redeemer address\n     */\n    function updateRedeemer(address _newRedeemer) external onlyGovernor {\n        require(_newRedeemer != address(0), \"redeemer-address-is-zero\");\n        require(redeemer != _newRedeemer, \"same-redeemer\");\n        emit UpdatedRedeemer(redeemer, _newRedeemer);\n        redeemer = _newRedeemer;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Withdraw given amount of token.\n     * @dev Only Redeemer and Governor are allowed to call\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\n     * @param _amount token amount to withdraw\n     */\n    function withdraw(address _token, uint256 _amount) external nonReentrant onlyAuthorized {\n        _withdraw(_token, _amount, _msgSender());\n    }\n\n    /**\n     * @notice Withdraw given amount of token.\n     * @dev Only Redeemer and Governor are allowed to call\n     * @param _token Token to withdraw, it should be 1 of the supported tokens.\n     * @param _amount token amount to withdraw\n     * @param _tokenReceiver Address of token receiver\n     */\n    function withdraw(\n        address _token,\n        uint256 _amount,\n        address _tokenReceiver\n    ) external nonReentrant onlyAuthorized {\n        _withdraw(_token, _amount, _tokenReceiver);\n    }\n\n    /**\n     * @notice Withdraw multiple tokens.\n     * @dev Only Governor is allowed to call.\n     * @dev _tokens and _amounts array are 1:1 and should have same length\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\n     * @param _amounts Array of token amount to withdraw\n     */\n    function withdrawMulti(address[] memory _tokens, uint256[] memory _amounts) external nonReentrant onlyGovernor {\n        require(_tokens.length == _amounts.length, \"input-length-mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            _withdraw(_tokens[i], _amounts[i], _msgSender());\n        }\n    }\n\n    /**\n     * @notice Withdraw all of multiple tokens.\n     * @dev Only Governor is allowed to call.\n     * @param _tokens Array of token addresses, tokens should be supported tokens.\n     */\n    function withdrawAll(address[] memory _tokens) external nonReentrant onlyGovernor {\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            require(whitelistedTokens.contains(_tokens[i]), \"token-is-not-supported\");\n            CToken _cToken = CToken(cTokens[_tokens[i]]);\n            require(_cToken.redeem(_cToken.balanceOf(address(this))) == 0, \"redeem-failed\");\n            IERC20(_tokens[i]).safeTransfer(_msgSender(), IERC20(_tokens[i]).balanceOf(address(this)));\n        }\n    }\n\n    /**\n     * @notice Current withdrawable amount for given token.\n     * If token is not supported by treasury, no cTokens in mapping, it will return 0.\n     * @param _token Token to withdraw\n     */\n    function withdrawable(address _token) external view returns (uint256) {\n        if (cTokens[_token] != address(0)) {\n            CToken _cToken = CToken(cTokens[_token]);\n            return (_cToken.balanceOf(address(this)) * _cToken.exchangeRateStored()) / 1e18;\n        }\n        return 0;\n    }\n\n    /// @dev Governor is defined in VUSD token contract only\n    function governor() public view returns (address) {\n        return vusd.governor();\n    }\n\n    /// @dev Add _token into the list, add _cToken in mapping\n    function _addToken(\n        IAddressList _list,\n        address _token,\n        address _cToken\n    ) internal {\n        require(_list.add(_token), \"add-in-list-failed\");\n        cTokens[_token] = _cToken;\n    }\n\n    function _withdraw(\n        address _token,\n        uint256 _amount,\n        address _tokenReceiver\n    ) internal {\n        require(whitelistedTokens.contains(_token), \"token-is-not-supported\");\n        require(CToken(cTokens[_token]).redeemUnderlying(_amount) == 0, \"redeem-underlying-failed\");\n        IERC20(_token).safeTransfer(_tokenReceiver, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/bloq/IAddressList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IAddressList {\n    function add(address a) external returns (bool);\n\n    function remove(address a) external returns (bool);\n\n    function get(address a) external view returns (uint256);\n\n    function contains(address a) external view returns (bool);\n\n    function length() external view returns (uint256);\n\n    function grantRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/interfaces/bloq/IAddressListFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IAddressListFactory {\n    function ours(address a) external view returns (bool);\n\n    function listCount() external view returns (uint256);\n\n    function listAt(uint256 idx) external view returns (address);\n\n    function createList() external returns (address listaddr);\n}\n"
    },
    "contracts/interfaces/compound/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface CToken is IERC20 {\n    function accrueInterest() external returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function mint() external payable; // For ETH\n\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n}\n\ninterface Comptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function compAccrued(address holder) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IVUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVUSD is IERC20, IERC20Permit {\n    function burnFrom(address _user, uint256 _amount) external;\n\n    function mint(address _to, uint256 _amount) external;\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\n\n    function updateMinter(address _newMinter) external;\n\n    function updateTreasury(address _newTreasury) external;\n\n    function governor() external view returns (address _governor);\n\n    function minter() external view returns (address _minter);\n\n    function treasury() external view returns (address _treasury);\n}\n"
    },
    "contracts/Redeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/IVUSD.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\n/// @title VUSD Redeemer, User can redeem their VUSD with any supported tokens\ncontract Redeemer is Context, ReentrancyGuard {\n    string public constant NAME = \"VUSD-Redeemer\";\n    string public constant VERSION = \"1.1.0\";\n\n    IVUSD public immutable vusd;\n\n    uint256 public redeemFee; // Default no fee\n    uint256 public constant MAX_REDEEM_FEE = 10_000; // 10_000 = 100%\n\n    event UpdatedRedeemFee(uint256 previousRedeemFee, uint256 newRedeemFee);\n\n    constructor(address _vusd) {\n        require(_vusd != address(0), \"vusd-address-is-zero\");\n        vusd = IVUSD(_vusd);\n    }\n\n    modifier onlyGovernor() {\n        require(_msgSender() == governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /// @notice Update redeem fee\n    function updateRedeemFee(uint256 _newRedeemFee) external onlyGovernor {\n        require(_newRedeemFee <= MAX_REDEEM_FEE, \"redeem-fee-limit-reached\");\n        require(redeemFee != _newRedeemFee, \"same-redeem-fee\");\n        emit UpdatedRedeemFee(redeemFee, _newRedeemFee);\n        redeemFee = _newRedeemFee;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Redeem token and burn VUSD amount less redeem fee, if any.\n     * @param _token Token to redeem, it should be 1 of the supported tokens from treasury.\n     * @param _vusdAmount VUSD amount to burn\n     */\n    function redeem(address _token, uint256 _vusdAmount) external nonReentrant {\n        _redeem(_token, _vusdAmount, _msgSender());\n    }\n\n    /**\n     * @notice Redeem token and burn VUSD amount less redeem fee, if any.\n     * @param _token Token to redeem, it should be 1 of the supported tokens from treasury.\n     * @param _vusdAmount VUSD amount to burn. VUSD will be burnt from caller\n     * @param _tokenReceiver Address of token receiver\n     */\n    function redeem(\n        address _token,\n        uint256 _vusdAmount,\n        address _tokenReceiver\n    ) external nonReentrant {\n        _redeem(_token, _vusdAmount, _tokenReceiver);\n    }\n\n    /**\n     * @notice Current redeemable amount for given token and vusdAmount.\n     * If token is not supported by treasury it will return 0.\n     * If vusdAmount is higher than current total redeemable of token it will return 0.\n     * @param _token Token to redeem\n     * @param _vusdAmount VUSD amount to burn\n     */\n    function redeemable(address _token, uint256 _vusdAmount) external view returns (uint256) {\n        ITreasury _treasury = ITreasury(treasury());\n        if (_treasury.whitelistedTokens().contains(_token)) {\n            uint256 _redeemable = _calculateRedeemable(_token, _vusdAmount);\n            return _redeemable > redeemable(_token) ? 0 : _redeemable;\n        }\n        return 0;\n    }\n\n    /// @dev Current redeemable amount for given token\n    function redeemable(address _token) public view returns (uint256) {\n        return ITreasury(treasury()).withdrawable(_token);\n    }\n\n    /// @dev Governor is defined in VUSD token contract only\n    function governor() public view returns (address) {\n        return vusd.governor();\n    }\n\n    /// @dev Treasury is defined in VUSD token contract only\n    function treasury() public view returns (address) {\n        return vusd.treasury();\n    }\n\n    function _redeem(\n        address _token,\n        uint256 _vusdAmount,\n        address _tokenReceiver\n    ) internal {\n        // In case of redeemFee, We will burn vusdAmount from user and withdraw (vusdAmount - fee) from treasury.\n        uint256 _redeemable = _calculateRedeemable(_token, _vusdAmount);\n        // Burn vusdAmount\n        vusd.burnFrom(_msgSender(), _vusdAmount);\n        // Withdraw _redeemable\n        ITreasury(treasury()).withdraw(_token, _redeemable, _tokenReceiver);\n    }\n\n    /**\n     * @notice Calculate redeemable amount based on redeemFee, if any.\n     * Also covert 18 decimal VUSD amount to _token defined decimal amount.\n     * @return Token amount that user will get after burning vusdAmount\n     */\n    function _calculateRedeemable(address _token, uint256 _vusdAmount) internal view returns (uint256) {\n        uint256 _decimals = IERC20Metadata(_token).decimals();\n        uint256 _redeemable = redeemFee != 0 ? _vusdAmount - ((_vusdAmount * redeemFee) / MAX_REDEEM_FEE) : _vusdAmount;\n        return _redeemable / 10**(18 - _decimals);\n    }\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./bloq/IAddressList.sol\";\n\ninterface ITreasury {\n    function withdraw(address _token, uint256 _amount) external;\n\n    function withdraw(\n        address _token,\n        uint256 _amount,\n        address _tokenReceiver\n    ) external;\n\n    function withdrawable(address _token) external view returns (uint256);\n\n    function whitelistedTokens() external view returns (IAddressList);\n}\n"
    },
    "contracts/Minter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/bloq/IAddressList.sol\";\nimport \"./interfaces/bloq/IAddressListFactory.sol\";\nimport \"./interfaces/compound/ICompound.sol\";\nimport \"./interfaces/IVUSD.sol\";\n\n/// @title Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\ncontract Minter is Context, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    string public constant NAME = \"VUSD-Minter\";\n    string public constant VERSION = \"1.1.0\";\n\n    IAddressList public immutable whitelistedTokens;\n    IVUSD public immutable vusd;\n\n    uint256 public mintingFee; // Default no fee\n    uint256 public constant MAX_MINTING_FEE = 10_000; // 10_000 = 100%\n    uint256 public constant MINT_LIMIT = 50_000_000 * 10**18; // 50M VUSD\n\n    mapping(address => address) public cTokens;\n\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    event UpdatedMintingFee(uint256 previousMintingFee, uint256 newMintingFee);\n\n    constructor(address _vusd) {\n        require(_vusd != address(0), \"vusd-address-is-zero\");\n        vusd = IVUSD(_vusd);\n\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\n        // Add token into the list, add cToken into the mapping and approve cToken to spend token\n        _addToken(_whitelistedTokens, DAI, address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\n        _addToken(_whitelistedTokens, USDC, address(0x39AA39c021dfbaE8faC545936693aC917d5E7563));\n        _addToken(_whitelistedTokens, USDT, address(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9));\n\n        whitelistedTokens = _whitelistedTokens;\n    }\n\n    modifier onlyGovernor() {\n        require(_msgSender() == governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n    /**\n     * @notice Add token as whitelisted token for VUSD system\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\n     * @param _token address which we want to add in token list.\n     * @param _cToken CToken address correspond to _token\n     */\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\n        _addToken(whitelistedTokens, _token, _cToken);\n    }\n\n    /**\n     * @notice Remove token from whitelisted tokens\n     * @param _token address which we want to remove from token list.\n     */\n    function removeWhitelistedToken(address _token) external onlyGovernor {\n        require(whitelistedTokens.remove(_token), \"remove-from-list-failed\");\n        IERC20(_token).approve(cTokens[_token], 0);\n        delete cTokens[_token];\n    }\n\n    /// @notice Update minting fee\n    function updateMintingFee(uint256 _newMintingFee) external onlyGovernor {\n        require(_newMintingFee <= MAX_MINTING_FEE, \"minting-fee-limit-reached\");\n        require(mintingFee != _newMintingFee, \"same-minting-fee\");\n        emit UpdatedMintingFee(mintingFee, _newMintingFee);\n        mintingFee = _newMintingFee;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Mint VUSD\n     * @param _token Address of token being deposited\n     * @param _amount Amount of _token\n     */\n    function mint(address _token, uint256 _amount) external nonReentrant {\n        require(whitelistedTokens.contains(_token), \"token-is-not-supported\");\n        uint256 _mintage = _calculateMintage(_token, _amount);\n        require(availableMintage() >= _mintage, \"mint-limit-reached\");\n        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amount);\n        address _cToken = cTokens[_token];\n        require(CToken(_cToken).mint(_amount) == 0, \"cToken-mint-failed\");\n        IERC20(_cToken).safeTransfer(treasury(), IERC20(_cToken).balanceOf(address(this)));\n        vusd.mint(_msgSender(), _mintage);\n    }\n\n    /**\n     * @notice Calculate mintage for supported tokens.\n     * @param _token Address of token which will be deposited for this mintage\n     * @param _amount Amount of _token\n     */\n    function calculateMintage(address _token, uint256 _amount) external view returns (uint256 _mintReturn) {\n        if (whitelistedTokens.contains(_token)) {\n            uint256 _mintage = _calculateMintage(_token, _amount);\n            return _mintage > availableMintage() ? 0 : _mintage;\n        }\n        // Return 0 for unsupported tokens.\n        return 0;\n    }\n\n    /// @notice Check available mintage based on mint limit\n    function availableMintage() public view returns (uint256 _mintage) {\n        return MINT_LIMIT - vusd.totalSupply();\n    }\n\n    /// @dev Treasury is defined in VUSD token contract only\n    function treasury() public view returns (address) {\n        return vusd.treasury();\n    }\n\n    /// @dev Governor is defined in VUSD token contract only\n    function governor() public view returns (address) {\n        return vusd.governor();\n    }\n\n    /**\n     * @dev Add _token into the list, add _cToken in mapping and\n     * approve cToken to spend token\n     */\n    function _addToken(\n        IAddressList _list,\n        address _token,\n        address _cToken\n    ) internal {\n        require(_list.add(_token), \"add-in-list-failed\");\n        cTokens[_token] = _cToken;\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\n    }\n\n    /**\n     * @notice Calculate mintage based on mintingFee, if any.\n     * Also covert _token defined decimal amount to 18 decimal amount\n     * @return VUSD mintage based on given input\n     */\n    function _calculateMintage(address _token, uint256 _amount) internal view returns (uint256) {\n        uint256 _decimals = IERC20Metadata(_token).decimals();\n        uint256 _mintage = mintingFee != 0 ? _amount - ((_amount * mintingFee) / MAX_MINTING_FEE) : _amount;\n        // Convert final amount to 18 decimals\n        return _mintage * 10**(18 - _decimals);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}