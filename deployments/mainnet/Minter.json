{
  "address": "0xb652Fc42E12828F3F1b3e96283b199E62EC570Db",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMintingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintingFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMintingFee",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MINTING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mintage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mintReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintingFee",
          "type": "uint256"
        }
      ],
      "name": "updateMintingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
  "receipt": {
    "to": null,
    "from": "0xcc4ba6Ef2aC12FA5932ef584ebc4a762FE970919",
    "contractAddress": "0xb652Fc42E12828F3F1b3e96283b199E62EC570Db",
    "transactionIndex": 58,
    "gasUsed": "4397275",
    "logsBloom": "0x000000040000000000000000000000000000000000084000000000000002000000001000001009000000030400000100000000000000002000000000202000000000000000000001080000084000000000000000000000000000400000000000100000000200000000000000000008000000002000000000000000000000002000000000000002000000000000010002000404000100000000002044021000000a0000000000200000000080000000000000000000000000001000000800004000000000000000000000000c20000000000002020000000108020000000020000010000000000000000100000000400004c00000000000110000000000000000",
    "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d",
    "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0x9E1c09748b1AB36fA92B6374b3E0Fa2be34e43ae",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0x9E1c09748b1AB36fA92B6374b3E0Fa2be34e43ae",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "data": "0x",
        "logIndex": 93,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db",
          "0x0000000000000000000000009e1c09748b1ab36fa92b6374b3e0fa2be34e43ae"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0x9E1c09748b1AB36fA92B6374b3E0Fa2be34e43ae",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 96,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0x9E1c09748b1AB36fA92B6374b3E0Fa2be34e43ae",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 98,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0x9E1c09748b1AB36fA92B6374b3E0Fa2be34e43ae",
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 13377980,
        "transactionHash": "0x99bbba82b467153e970dd5dd164569834fdc505430753958fd1ec0c84177963b",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b652fc42e12828f3f1b3e96283b199e62ec570db",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 100,
        "blockHash": "0x4816775c8ce352c905a39311c1311dbb3ef87ba8d4e1ba01b429fa3d0595701d"
      }
    ],
    "blockNumber": 13377980,
    "cumulativeGasUsed": "9386425",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619"
  ],
  "solcInputHash": "39c191a09ff8c148e0d92695bc150374",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintingFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintingFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINTING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintingFee\",\"type\":\"uint256\"}],\"name\":\"updateMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelistedToken(address,address)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_token\":\"address which we want to add in token list.\"}},\"calculateMintage(address,uint256)\":{\"params\":{\"_amount\":\"Amount of _token\",\"_token\":\"Address of token which will be deposited for this mintage\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"Amount of _token\",\"_token\":\"Address of token being deposited\"}},\"mint(address,uint256,address)\":{\"params\":{\"_amount\":\"Amount of _token\",\"_receiver\":\"Address of VUSD receiver\",\"_token\":\"Address of token being deposited\"}},\"removeWhitelistedToken(address)\":{\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"treasury()\":{\"details\":\"Treasury is defined in VUSD token contract only\"}},\"title\":\"Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedToken(address,address)\":{\"notice\":\"Add token as whitelisted token for VUSD system\"},\"availableMintage()\":{\"notice\":\"Check available mintage based on mint limit\"},\"calculateMintage(address,uint256)\":{\"notice\":\"Calculate mintage for supported tokens.\"},\"mint(address,uint256)\":{\"notice\":\"Mint VUSD\"},\"mint(address,uint256,address)\":{\"notice\":\"Mint VUSD\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from whitelisted tokens\"},\"updateMintingFee(uint256)\":{\"notice\":\"Update minting fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"./interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\n\\n/// @title Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\\ncontract Minter is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"VUSD-Minter\\\";\\n    string public constant VERSION = \\\"1.2.1\\\";\\n\\n    IAddressList public immutable whitelistedTokens;\\n    IVUSD public immutable vusd;\\n\\n    uint256 public mintingFee; // Default no fee\\n    uint256 public constant MAX_MINTING_FEE = 10_000; // 10_000 = 100%\\n    uint256 public constant MINT_LIMIT = 50_000_000 * 10**18; // 50M VUSD\\n\\n    mapping(address => address) public cTokens;\\n\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    event UpdatedMintingFee(uint256 previousMintingFee, uint256 newMintingFee);\\n\\n    constructor(address _vusd) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n\\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\\n        IAddressList _whitelistedTokens = IAddressList(_factory.createList());\\n        // Add token into the list, add cToken into the mapping and approve cToken to spend token\\n        _addToken(_whitelistedTokens, DAI, address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\\n        _addToken(_whitelistedTokens, USDC, address(0x39AA39c021dfbaE8faC545936693aC917d5E7563));\\n        _addToken(_whitelistedTokens, USDT, address(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9));\\n\\n        whitelistedTokens = _whitelistedTokens;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token as whitelisted token for VUSD system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     */\\n    function addWhitelistedToken(address _token, address _cToken) external onlyGovernor {\\n        _addToken(whitelistedTokens, _token, _cToken);\\n    }\\n\\n    /**\\n     * @notice Remove token from whitelisted tokens\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        IERC20(_token).safeApprove(cTokens[_token], 0);\\n        delete cTokens[_token];\\n    }\\n\\n    /// @notice Update minting fee\\n    function updateMintingFee(uint256 _newMintingFee) external onlyGovernor {\\n        require(_newMintingFee <= MAX_MINTING_FEE, \\\"minting-fee-limit-reached\\\");\\n        require(mintingFee != _newMintingFee, \\\"same-minting-fee\\\");\\n        emit UpdatedMintingFee(mintingFee, _newMintingFee);\\n        mintingFee = _newMintingFee;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amount Amount of _token\\n     */\\n    function mint(address _token, uint256 _amount) external nonReentrant {\\n        _mint(_token, _amount, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amount Amount of _token\\n     * @param _receiver Address of VUSD receiver\\n     */\\n    function mint(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) external nonReentrant {\\n        _mint(_token, _amount, _receiver);\\n    }\\n\\n    /**\\n     * @notice Calculate mintage for supported tokens.\\n     * @param _token Address of token which will be deposited for this mintage\\n     * @param _amount Amount of _token\\n     */\\n    function calculateMintage(address _token, uint256 _amount) external view returns (uint256 _mintReturn) {\\n        if (whitelistedTokens.contains(_token)) {\\n            (uint256 _mintage, ) = _calculateMintage(_token, _amount);\\n            return _mintage;\\n        }\\n        // Return 0 for unsupported tokens.\\n        return 0;\\n    }\\n\\n    /// @notice Check available mintage based on mint limit\\n    function availableMintage() public view returns (uint256 _mintage) {\\n        return MINT_LIMIT - vusd.totalSupply();\\n    }\\n\\n    /// @dev Treasury is defined in VUSD token contract only\\n    function treasury() public view returns (address) {\\n        return vusd.treasury();\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /**\\n     * @dev Add _token into the list, add _cToken in mapping and\\n     * approve cToken to spend token\\n     */\\n    function _addToken(\\n        IAddressList _list,\\n        address _token,\\n        address _cToken\\n    ) internal {\\n        require(_list.add(_token), \\\"add-in-list-failed\\\");\\n        cTokens[_token] = _cToken;\\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amount Amount of _token\\n     * @param _receiver Address of VUSD receiver\\n     */\\n    function _mint(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal {\\n        require(whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        (uint256 _mintage, uint256 _actualAmount) = _calculateMintage(_token, _amount);\\n        require(_mintage != 0, \\\"mint-limit-reached\\\");\\n        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _actualAmount);\\n        address _cToken = cTokens[_token];\\n        require(CToken(_cToken).mint(_actualAmount) == 0, \\\"cToken-mint-failed\\\");\\n        IERC20(_cToken).safeTransfer(treasury(), IERC20(_cToken).balanceOf(address(this)));\\n        vusd.mint(_receiver, _mintage);\\n    }\\n\\n    /**\\n     * @notice Calculate mintage based on mintingFee, if any.\\n     * Also covert _token defined decimal amount to 18 decimal amount\\n     * @return _mintage VUSD mintage based on given input\\n     * @return _actualAmount Actual token amount used for _mintage\\n     */\\n    function _calculateMintage(address _token, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256 _mintage, uint256 _actualAmount)\\n    {\\n        uint256 _decimals = IERC20Metadata(_token).decimals();\\n        uint256 _availableAmount = availableMintage() / 10**(18 - _decimals);\\n        _actualAmount = (_amount > _availableAmount) ? _availableAmount : _amount;\\n        _mintage = (mintingFee != 0) ? _actualAmount - ((_actualAmount * mintingFee) / MAX_MINTING_FEE) : _actualAmount;\\n        // Convert final amount to 18 decimals\\n        _mintage = _mintage * 10**(18 - _decimals);\\n    }\\n}\\n\",\"keccak256\":\"0x7e8fabb1e3ee896ddba34a71e97b420d962770c2ccb9c9f8bc155aa569839dc0\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x1c7aaf3402f7e1eb42959586b9a8bd51e03a6375d775deea1e0d353ba2328691\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620035083803806200350883398181016040528101906200003791906200087b565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a99062000b37565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050600073ded8217de022706a191ee7ee0dc9df1185fb5da3905060008173ffffffffffffffffffffffffffffffffffffffff16630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200014d57600080fd5b505af115801562000162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018891906200087b565b9050620001c581736b175474e89094c44da98b954eedeac495271d0f735d3a536e4d6dbd6114cc1ead35777bab948e36436200027b60201b60201c565b620002008173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb487339aa39c021dfbae8fac545936693ac917d5e75636200027b60201b60201c565b6200023b8173dac17f958d2ee523a2206206994597c13d831ec773f650c3d88d12db855b8bf7d11be6c55a4e07dcc96200027b60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000e7c565b8273ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f836040518263ffffffff1660e01b8152600401620002b6919062000a9c565b602060405180830381600087803b158015620002d157600080fd5b505af1158015620002e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030c9190620008a7565b6200034e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003459062000b7b565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200041e817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8473ffffffffffffffffffffffffffffffffffffffff166200042360201b62000c26179092919060201c565b505050565b6000811480620004c3575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016200046d92919062000ab9565b60206040518083038186803b1580156200048657600080fd5b505afa1580156200049b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c19190620008d3565b145b62000505576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004fc9062000be1565b60405180910390fd5b620005908363095ea7b360e01b84846040516024016200052792919062000ae6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200059560201b60201c565b505050565b6000620005fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200066960201b62000d84179092919060201c565b9050600081511115620006645780806020019051810190620006219190620008a7565b62000663576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065a9062000bbf565b60405180910390fd5b5b505050565b60606200068084846000856200068960201b60201c565b90509392505050565b606082471015620006d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006c89062000b59565b60405180910390fd5b620006e285620007b760201b60201c565b62000724576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200071b9062000b9d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516200074f919062000a83565b60006040518083038185875af1925050503d80600081146200078e576040519150601f19603f3d011682016040523d82523d6000602084013e62000793565b606091505b5091509150620007ab828286620007ca60201b60201c565b92505050949350505050565b600080823b905060008111915050919050565b60608315620007dc578290506200082f565b600083511115620007f05782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000826919062000b13565b60405180910390fd5b9392505050565b600081519050620008478162000e2e565b92915050565b6000815190506200085e8162000e48565b92915050565b600081519050620008758162000e62565b92915050565b6000602082840312156200088e57600080fd5b60006200089e8482850162000836565b91505092915050565b600060208284031215620008ba57600080fd5b6000620008ca848285016200084d565b91505092915050565b600060208284031215620008e657600080fd5b6000620008f68482850162000864565b91505092915050565b6200090a8162000c35565b82525050565b60006200091d8262000c03565b62000929818562000c19565b93506200093b81856020860162000c7f565b80840191505092915050565b6000620009548262000c0e565b62000960818562000c24565b93506200097281856020860162000c7f565b6200097d8162000cb5565b840191505092915050565b60006200099760148362000c24565b9150620009a48262000cc6565b602082019050919050565b6000620009be60268362000c24565b9150620009cb8262000cef565b604082019050919050565b6000620009e560128362000c24565b9150620009f28262000d3e565b602082019050919050565b600062000a0c601d8362000c24565b915062000a198262000d67565b602082019050919050565b600062000a33602a8362000c24565b915062000a408262000d90565b604082019050919050565b600062000a5a60368362000c24565b915062000a678262000ddf565b604082019050919050565b62000a7d8162000c75565b82525050565b600062000a91828462000910565b915081905092915050565b600060208201905062000ab36000830184620008ff565b92915050565b600060408201905062000ad06000830185620008ff565b62000adf6020830184620008ff565b9392505050565b600060408201905062000afd6000830185620008ff565b62000b0c602083018462000a72565b9392505050565b6000602082019050818103600083015262000b2f818462000947565b905092915050565b6000602082019050818103600083015262000b528162000988565b9050919050565b6000602082019050818103600083015262000b7481620009af565b9050919050565b6000602082019050818103600083015262000b9681620009d6565b9050919050565b6000602082019050818103600083015262000bb881620009fd565b9050919050565b6000602082019050818103600083015262000bda8162000a24565b9050919050565b6000602082019050818103600083015262000bfc8162000a4b565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600062000c428262000c55565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562000c9f57808201518184015260208101905062000c82565b8381111562000caf576000848401525b50505050565b6000601f19601f8301169050919050565b7f767573642d616464726573732d69732d7a65726f000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b62000e398162000c35565b811462000e4557600080fd5b50565b62000e538162000c49565b811462000e5f57600080fd5b50565b62000e6d8162000c75565b811462000e7957600080fd5b50565b60805160601c60a05160601c61262862000ee0600039600081816103e6015281816108860152818161096b01528181610bcb015261129a0152600081816103a90152818161056b015281816107b3015281816109450152610f3e01526126286000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635a64ad95116100a25780638c0b09d0116100715780638c0b09d014610282578063a3f4df7e146102b2578063c0275a25146102d0578063edac5203146102ec578063ffa1ad741461030a5761010b565b80635a64ad951461020a5780635e1762a01461022857806361d027b31461024657806388b78aaa146102645761010b565b80631c88705d116100de5780631c88705d1461018457806340c10f19146101a0578063482b6014146101bc5780635166c96a146101ec5761010b565b806301ac855914610110578063027752401461012c5780630c340a241461014a5780630d4d151314610168575b600080fd5b61012a60048036038101906101259190611892565b610328565b005b6101346103d3565b6040516101419190611f1d565b60405180910390f35b6101526103e2565b60405161015f9190611c81565b60405180910390f35b610182600480360381019061017d919061190a565b610487565b005b61019e60048036038101906101999190611840565b6104ed565b005b6101ba60048036038101906101b591906118ce565b610743565b005b6101d660048036038101906101d191906118ce565b6107af565b6040516101e39190611f1d565b60405180910390f35b6101f4610882565b6040516102019190611f1d565b60405180910390f35b61021261093d565b60405161021f9190611f1d565b60405180910390f35b610230610943565b60405161023d9190611d25565b60405180910390f35b61024e610967565b60405161025b9190611c81565b60405180910390f35b61026c610a0c565b6040516102799190611f1d565b60405180910390f35b61029c60048036038101906102979190611840565b610a12565b6040516102a99190611c81565b60405180910390f35b6102ba610a45565b6040516102c79190611d5b565b60405180910390f35b6102ea60048036038101906102e59190611982565b610a7e565b005b6102f4610bc9565b6040516103019190611d40565b60405180910390f35b610312610bed565b60405161031f9190611d5b565b60405180910390f35b6103306103e2565b73ffffffffffffffffffffffffffffffffffffffff1661034e610d9c565b73ffffffffffffffffffffffffffffffffffffffff16146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90611d9d565b60405180910390fd5b6103cf7f00000000000000000000000000000000000000000000000000000000000000008383610da4565b5050565b6a295be96e6406697200000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561044a57600080fd5b505afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190611869565b905090565b600260005414156104cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c490611edd565b60405180910390fd5b60026000819055506104e0838383610f3c565b6001600081905550505050565b6104f56103e2565b73ffffffffffffffffffffffffffffffffffffffff16610513610d9c565b73ffffffffffffffffffffffffffffffffffffffff1614610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090611d9d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329092d0e826040518263ffffffff1660e01b81526004016105c29190611c81565b602060405180830381600087803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106149190611959565b610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90611dfd565b60405180910390fd5b6106de600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff16610c269092919063ffffffff16565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60026000541415610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078090611edd565b60405180910390fd5b60026000819055506107a3828261079e610d9c565b610f3c565b60016000819055505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b815260040161080a9190611c81565b60206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611959565b1561087757600061086b848461132d565b5090508091505061087c565b600090505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092291906119ab565b6a295be96e64066972000000610938919061218f565b905090565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190611869565b905090565b61271081565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600b81526020017f565553442d4d696e74657200000000000000000000000000000000000000000081525081565b610a866103e2565b73ffffffffffffffffffffffffffffffffffffffff16610aa4610d9c565b73ffffffffffffffffffffffffffffffffffffffff1614610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611d9d565b60405180910390fd5b612710811115610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690611e3d565b60405180910390fd5b806001541415610b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7b90611ebd565b60405180910390fd5b7f85735a3ef929fdaaf946ddf4b97deec396e7347cbb47fea3d6a8f3934e1b02e360015482604051610bb7929190611f38565b60405180910390a18060018190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600581526020017f312e322e3100000000000000000000000000000000000000000000000000000081525081565b6000811480610cbf575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610c6d929190611c9c565b60206040518083038186803b158015610c8557600080fd5b505afa158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd91906119ab565b145b610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590611efd565b60405180910390fd5b610d7f8363095ea7b360e01b8484604051602401610d1d929190611cfc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061145e565b505050565b6060610d938484600085611525565b90509392505050565b600033905090565b8273ffffffffffffffffffffffffffffffffffffffff16630a3b0a4f836040518263ffffffff1660e01b8152600401610ddd9190611c81565b602060405180830381600087803b158015610df757600080fd5b505af1158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190611959565b610e6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6590611ddd565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f37817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8473ffffffffffffffffffffffffffffffffffffffff16610c269092919063ffffffff16565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635dbe47e8846040518263ffffffff1660e01b8152600401610f959190611c81565b60206040518083038186803b158015610fad57600080fd5b505afa158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe59190611959565b611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90611dbd565b60405180910390fd5b600080611031858561132d565b915091506000821415611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107090611e1d565b60405180910390fd5b6110ad611084610d9c565b30838873ffffffffffffffffffffffffffffffffffffffff16611639909392919063ffffffff16565b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68846040518263ffffffff1660e01b815260040161114c9190611f1d565b602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e91906119ab565b146111de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d590611e9d565b60405180910390fd5b6112986111e9610967565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112229190611c81565b60206040518083038186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127291906119ab565b8373ffffffffffffffffffffffffffffffffffffffff166116c29092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1985856040518363ffffffff1660e01b81526004016112f3929190611cfc565b600060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b50505050505050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b091906119d4565b60ff16905060008160126113c4919061218f565b600a6113d09190612017565b6113d8610882565b6113e29190611f93565b90508085116113f157846113f3565b805b925060006001541415611406578261142d565b612710600154846114179190612135565b6114219190611f93565b8361142c919061218f565b5b935081601261143c919061218f565b600a6114489190612017565b846114539190612135565b935050509250929050565b60006114c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d849092919063ffffffff16565b905060008151111561152057808060200190518101906114e09190611959565b61151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690611e7d565b60405180910390fd5b5b505050565b60608247101561156a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156190611d7d565b60405180910390fd5b61157385611748565b6115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a990611e5d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115db9190611c6a565b60006040518083038185875af1925050503d8060008114611618576040519150601f19603f3d011682016040523d82523d6000602084013e61161d565b606091505b509150915061162d82828661175b565b92505050949350505050565b6116bc846323b872dd60e01b85858560405160240161165a93929190611cc5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061145e565b50505050565b6117438363a9059cbb60e01b84846040516024016116e1929190611cfc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061145e565b505050565b600080823b905060008111915050919050565b6060831561176b578290506117bb565b60008351111561177e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b29190611d5b565b60405180910390fd5b9392505050565b6000813590506117d181612596565b92915050565b6000815190506117e681612596565b92915050565b6000815190506117fb816125ad565b92915050565b600081359050611810816125c4565b92915050565b600081519050611825816125c4565b92915050565b60008151905061183a816125db565b92915050565b60006020828403121561185257600080fd5b6000611860848285016117c2565b91505092915050565b60006020828403121561187b57600080fd5b6000611889848285016117d7565b91505092915050565b600080604083850312156118a557600080fd5b60006118b3858286016117c2565b92505060206118c4858286016117c2565b9150509250929050565b600080604083850312156118e157600080fd5b60006118ef858286016117c2565b925050602061190085828601611801565b9150509250929050565b60008060006060848603121561191f57600080fd5b600061192d868287016117c2565b935050602061193e86828701611801565b925050604061194f868287016117c2565b9150509250925092565b60006020828403121561196b57600080fd5b6000611979848285016117ec565b91505092915050565b60006020828403121561199457600080fd5b60006119a284828501611801565b91505092915050565b6000602082840312156119bd57600080fd5b60006119cb84828501611816565b91505092915050565b6000602082840312156119e657600080fd5b60006119f48482850161182b565b91505092915050565b611a06816121c3565b82525050565b6000611a1782611f61565b611a218185611f77565b9350611a31818560208601612260565b80840191505092915050565b611a4681612218565b82525050565b611a558161223c565b82525050565b6000611a6682611f6c565b611a708185611f82565b9350611a80818560208601612260565b611a89816122f1565b840191505092915050565b6000611aa1602683611f82565b9150611aac8261230f565b604082019050919050565b6000611ac4601a83611f82565b9150611acf8261235e565b602082019050919050565b6000611ae7601683611f82565b9150611af282612387565b602082019050919050565b6000611b0a601283611f82565b9150611b15826123b0565b602082019050919050565b6000611b2d601783611f82565b9150611b38826123d9565b602082019050919050565b6000611b50601283611f82565b9150611b5b82612402565b602082019050919050565b6000611b73601983611f82565b9150611b7e8261242b565b602082019050919050565b6000611b96601d83611f82565b9150611ba182612454565b602082019050919050565b6000611bb9602a83611f82565b9150611bc48261247d565b604082019050919050565b6000611bdc601283611f82565b9150611be7826124cc565b602082019050919050565b6000611bff601083611f82565b9150611c0a826124f5565b602082019050919050565b6000611c22601f83611f82565b9150611c2d8261251e565b602082019050919050565b6000611c45603683611f82565b9150611c5082612547565b604082019050919050565b611c6481612201565b82525050565b6000611c768284611a0c565b915081905092915050565b6000602082019050611c9660008301846119fd565b92915050565b6000604082019050611cb160008301856119fd565b611cbe60208301846119fd565b9392505050565b6000606082019050611cda60008301866119fd565b611ce760208301856119fd565b611cf46040830184611c5b565b949350505050565b6000604082019050611d1160008301856119fd565b611d1e6020830184611c5b565b9392505050565b6000602082019050611d3a6000830184611a3d565b92915050565b6000602082019050611d556000830184611a4c565b92915050565b60006020820190508181036000830152611d758184611a5b565b905092915050565b60006020820190508181036000830152611d9681611a94565b9050919050565b60006020820190508181036000830152611db681611ab7565b9050919050565b60006020820190508181036000830152611dd681611ada565b9050919050565b60006020820190508181036000830152611df681611afd565b9050919050565b60006020820190508181036000830152611e1681611b20565b9050919050565b60006020820190508181036000830152611e3681611b43565b9050919050565b60006020820190508181036000830152611e5681611b66565b9050919050565b60006020820190508181036000830152611e7681611b89565b9050919050565b60006020820190508181036000830152611e9681611bac565b9050919050565b60006020820190508181036000830152611eb681611bcf565b9050919050565b60006020820190508181036000830152611ed681611bf2565b9050919050565b60006020820190508181036000830152611ef681611c15565b9050919050565b60006020820190508181036000830152611f1681611c38565b9050919050565b6000602082019050611f326000830184611c5b565b92915050565b6000604082019050611f4d6000830185611c5b565b611f5a6020830184611c5b565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611f9e82612201565b9150611fa983612201565b925082611fb957611fb86122c2565b5b828204905092915050565b6000808291508390505b600185111561200e57808604811115611fea57611fe9612293565b5b6001851615611ff95780820291505b808102905061200785612302565b9450611fce565b94509492505050565b600061202282612201565b915061202d83612201565b925061205a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612062565b905092915050565b600082612072576001905061212e565b81612080576000905061212e565b816001811461209657600281146120a0576120cf565b600191505061212e565b60ff8411156120b2576120b1612293565b5b8360020a9150848211156120c9576120c8612293565b5b5061212e565b5060208310610133831016604e8410600b84101617156121045782820a9050838111156120ff576120fe612293565b5b61212e565b6121118484846001611fc4565b9250905081840481111561212857612127612293565b5b81810290505b9392505050565b600061214082612201565b915061214b83612201565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561218457612183612293565b5b828202905092915050565b600061219a82612201565b91506121a583612201565b9250828210156121b8576121b7612293565b5b828203905092915050565b60006121ce826121e1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006122238261222a565b9050919050565b6000612235826121e1565b9050919050565b60006122478261224e565b9050919050565b6000612259826121e1565b9050919050565b60005b8381101561227e578082015181840152602081019050612263565b8381111561228d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f6d696e742d6c696d69742d726561636865640000000000000000000000000000600082015250565b7f6d696e74696e672d6665652d6c696d69742d7265616368656400000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d6d696e74696e672d66656500000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b61259f816121c3565b81146125aa57600080fd5b50565b6125b6816121d5565b81146125c157600080fd5b50565b6125cd81612201565b81146125d857600080fd5b50565b6125e48161220b565b81146125ef57600080fd5b5056fea2646970667358221220c4dc7754a807c6b2b05842bf677291f430bdae74f07ad93059fa35159b58443064736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelistedToken(address,address)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_token": "address which we want to add in token list."
        }
      },
      "calculateMintage(address,uint256)": {
        "params": {
          "_amount": "Amount of _token",
          "_token": "Address of token which will be deposited for this mintage"
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "Amount of _token",
          "_token": "Address of token being deposited"
        }
      },
      "mint(address,uint256,address)": {
        "params": {
          "_amount": "Amount of _token",
          "_receiver": "Address of VUSD receiver",
          "_token": "Address of token being deposited"
        }
      },
      "removeWhitelistedToken(address)": {
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "treasury()": {
        "details": "Treasury is defined in VUSD token contract only"
      }
    },
    "title": "Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedToken(address,address)": {
        "notice": "Add token as whitelisted token for VUSD system"
      },
      "availableMintage()": {
        "notice": "Check available mintage based on mint limit"
      },
      "calculateMintage(address,uint256)": {
        "notice": "Calculate mintage for supported tokens."
      },
      "mint(address,uint256)": {
        "notice": "Mint VUSD"
      },
      "mint(address,uint256,address)": {
        "notice": "Mint VUSD"
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from whitelisted tokens"
      },
      "updateMintingFee(uint256)": {
        "notice": "Update minting fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Minter.sol:Minter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2028,
        "contract": "contracts/Minter.sol:Minter",
        "label": "mintingFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2042,
        "contract": "contracts/Minter.sol:Minter",
        "label": "cTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}