{
  "address": "0x81e6E266531EADa4F40166Bb986aB9Cc4df57677",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInAfterTransferFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMintLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintLimit",
          "type": "uint256"
        }
      ],
      "name": "MintingLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMintingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintingFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMintingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPriceTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceTolerance",
          "type": "uint256"
        }
      ],
      "name": "UpdatedPriceTolerance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousStalePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "UpdatedStalePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "WhitelistedTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "WhitelistedTokenRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mintage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mintage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintLimit",
          "type": "uint256"
        }
      ],
      "name": "updateMaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintingFee",
          "type": "uint256"
        }
      ],
      "name": "updateMintingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPriceTolerance",
          "type": "uint256"
        }
      ],
      "name": "updatePriceTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "updateStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusdDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x81e6E266531EADa4F40166Bb986aB9Cc4df57677",
    "transactionIndex": 174,
    "gasUsed": "4125403",
    "logsBloom": "0x
    "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7",
    "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
    "logs": [
      {
        "transactionIndex": 174,
        "blockNumber": 22580610,
        "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000081e6e266531eada4f40166bb986ab9cc4df57677",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 368,
        "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7"
      },
      {
        "transactionIndex": 174,
        "blockNumber": 22580610,
        "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
        "address": "0x81e6E266531EADa4F40166Bb986aB9Cc4df57677",
        "topics": [
          "0xf264178f70a222c6991bf4849b98c3722e9f54b6e89d1fb550509113e60ae0b7",
          "0x0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f"
        ],
        "data": "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9",
        "logIndex": 369,
        "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7"
      },
      {
        "transactionIndex": 174,
        "blockNumber": 22580610,
        "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000081e6e266531eada4f40166bb986ab9cc4df57677",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 370,
        "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7"
      },
      {
        "transactionIndex": 174,
        "blockNumber": 22580610,
        "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
        "address": "0x81e6E266531EADa4F40166Bb986aB9Cc4df57677",
        "topics": [
          "0xf264178f70a222c6991bf4849b98c3722e9f54b6e89d1fb550509113e60ae0b7",
          "0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
        ],
        "data": "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e75630000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f6",
        "logIndex": 371,
        "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7"
      },
      {
        "transactionIndex": 174,
        "blockNumber": 22580610,
        "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000081e6e266531eada4f40166bb986ab9cc4df57677",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 372,
        "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7"
      },
      {
        "transactionIndex": 174,
        "blockNumber": 22580610,
        "transactionHash": "0x6cc54d8d911c748ec494da188aaad4af373288ae6f0d0f824a128469f4321d62",
        "address": "0x81e6E266531EADa4F40166Bb986aB9Cc4df57677",
        "topics": [
          "0xf264178f70a222c6991bf4849b98c3722e9f54b6e89d1fb550509113e60ae0b7",
          "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7"
        ],
        "data": "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc90000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d",
        "logIndex": 373,
        "blockHash": "0x7d8d91debd8a2a91861e81e0c3fdfca4f225d5903b2c72a3317df61537614ff7"
      }
    ],
    "blockNumber": 22580610,
    "cumulativeGasUsed": "18653057",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619",
    "500000000000000000000000000"
  ],
  "solcInputHash": "452982e4a66105632dfba1fafc225df0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInAfterTransferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintLimit\",\"type\":\"uint256\"}],\"name\":\"MintingLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintingFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPriceTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceTolerance\",\"type\":\"uint256\"}],\"name\":\"UpdatedPriceTolerance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"UpdatedStalePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"WhitelistedTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"WhitelistedTokenRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stalePeriod\",\"type\":\"uint256\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"calculateMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintLimit\",\"type\":\"uint256\"}],\"name\":\"updateMaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintingFee\",\"type\":\"uint256\"}],\"name\":\"updateMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPriceTolerance\",\"type\":\"uint256\"}],\"name\":\"updatePriceTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"updateStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusdDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelistedToken(address,address,address,uint256)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_oracle\":\"Chainlink oracle address for token/USD feed\",\"_token\":\"address which we want to add in token list.\"}},\"calculateMintage(address,uint256)\":{\"details\":\"_amountIn is amount received after transfer fee if there is any.\",\"params\":{\"_amountIn\":\"Amount of _token being sent to calculate VUSD mintage.\",\"_token\":\"Address of token which will be deposited for this mintage\"},\"returns\":{\"_mintage\":\"VUSD mintage based on given input\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"mint(address,uint256,uint256,address)\":{\"params\":{\"_amountIn\":\"Amount of _token\",\"_minAmountOut\":\"Minimum amount of VUSD to mint\",\"_receiver\":\"Address of VUSD receiver\",\"_token\":\"Address of token being deposited\"}},\"mint(uint256)\":{\"params\":{\"_amount\":\"Amount of VUSD to mint\"}},\"removeWhitelistedToken(address)\":{\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"treasury()\":{\"details\":\"Treasury is defined in VUSD token contract only\"}},\"title\":\"Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedToken(address,address,address,uint256)\":{\"notice\":\"Add token as whitelisted token for VUSD system\"},\"availableMintage()\":{\"notice\":\"Check available mintage based on mint limit\"},\"calculateMintage(address,uint256)\":{\"notice\":\"Calculate minting amount of VUSD for given _token and its amountIn.\"},\"isWhitelistedToken(address)\":{\"notice\":\"Returns whether given address is whitelisted or not\"},\"mint(address,uint256,uint256,address)\":{\"notice\":\"Mint VUSD\"},\"mint(uint256)\":{\"notice\":\"Mint request amount of VUSD and use minted VUSD to add liquidity\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from whitelisted tokens\"},\"updateMintingFee(uint256)\":{\"notice\":\"Update minting fee\"},\"updatePriceTolerance(uint256)\":{\"notice\":\"Update price deviation limit\"},\"updateStalePeriod(address,uint256)\":{\"notice\":\"Update stale period\"},\"whitelistedTokens()\":{\"notice\":\"Return list of whitelisted tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/chainlink/IAggregatorV3.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\n\\n/// @title Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\\ncontract Minter is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant NAME = \\\"VUSD-Minter\\\";\\n    string public constant VERSION = \\\"1.4.2\\\";\\n\\n    IVUSD public immutable vusd;\\n    uint8 public immutable vusdDecimals;\\n\\n    uint256 public mintingFee; // Default no fee\\n    uint256 public maxMintLimit; // Maximum VUSD can be minted\\n\\n    uint256 public constant MAX_BPS = 10_000; // 10_000 = 100%\\n    uint256 public priceTolerance = 100; // 1% based on BPS\\n\\n    // Token => cToken mapping\\n    mapping(address => address) public cTokens;\\n    // Token => oracle mapping\\n    mapping(address => address) public oracles;\\n\\n    // Oracle => stalePeriod mapping\\n    mapping(address => uint256) public stalePeriod;\\n\\n    EnumerableSet.AddressSet private _whitelistedTokens;\\n\\n    // Default whitelist token addresses\\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    // cToken addresses for default whitelisted tokens\\n    //solhint-disable const-name-snakecase\\n    address private constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address private constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n    address private constant cUSDT = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\\n\\n    // Chainlink price oracle for default whitelisted tokens\\n    address private constant DAI_USD = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;\\n    address private constant USDC_USD = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;\\n    address private constant USDT_USD = 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D;\\n\\n    event UpdatedMintingFee(uint256 previousMintingFee, uint256 newMintingFee);\\n    event UpdatedPriceTolerance(uint256 previousPriceTolerance, uint256 newPriceTolerance);\\n    event UpdatedStalePeriod(address indexed oracle, uint256 previousStalePeriod, uint256 newStalePeriod);\\n    event MintingLimitUpdated(uint256 previousMintLimit, uint256 newMintLimit);\\n    event Mint(\\n        address indexed tokenIn,\\n        uint256 amountIn,\\n        uint256 amountInAfterTransferFee,\\n        uint256 mintage,\\n        address receiver\\n    );\\n    event WhitelistedTokenAdded(address indexed token, address cToken, address oracle);\\n    event WhitelistedTokenRemoved(address indexed token);\\n\\n    constructor(address _vusd, uint256 _maxMintLimit) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n        maxMintLimit = _maxMintLimit;\\n        vusdDecimals = IERC20Metadata(_vusd).decimals();\\n        // Add token into the list, add oracle and cToken into the mapping and approve cToken to spend token\\n        _addToken(DAI, cDAI, DAI_USD, 1 hours);\\n        _addToken(USDC, cUSDC, USDC_USD, 24 hours);\\n        _addToken(USDT, cUSDT, USDT_USD, 24 hours);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token as whitelisted token for VUSD system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     * @param _oracle Chainlink oracle address for token/USD feed\\n     */\\n    function addWhitelistedToken(\\n        address _token,\\n        address _cToken,\\n        address _oracle,\\n        uint256 _stalePeriod\\n    ) external onlyGovernor {\\n        require(_token != address(0), \\\"token-address-is-zero\\\");\\n        require(_cToken != address(0), \\\"cToken-address-is-zero\\\");\\n        require(_oracle != address(0), \\\"oracle-address-is-zero\\\");\\n        require(_stalePeriod > 0, \\\"invalid-stale-period\\\");\\n        _addToken(_token, _cToken, _oracle, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Remove token from whitelisted tokens\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(_whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        IERC20(_token).safeApprove(cTokens[_token], 0);\\n        delete stalePeriod[oracles[_token]];\\n        delete cTokens[_token];\\n        delete oracles[_token];\\n        emit WhitelistedTokenRemoved(_token);\\n    }\\n\\n    /**\\n     * @notice Mint request amount of VUSD and use minted VUSD to add liquidity\\n     * @param _amount Amount of VUSD to mint\\n     */\\n    function mint(uint256 _amount) external onlyGovernor {\\n        uint256 _availableMintage = availableMintage();\\n        require(_availableMintage >= _amount, \\\"mint-limit-reached\\\");\\n        vusd.mint(_msgSender(), _amount);\\n    }\\n\\n    /// @notice Update minting fee\\n    function updateMintingFee(uint256 _newMintingFee) external onlyGovernor {\\n        require(_newMintingFee <= MAX_BPS, \\\"minting-fee-limit-reached\\\");\\n        require(mintingFee != _newMintingFee, \\\"same-minting-fee\\\");\\n        emit UpdatedMintingFee(mintingFee, _newMintingFee);\\n        mintingFee = _newMintingFee;\\n    }\\n\\n    function updateMaxMintAmount(uint256 _newMintLimit) external onlyGovernor {\\n        uint256 _currentMintLimit = maxMintLimit;\\n        require(_currentMintLimit != _newMintLimit, \\\"same-mint-limit\\\");\\n        emit MintingLimitUpdated(_currentMintLimit, _newMintLimit);\\n        maxMintLimit = _newMintLimit;\\n    }\\n\\n    /// @notice Update price deviation limit\\n    function updatePriceTolerance(uint256 _newPriceTolerance) external onlyGovernor {\\n        require(_newPriceTolerance <= MAX_BPS, \\\"price-deviation-is-invalid\\\");\\n        uint256 _currentPriceTolerance = priceTolerance;\\n        require(_currentPriceTolerance != _newPriceTolerance, \\\"same-price-deviation-limit\\\");\\n        emit UpdatedPriceTolerance(_currentPriceTolerance, _newPriceTolerance);\\n        priceTolerance = _newPriceTolerance;\\n    }\\n\\n    /// @notice Update stale period\\n    function updateStalePeriod(address _oracle, uint256 _newStalePeriod) external onlyGovernor {\\n        require(_newStalePeriod != 0, \\\"stale-period-is-invalid\\\");\\n        uint256 _currentStalePeriod = stalePeriod[_oracle];\\n        require(_currentStalePeriod != 0, \\\"invalid-oracle\\\");\\n        require(_currentStalePeriod != _newStalePeriod, \\\"same-stale-period\\\");\\n        emit UpdatedStalePeriod(_oracle, _currentStalePeriod, _newStalePeriod);\\n        stalePeriod[_oracle] = _newStalePeriod;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amountIn Amount of _token\\n     * @param _minAmountOut Minimum amount of VUSD to mint\\n     * @param _receiver Address of VUSD receiver\\n     */\\n    function mint(\\n        address _token,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _receiver\\n    ) external nonReentrant {\\n        _mint(_token, _amountIn, _minAmountOut, _receiver);\\n    }\\n\\n    /**\\n     * @notice Calculate minting amount of VUSD for given _token and its amountIn.\\n     * @param _token Address of token which will be deposited for this mintage\\n     * @param _amountIn Amount of _token being sent to calculate VUSD mintage.\\n     * @return _mintage VUSD mintage based on given input\\n     * @dev _amountIn is amount received after transfer fee if there is any.\\n     */\\n    function calculateMintage(address _token, uint256 _amountIn) external view returns (uint256 _mintage) {\\n        if (_whitelistedTokens.contains(_token)) {\\n            _mintage = _calculateMintage(_token, _amountIn);\\n        }\\n    }\\n\\n    /// @notice Returns whether given address is whitelisted or not\\n    function isWhitelistedToken(address _address) external view returns (bool) {\\n        return _whitelistedTokens.contains(_address);\\n    }\\n\\n    /// @notice Return list of whitelisted tokens\\n    function whitelistedTokens() external view returns (address[] memory) {\\n        return _whitelistedTokens.values();\\n    }\\n\\n    /// @notice Check available mintage based on mint limit\\n    function availableMintage() public view returns (uint256 _mintage) {\\n        uint256 _totalSupply = vusd.totalSupply();\\n        uint256 _mintageLimit = maxMintLimit;\\n        if (_mintageLimit > _totalSupply) {\\n            _mintage = _mintageLimit - _totalSupply;\\n        }\\n    }\\n\\n    /// @dev Treasury is defined in VUSD token contract only\\n    function treasury() public view returns (address) {\\n        return vusd.treasury();\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /**\\n     * @dev Add _token into the list, add _cToken in mapping and\\n     * approve cToken to spend token\\n     */\\n    function _addToken(\\n        address _token,\\n        address _cToken,\\n        address _oracle,\\n        uint256 _stalePeriod\\n    ) internal {\\n        require(_whitelistedTokens.add(_token), \\\"add-in-list-failed\\\");\\n        oracles[_token] = _oracle;\\n        cTokens[_token] = _cToken;\\n        stalePeriod[_oracle] = _stalePeriod;\\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\\n        emit WhitelistedTokenAdded(_token, _cToken, _oracle);\\n    }\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amountIn Amount of _token\\n     * @param _receiver Address of VUSD receiver\\n     */\\n    function _mint(\\n        address _token,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _receiver\\n    ) internal returns (uint256 _mintage) {\\n        require(_whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        uint256 _balanceBefore = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amountIn);\\n        uint256 _balanceAfter = IERC20(_token).balanceOf(address(this));\\n\\n        uint256 _actualAmountIn = _balanceAfter - _balanceBefore;\\n        _mintage = _calculateMintage(_token, _actualAmountIn);\\n        require(_mintage >= _minAmountOut, \\\"mint-amount-is-less-than-minimum\\\");\\n        address _cToken = cTokens[_token];\\n\\n        require(CToken(_cToken).mint(_balanceAfter) == 0, \\\"cToken-mint-failed\\\");\\n        IERC20(_cToken).safeTransfer(treasury(), IERC20(_cToken).balanceOf(address(this)));\\n        vusd.mint(_receiver, _mintage);\\n        emit Mint(_token, _amountIn, _actualAmountIn, _mintage, _receiver);\\n    }\\n\\n    /**\\n     * @notice Calculate mintage based on mintingFee, if any.\\n     * Also covert _token defined decimal amount to 18 decimal amount\\n     * @return _mintage VUSD mintage based on given input\\n     */\\n    function _calculateMintage(address _token, uint256 _amountIn) internal view returns (uint256 _mintage) {\\n        IAggregatorV3 _oracle = IAggregatorV3(oracles[_token]);\\n        uint8 _oracleDecimal = IAggregatorV3(_oracle).decimals();\\n        (, int256 _price, , uint256 _updatedAt, ) = IAggregatorV3(_oracle).latestRoundData();\\n        require(block.timestamp - _updatedAt < stalePeriod[address(_oracle)], \\\"oracle-price-is-stale\\\");\\n        uint256 _latestPrice = uint256(_price);\\n\\n        // Token is expected to be stable coin only. Ideal price is 1 USD\\n        uint256 _oneUSD = 10**_oracleDecimal;\\n        uint256 _priceTolerance = (_oneUSD * priceTolerance) / MAX_BPS;\\n        uint256 _priceUpperBound = _oneUSD + _priceTolerance;\\n        uint256 _priceLowerBound = _oneUSD - _priceTolerance;\\n\\n        require(_latestPrice <= _priceUpperBound && _latestPrice >= _priceLowerBound, \\\"oracle-price-exceed-tolerance\\\");\\n        uint256 _actualAmountIn = mintingFee > 0 ? (_amountIn * (MAX_BPS - mintingFee)) / MAX_BPS : _amountIn;\\n        _mintage = _latestPrice >= _oneUSD ? _actualAmountIn : (_actualAmountIn * _latestPrice) / _oneUSD;\\n\\n        _mintage = _mintage * 10**(vusdDecimals - IERC20Metadata(_token).decimals());\\n        uint256 _availableMintage = availableMintage();\\n        require(_availableMintage >= _mintage, \\\"mint-limit-reached\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x83992a55e9254e3a520fc5cf4a37c59b0628bd992430706f562a6bd8eec9236e\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x997961bc6c7780fbc360cc48a7f855f9abe92cf719913f0a906da96d8df6cecd\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260646003553480156200001657600080fd5b5060405162004fd738038062004fd783398181016040528101906200003c919062000a12565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ae9062000cf2565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806002819055508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013c57600080fd5b505afa15801562000151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000177919062000aab565b60ff1660a08160ff1660f81b81525050620001d9736b175474e89094c44da98b954eedeac495271d0f735d3a536e4d6dbd6114cc1ead35777bab948e364373aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9610e106200028760201b60201c565b6200022c73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb487339aa39c021dfbae8fac545936693ac917d5e7563738fffffd4afb6115b954bd326cbe7b4ba576818f6620151806200028760201b60201c565b6200027f73dac17f958d2ee523a2206206994597c13d831ec773f650c3d88d12db855b8bf7d11be6c55a4e07dcc9733e7d1eab13ad0104d2750b8863b489d65364e32d620151806200028760201b60201c565b50506200105e565b620002a2846007620004ce60201b620015271790919060201c565b620002e4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002db9062000d36565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000476837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8673ffffffffffffffffffffffffffffffffffffffff166200050660201b62001557179092919060201c565b8373ffffffffffffffffffffffffffffffffffffffff167ff264178f70a222c6991bf4849b98c3722e9f54b6e89d1fb550509113e60ae0b78484604051620004c092919062000c74565b60405180910390a250505050565b6000620004fe836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200067860201b60201c565b905092915050565b6000811480620005a6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016200055092919062000c74565b60206040518083038186803b1580156200056957600080fd5b505afa1580156200057e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a4919062000a7f565b145b620005e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005df9062000d9c565b60405180910390fd5b620006738363095ea7b360e01b84846040516024016200060a92919062000ca1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620006f260201b60201c565b505050565b60006200068c8383620007c660201b60201c565b620006e7578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620006ec565b600090505b92915050565b60006200075b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16620007e960201b620016b5179092919060201c565b9050600081511115620007c157808060200190518101906200077e919062000a53565b620007c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007b79062000d7a565b60405180910390fd5b5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b60606200080084846000856200080960201b60201c565b90509392505050565b60608247101562000851576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008489062000d14565b60405180910390fd5b62000862856200093760201b60201c565b620008a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200089b9062000d58565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051620008cf919062000c5b565b60006040518083038185875af1925050503d80600081146200090e576040519150601f19603f3d011682016040523d82523d6000602084013e62000913565b606091505b50915091506200092b8282866200094a60201b60201c565b92505050949350505050565b600080823b905060008111915050919050565b606083156200095c57829050620009af565b600083511115620009705782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009a6919062000cce565b60405180910390fd5b9392505050565b600081519050620009c78162000ff6565b92915050565b600081519050620009de8162001010565b92915050565b600081519050620009f5816200102a565b92915050565b60008151905062000a0c8162001044565b92915050565b6000806040838503121562000a2657600080fd5b600062000a3685828601620009b6565b925050602062000a4985828601620009e4565b9150509250929050565b60006020828403121562000a6657600080fd5b600062000a7684828501620009cd565b91505092915050565b60006020828403121562000a9257600080fd5b600062000aa284828501620009e4565b91505092915050565b60006020828403121562000abe57600080fd5b600062000ace84828501620009fb565b91505092915050565b62000ae28162000df0565b82525050565b600062000af58262000dbe565b62000b01818562000dd4565b935062000b1381856020860162000e47565b80840191505092915050565b600062000b2c8262000dc9565b62000b38818562000ddf565b935062000b4a81856020860162000e47565b62000b558162000e7d565b840191505092915050565b600062000b6f60148362000ddf565b915062000b7c8262000e8e565b602082019050919050565b600062000b9660268362000ddf565b915062000ba38262000eb7565b604082019050919050565b600062000bbd60128362000ddf565b915062000bca8262000f06565b602082019050919050565b600062000be4601d8362000ddf565b915062000bf18262000f2f565b602082019050919050565b600062000c0b602a8362000ddf565b915062000c188262000f58565b604082019050919050565b600062000c3260368362000ddf565b915062000c3f8262000fa7565b604082019050919050565b62000c558162000e30565b82525050565b600062000c69828462000ae8565b915081905092915050565b600060408201905062000c8b600083018562000ad7565b62000c9a602083018462000ad7565b9392505050565b600060408201905062000cb8600083018562000ad7565b62000cc7602083018462000c4a565b9392505050565b6000602082019050818103600083015262000cea818462000b1f565b905092915050565b6000602082019050818103600083015262000d0d8162000b60565b9050919050565b6000602082019050818103600083015262000d2f8162000b87565b9050919050565b6000602082019050818103600083015262000d518162000bae565b9050919050565b6000602082019050818103600083015262000d738162000bd5565b9050919050565b6000602082019050818103600083015262000d958162000bfc565b9050919050565b6000602082019050818103600083015262000db78162000c23565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600062000dfd8262000e10565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101562000e6757808201518184015260208101905062000e4a565b8381111562000e77576000848401525b50505050565b6000601f19601f8301169050919050565b7f767573642d616464726573732d69732d7a65726f000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b620010018162000df0565b81146200100d57600080fd5b50565b6200101b8162000e04565b81146200102757600080fd5b50565b620010358162000e30565b81146200104157600080fd5b50565b6200104f8162000e3a565b81146200105b57600080fd5b50565b60805160601c60a05160f81c613f23620010b460003960008181610d470152611ab80152600081816104b401528181610bbc01528181610c9e01528181610e690152818161145d015261219e0152613f236000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638c0b09d0116100de578063c0275a2511610097578063edac520311610071578063edac52031461043a578063f74bfe8e14610458578063fd967f4714610474578063ffa1ad741461049257610173565b8063c0275a25146103e6578063c760af5c14610402578063d654a3221461041e57610173565b80638c0b09d0146102ec578063a0712d681461031c578063a3f4df7e14610338578063ab37f48614610356578063addd509914610386578063bae5e393146103b657610173565b806359011cd11161013057806359011cd1146102385780635a64ad95146102565780635e1762a01461027457806361d027b31461029257806370e2f827146102b05780637d922722146102ce57610173565b80630c340a24146101785780631bee36d9146101965780631c88705d146101b2578063380a0df2146101ce578063482b6014146101ea5780635166c96a1461021a575b600080fd5b6101806104b0565b60405161018d9190613058565b60405180910390f35b6101b060048036038101906101ab91906129bf565b610555565b005b6101cc60048036038101906101c7919061290a565b610779565b005b6101e860048036038101906101e39190612a87565b610a7f565b005b61020460048036038101906101ff91906129bf565b610b89565b60405161021191906134b6565b60405180910390f35b610222610bb7565b60405161022f91906134b6565b60405180910390f35b610240610c7d565b60405161024d91906134b6565b60405180910390f35b61025e610c83565b60405161026b91906134b6565b60405180910390f35b61027c610c89565b60405161028991906130fc565b60405180910390f35b61029a610c9a565b6040516102a79190613058565b60405180910390f35b6102b8610d3f565b6040516102c591906134b6565b60405180910390f35b6102d6610d45565b6040516102e3919061353f565b60405180910390f35b6103066004803603810190610301919061290a565b610d69565b6040516103139190613058565b60405180910390f35b61033660048036038101906103319190612a87565b610d9c565b005b610340610eff565b60405161034d9190613154565b60405180910390f35b610370600480360381019061036b919061290a565b610f38565b60405161037d919061311e565b60405180910390f35b6103a0600480360381019061039b919061290a565b610f55565b6040516103ad9190613058565b60405180910390f35b6103d060048036038101906103cb919061290a565b610f88565b6040516103dd91906134b6565b60405180910390f35b61040060048036038101906103fb9190612a87565b610fa0565b005b61041c60048036038101906104179190612a87565b6110eb565b005b6104386004803603810190610433919061295c565b61123a565b005b61044261145b565b60405161044f9190613139565b60405180910390f35b610472600480360381019061046d91906129fb565b61147f565b005b61047c6114e8565b60405161048991906134b6565b60405180910390f35b61049a6114ee565b6040516104a79190613154565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561051857600080fd5b505afa15801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190612933565b905090565b61055d6104b0565b73ffffffffffffffffffffffffffffffffffffffff1661057b6116cd565b73ffffffffffffffffffffffffffffffffffffffff16146105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c890613216565b60405180910390fd5b6000811415610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90613316565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069490613296565b60405180910390fd5b818114156106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790613176565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fa4d13447e0a7888b1316f15dd7e76bfe640e00a29607696ed1d452414b3d4b6f82846040516107289291906134d1565b60405180910390a281600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6107816104b0565b73ffffffffffffffffffffffffffffffffffffffff1661079f6116cd565b73ffffffffffffffffffffffffffffffffffffffff16146107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90613216565b60405180910390fd5b6108098160076116d590919063ffffffff16565b610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f906132f6565b60405180910390fd5b6108d3600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff166115579092919063ffffffff16565b60066000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558073ffffffffffffffffffffffffffffffffffffffff167f3e4130008265a57fa3e4f3cc37bc1d691652b77b4407bd08ddea997b2eda436760405160405180910390a250565b610a876104b0565b73ffffffffffffffffffffffffffffffffffffffff16610aa56116cd565b73ffffffffffffffffffffffffffffffffffffffff1614610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290613216565b60405180910390fd5b6000600254905081811415610b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3c906131d6565b60405180910390fd5b7f8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb8183604051610b769291906134d1565b60405180910390a1816002819055505050565b6000610b9f83600761170590919063ffffffff16565b15610bb157610bae8383611735565b90505b92915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2057600080fd5b505afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190612ab0565b90506000600254905081811115610c78578181610c759190613817565b92505b505090565b60035481565b60015481565b6060610c956007611b5a565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612933565b905090565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610da46104b0565b73ffffffffffffffffffffffffffffffffffffffff16610dc26116cd565b73ffffffffffffffffffffffffffffffffffffffff1614610e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0f90613216565b60405180910390fd5b6000610e22610bb7565b905081811015610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e90613396565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f19610eab6116cd565b846040518363ffffffff1660e01b8152600401610ec99291906130d3565b600060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050505050565b6040518060400160405280600b81526020017f565553442d4d696e74657200000000000000000000000000000000000000000081525081565b6000610f4e82600761170590919063ffffffff16565b9050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b610fa86104b0565b73ffffffffffffffffffffffffffffffffffffffff16610fc66116cd565b73ffffffffffffffffffffffffffffffffffffffff161461101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390613216565b60405180910390fd5b612710811115611061576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611058906133b6565b60405180910390fd5b8060015414156110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90613456565b60405180910390fd5b7f85735a3ef929fdaaf946ddf4b97deec396e7347cbb47fea3d6a8f3934e1b02e3600154826040516110d99291906134d1565b60405180910390a18060018190555050565b6110f36104b0565b73ffffffffffffffffffffffffffffffffffffffff166111116116cd565b73ffffffffffffffffffffffffffffffffffffffff1614611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90613216565b60405180910390fd5b6127108111156111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390613336565b60405180910390fd5b60006003549050818114156111f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ed906133d6565b60405180910390fd5b7f3cb23ae97dcd603618548f333b96dbb9e41059b6fd0eb7face59058c5ac3b11b81836040516112279291906134d1565b60405180910390a1816003819055505050565b6112426104b0565b73ffffffffffffffffffffffffffffffffffffffff166112606116cd565b73ffffffffffffffffffffffffffffffffffffffff16146112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ad90613216565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90613236565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d90613196565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fd90613356565b60405180910390fd5b60008111611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144090613256565b60405180910390fd5b61145584848484611b7b565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260005414156114c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bc90613476565b60405180910390fd5b60026000819055506114d984848484611daf565b50600160008190555050505050565b61271081565b6040518060400160405280600581526020017f312e342e3200000000000000000000000000000000000000000000000000000081525081565b600061154f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612289565b905092915050565b60008114806115f0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161159e929190613073565b60206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612ab0565b145b61162f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162690613496565b60405180910390fd5b6116b08363095ea7b360e01b848460405160240161164e9291906130d3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b505050565b60606116c484846000856123c0565b90509392505050565b600033905090565b60006116fd836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6124d4565b905092915050565b600061172d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61265a565b905092915050565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a9190612b50565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190612ad9565b50935050925050600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481426118f09190613817565b10611930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192790613376565b60405180910390fd5b6000829050600084600a611944919061369f565b905060006127106003548361195991906137bd565b611963919061361b565b90506000818361197391906135c5565b9050600082846119839190613817565b90508185111580156119955750808510155b6119d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cb906132b6565b60405180910390fd5b600080600154116119e5578b611a0e565b6127106001546127106119f89190613817565b8d611a0391906137bd565b611a0d919061361b565b5b905084861015611a3457848682611a2591906137bd565b611a2f919061361b565b611a36565b805b9a508c73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7e57600080fd5b505afa158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab69190612b50565b7f0000000000000000000000000000000000000000000000000000000000000000611ae1919061384b565b600a611aed919061369f565b8b611af891906137bd565b9a506000611b04610bb7565b90508b811015611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4090613396565b60405180910390fd5b505050505050505050505092915050565b60606000611b6a8360000161267d565b905060608190508092505050919050565b611b8f84600761152790919063ffffffff16565b611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc5906132d6565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d59837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8673ffffffffffffffffffffffffffffffffffffffff166115579092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff167ff264178f70a222c6991bf4849b98c3722e9f54b6e89d1fb550509113e60ae0b78484604051611da1929190613073565b60405180910390a250505050565b6000611dc585600761170590919063ffffffff16565b611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb90613276565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e3f9190613058565b60206040518083038186803b158015611e5757600080fd5b505afa158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8f9190612ab0565b9050611ec5611e9c6116cd565b30878973ffffffffffffffffffffffffffffffffffffffff166126d9909392919063ffffffff16565b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f009190613058565b60206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190612ab0565b905060008282611f609190613817565b9050611f6c8882611735565b935085841015611fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa8906131b6565b60405180910390fd5b6000600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68856040518263ffffffff1660e01b815260040161205091906134b6565b602060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a29190612ab0565b146120e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d990613436565b60405180910390fd5b61219c6120ed610c9a565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121269190613058565b60206040518083038186803b15801561213e57600080fd5b505afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121769190612ab0565b8373ffffffffffffffffffffffffffffffffffffffff166127629092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1987876040518363ffffffff1660e01b81526004016121f79291906130d3565b600060405180830381600087803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff167fa8137fff86647d8a402117b9c5dbda627f721d3773338fb9678c83e54ed390808984888a60405161227594939291906134fa565b60405180910390a250505050949350505050565b6000612295838361265a565b6122ee5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506122f3565b600090505b92915050565b600061235b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116b59092919063ffffffff16565b90506000815111156123bb578080602001905181019061237b9190612a5e565b6123ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b190613416565b60405180910390fd5b5b505050565b606082471015612405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fc906131f6565b60405180910390fd5b61240e856127e8565b61244d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612444906133f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124769190613041565b60006040518083038185875af1925050503d80600081146124b3576040519150601f19603f3d011682016040523d82523d6000602084013e6124b8565b606091505b50915091506124c88282866127fb565b92505050949350505050565b6000808360010160008481526020019081526020016000205490506000811461264e5760006001826125069190613817565b905060006001866000018054905061251e9190613817565b90508181146125d9576000866000018281548110612565577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050808760000184815481106125af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612613577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612654565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156126cd57602002820191906000526020600020905b8154815260200190600101908083116126b9575b50505050509050919050565b61275c846323b872dd60e01b8585856040516024016126fa9392919061309c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b50505050565b6127e38363a9059cbb60e01b84846040516024016127819291906130d3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b505050565b600080823b905060008111915050919050565b6060831561280b5782905061285b565b60008351111561281e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128529190613154565b60405180910390fd5b9392505050565b60008135905061287181613e63565b92915050565b60008151905061288681613e63565b92915050565b60008151905061289b81613e7a565b92915050565b6000815190506128b081613e91565b92915050565b6000813590506128c581613ea8565b92915050565b6000815190506128da81613ea8565b92915050565b6000815190506128ef81613ed6565b92915050565b60008151905061290481613ebf565b92915050565b60006020828403121561291c57600080fd5b600061292a84828501612862565b91505092915050565b60006020828403121561294557600080fd5b600061295384828501612877565b91505092915050565b6000806000806080858703121561297257600080fd5b600061298087828801612862565b945050602061299187828801612862565b93505060406129a287828801612862565b92505060606129b3878288016128b6565b91505092959194509250565b600080604083850312156129d257600080fd5b60006129e085828601612862565b92505060206129f1858286016128b6565b9150509250929050565b60008060008060808587031215612a1157600080fd5b6000612a1f87828801612862565b9450506020612a30878288016128b6565b9350506040612a41878288016128b6565b9250506060612a5287828801612862565b91505092959194509250565b600060208284031215612a7057600080fd5b6000612a7e8482850161288c565b91505092915050565b600060208284031215612a9957600080fd5b6000612aa7848285016128b6565b91505092915050565b600060208284031215612ac257600080fd5b6000612ad0848285016128cb565b91505092915050565b600080600080600060a08688031215612af157600080fd5b6000612aff888289016128e0565b9550506020612b10888289016128a1565b9450506040612b21888289016128cb565b9350506060612b32888289016128cb565b9250506080612b43888289016128e0565b9150509295509295909350565b600060208284031215612b6257600080fd5b6000612b70848285016128f5565b91505092915050565b6000612b858383612b91565b60208301905092915050565b612b9a8161387f565b82525050565b612ba98161387f565b82525050565b6000612bba8261356a565b612bc48185613598565b9350612bcf8361355a565b8060005b83811015612c00578151612be78882612b79565b9750612bf28361358b565b925050600181019050612bd3565b5085935050505092915050565b612c1681613891565b82525050565b6000612c2782613575565b612c3181856135a9565b9350612c41818560208601613918565b80840191505092915050565b612c56816138f4565b82525050565b6000612c6782613580565b612c7181856135b4565b9350612c81818560208601613918565b612c8a816139a9565b840191505092915050565b6000612ca26011836135b4565b9150612cad826139c7565b602082019050919050565b6000612cc56016836135b4565b9150612cd0826139f0565b602082019050919050565b6000612ce86020836135b4565b9150612cf382613a19565b602082019050919050565b6000612d0b600f836135b4565b9150612d1682613a42565b602082019050919050565b6000612d2e6026836135b4565b9150612d3982613a6b565b604082019050919050565b6000612d51601a836135b4565b9150612d5c82613aba565b602082019050919050565b6000612d746015836135b4565b9150612d7f82613ae3565b602082019050919050565b6000612d976014836135b4565b9150612da282613b0c565b602082019050919050565b6000612dba6016836135b4565b9150612dc582613b35565b602082019050919050565b6000612ddd600e836135b4565b9150612de882613b5e565b602082019050919050565b6000612e00601d836135b4565b9150612e0b82613b87565b602082019050919050565b6000612e236012836135b4565b9150612e2e82613bb0565b602082019050919050565b6000612e466017836135b4565b9150612e5182613bd9565b602082019050919050565b6000612e696017836135b4565b9150612e7482613c02565b602082019050919050565b6000612e8c601a836135b4565b9150612e9782613c2b565b602082019050919050565b6000612eaf6016836135b4565b9150612eba82613c54565b602082019050919050565b6000612ed26015836135b4565b9150612edd82613c7d565b602082019050919050565b6000612ef56012836135b4565b9150612f0082613ca6565b602082019050919050565b6000612f186019836135b4565b9150612f2382613ccf565b602082019050919050565b6000612f3b601a836135b4565b9150612f4682613cf8565b602082019050919050565b6000612f5e601d836135b4565b9150612f6982613d21565b602082019050919050565b6000612f81602a836135b4565b9150612f8c82613d4a565b604082019050919050565b6000612fa46012836135b4565b9150612faf82613d99565b602082019050919050565b6000612fc76010836135b4565b9150612fd282613dc2565b602082019050919050565b6000612fea601f836135b4565b9150612ff582613deb565b602082019050919050565b600061300d6036836135b4565b915061301882613e14565b604082019050919050565b61302c816138c7565b82525050565b61303b816138d1565b82525050565b600061304d8284612c1c565b915081905092915050565b600060208201905061306d6000830184612ba0565b92915050565b60006040820190506130886000830185612ba0565b6130956020830184612ba0565b9392505050565b60006060820190506130b16000830186612ba0565b6130be6020830185612ba0565b6130cb6040830184613023565b949350505050565b60006040820190506130e86000830185612ba0565b6130f56020830184613023565b9392505050565b600060208201905081810360008301526131168184612baf565b905092915050565b60006020820190506131336000830184612c0d565b92915050565b600060208201905061314e6000830184612c4d565b92915050565b6000602082019050818103600083015261316e8184612c5c565b905092915050565b6000602082019050818103600083015261318f81612c95565b9050919050565b600060208201905081810360008301526131af81612cb8565b9050919050565b600060208201905081810360008301526131cf81612cdb565b9050919050565b600060208201905081810360008301526131ef81612cfe565b9050919050565b6000602082019050818103600083015261320f81612d21565b9050919050565b6000602082019050818103600083015261322f81612d44565b9050919050565b6000602082019050818103600083015261324f81612d67565b9050919050565b6000602082019050818103600083015261326f81612d8a565b9050919050565b6000602082019050818103600083015261328f81612dad565b9050919050565b600060208201905081810360008301526132af81612dd0565b9050919050565b600060208201905081810360008301526132cf81612df3565b9050919050565b600060208201905081810360008301526132ef81612e16565b9050919050565b6000602082019050818103600083015261330f81612e39565b9050919050565b6000602082019050818103600083015261332f81612e5c565b9050919050565b6000602082019050818103600083015261334f81612e7f565b9050919050565b6000602082019050818103600083015261336f81612ea2565b9050919050565b6000602082019050818103600083015261338f81612ec5565b9050919050565b600060208201905081810360008301526133af81612ee8565b9050919050565b600060208201905081810360008301526133cf81612f0b565b9050919050565b600060208201905081810360008301526133ef81612f2e565b9050919050565b6000602082019050818103600083015261340f81612f51565b9050919050565b6000602082019050818103600083015261342f81612f74565b9050919050565b6000602082019050818103600083015261344f81612f97565b9050919050565b6000602082019050818103600083015261346f81612fba565b9050919050565b6000602082019050818103600083015261348f81612fdd565b9050919050565b600060208201905081810360008301526134af81613000565b9050919050565b60006020820190506134cb6000830184613023565b92915050565b60006040820190506134e66000830185613023565b6134f36020830184613023565b9392505050565b600060808201905061350f6000830187613023565b61351c6020830186613023565b6135296040830185613023565b6135366060830184612ba0565b95945050505050565b60006020820190506135546000830184613032565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006135d0826138c7565b91506135db836138c7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136105761360f61394b565b5b828201905092915050565b6000613626826138c7565b9150613631836138c7565b9250826136415761364061397a565b5b828204905092915050565b6000808291508390505b6001851115613696578086048111156136725761367161394b565b5b60018516156136815780820291505b808102905061368f856139ba565b9450613656565b94509492505050565b60006136aa826138c7565b91506136b5836138d1565b92506136e27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846136ea565b905092915050565b6000826136fa57600190506137b6565b8161370857600090506137b6565b816001811461371e576002811461372857613757565b60019150506137b6565b60ff84111561373a5761373961394b565b5b8360020a9150848211156137515761375061394b565b5b506137b6565b5060208310610133831016604e8410600b841016171561378c5782820a9050838111156137875761378661394b565b5b6137b6565b613799848484600161364c565b925090508184048111156137b0576137af61394b565b5b81810290505b9392505050565b60006137c8826138c7565b91506137d3836138c7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561380c5761380b61394b565b5b828202905092915050565b6000613822826138c7565b915061382d836138c7565b9250828210156138405761383f61394b565b5b828203905092915050565b6000613856826138d1565b9150613861836138d1565b9250828210156138745761387361394b565b5b828203905092915050565b600061388a826138a7565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60006138ff82613906565b9050919050565b6000613911826138a7565b9050919050565b60005b8381101561393657808201518184015260208101905061391b565b83811115613945576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f73616d652d7374616c652d706572696f64000000000000000000000000000000600082015250565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6d696e742d616d6f756e742d69732d6c6573732d7468616e2d6d696e696d756d600082015250565b7f73616d652d6d696e742d6c696d69740000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f696e76616c69642d7374616c652d706572696f64000000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f696e76616c69642d6f7261636c65000000000000000000000000000000000000600082015250565b7f6f7261636c652d70726963652d6578636565642d746f6c6572616e6365000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f7374616c652d706572696f642d69732d696e76616c6964000000000000000000600082015250565b7f70726963652d646576696174696f6e2d69732d696e76616c6964000000000000600082015250565b7f6f7261636c652d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6f7261636c652d70726963652d69732d7374616c650000000000000000000000600082015250565b7f6d696e742d6c696d69742d726561636865640000000000000000000000000000600082015250565b7f6d696e74696e672d6665652d6c696d69742d7265616368656400000000000000600082015250565b7f73616d652d70726963652d646576696174696f6e2d6c696d6974000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d6d696e74696e672d66656500000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b613e6c8161387f565b8114613e7757600080fd5b50565b613e8381613891565b8114613e8e57600080fd5b50565b613e9a8161389d565b8114613ea557600080fd5b50565b613eb1816138c7565b8114613ebc57600080fd5b50565b613ec8816138d1565b8114613ed357600080fd5b50565b613edf816138de565b8114613eea57600080fd5b5056fea2646970667358221220aff198ced1c1ed0f1fae5b2ca86124dab0a60c2cab70f32ddbcf1e37954d5ed064736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638c0b09d0116100de578063c0275a2511610097578063edac520311610071578063edac52031461043a578063f74bfe8e14610458578063fd967f4714610474578063ffa1ad741461049257610173565b8063c0275a25146103e6578063c760af5c14610402578063d654a3221461041e57610173565b80638c0b09d0146102ec578063a0712d681461031c578063a3f4df7e14610338578063ab37f48614610356578063addd509914610386578063bae5e393146103b657610173565b806359011cd11161013057806359011cd1146102385780635a64ad95146102565780635e1762a01461027457806361d027b31461029257806370e2f827146102b05780637d922722146102ce57610173565b80630c340a24146101785780631bee36d9146101965780631c88705d146101b2578063380a0df2146101ce578063482b6014146101ea5780635166c96a1461021a575b600080fd5b6101806104b0565b60405161018d9190613058565b60405180910390f35b6101b060048036038101906101ab91906129bf565b610555565b005b6101cc60048036038101906101c7919061290a565b610779565b005b6101e860048036038101906101e39190612a87565b610a7f565b005b61020460048036038101906101ff91906129bf565b610b89565b60405161021191906134b6565b60405180910390f35b610222610bb7565b60405161022f91906134b6565b60405180910390f35b610240610c7d565b60405161024d91906134b6565b60405180910390f35b61025e610c83565b60405161026b91906134b6565b60405180910390f35b61027c610c89565b60405161028991906130fc565b60405180910390f35b61029a610c9a565b6040516102a79190613058565b60405180910390f35b6102b8610d3f565b6040516102c591906134b6565b60405180910390f35b6102d6610d45565b6040516102e3919061353f565b60405180910390f35b6103066004803603810190610301919061290a565b610d69565b6040516103139190613058565b60405180910390f35b61033660048036038101906103319190612a87565b610d9c565b005b610340610eff565b60405161034d9190613154565b60405180910390f35b610370600480360381019061036b919061290a565b610f38565b60405161037d919061311e565b60405180910390f35b6103a0600480360381019061039b919061290a565b610f55565b6040516103ad9190613058565b60405180910390f35b6103d060048036038101906103cb919061290a565b610f88565b6040516103dd91906134b6565b60405180910390f35b61040060048036038101906103fb9190612a87565b610fa0565b005b61041c60048036038101906104179190612a87565b6110eb565b005b6104386004803603810190610433919061295c565b61123a565b005b61044261145b565b60405161044f9190613139565b60405180910390f35b610472600480360381019061046d91906129fb565b61147f565b005b61047c6114e8565b60405161048991906134b6565b60405180910390f35b61049a6114ee565b6040516104a79190613154565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561051857600080fd5b505afa15801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190612933565b905090565b61055d6104b0565b73ffffffffffffffffffffffffffffffffffffffff1661057b6116cd565b73ffffffffffffffffffffffffffffffffffffffff16146105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c890613216565b60405180910390fd5b6000811415610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90613316565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069490613296565b60405180910390fd5b818114156106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790613176565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fa4d13447e0a7888b1316f15dd7e76bfe640e00a29607696ed1d452414b3d4b6f82846040516107289291906134d1565b60405180910390a281600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6107816104b0565b73ffffffffffffffffffffffffffffffffffffffff1661079f6116cd565b73ffffffffffffffffffffffffffffffffffffffff16146107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90613216565b60405180910390fd5b6108098160076116d590919063ffffffff16565b610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f906132f6565b60405180910390fd5b6108d3600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff166115579092919063ffffffff16565b60066000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558073ffffffffffffffffffffffffffffffffffffffff167f3e4130008265a57fa3e4f3cc37bc1d691652b77b4407bd08ddea997b2eda436760405160405180910390a250565b610a876104b0565b73ffffffffffffffffffffffffffffffffffffffff16610aa56116cd565b73ffffffffffffffffffffffffffffffffffffffff1614610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290613216565b60405180910390fd5b6000600254905081811415610b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3c906131d6565b60405180910390fd5b7f8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb8183604051610b769291906134d1565b60405180910390a1816002819055505050565b6000610b9f83600761170590919063ffffffff16565b15610bb157610bae8383611735565b90505b92915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2057600080fd5b505afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190612ab0565b90506000600254905081811115610c78578181610c759190613817565b92505b505090565b60035481565b60015481565b6060610c956007611b5a565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612933565b905090565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610da46104b0565b73ffffffffffffffffffffffffffffffffffffffff16610dc26116cd565b73ffffffffffffffffffffffffffffffffffffffff1614610e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0f90613216565b60405180910390fd5b6000610e22610bb7565b905081811015610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e90613396565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f19610eab6116cd565b846040518363ffffffff1660e01b8152600401610ec99291906130d3565b600060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050505050565b6040518060400160405280600b81526020017f565553442d4d696e74657200000000000000000000000000000000000000000081525081565b6000610f4e82600761170590919063ffffffff16565b9050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b610fa86104b0565b73ffffffffffffffffffffffffffffffffffffffff16610fc66116cd565b73ffffffffffffffffffffffffffffffffffffffff161461101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390613216565b60405180910390fd5b612710811115611061576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611058906133b6565b60405180910390fd5b8060015414156110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90613456565b60405180910390fd5b7f85735a3ef929fdaaf946ddf4b97deec396e7347cbb47fea3d6a8f3934e1b02e3600154826040516110d99291906134d1565b60405180910390a18060018190555050565b6110f36104b0565b73ffffffffffffffffffffffffffffffffffffffff166111116116cd565b73ffffffffffffffffffffffffffffffffffffffff1614611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90613216565b60405180910390fd5b6127108111156111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390613336565b60405180910390fd5b60006003549050818114156111f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ed906133d6565b60405180910390fd5b7f3cb23ae97dcd603618548f333b96dbb9e41059b6fd0eb7face59058c5ac3b11b81836040516112279291906134d1565b60405180910390a1816003819055505050565b6112426104b0565b73ffffffffffffffffffffffffffffffffffffffff166112606116cd565b73ffffffffffffffffffffffffffffffffffffffff16146112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ad90613216565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90613236565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d90613196565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fd90613356565b60405180910390fd5b60008111611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144090613256565b60405180910390fd5b61145584848484611b7b565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260005414156114c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bc90613476565b60405180910390fd5b60026000819055506114d984848484611daf565b50600160008190555050505050565b61271081565b6040518060400160405280600581526020017f312e342e3200000000000000000000000000000000000000000000000000000081525081565b600061154f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612289565b905092915050565b60008114806115f0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161159e929190613073565b60206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612ab0565b145b61162f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162690613496565b60405180910390fd5b6116b08363095ea7b360e01b848460405160240161164e9291906130d3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b505050565b60606116c484846000856123c0565b90509392505050565b600033905090565b60006116fd836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6124d4565b905092915050565b600061172d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61265a565b905092915050565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a9190612b50565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190612ad9565b50935050925050600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481426118f09190613817565b10611930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192790613376565b60405180910390fd5b6000829050600084600a611944919061369f565b905060006127106003548361195991906137bd565b611963919061361b565b90506000818361197391906135c5565b9050600082846119839190613817565b90508185111580156119955750808510155b6119d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cb906132b6565b60405180910390fd5b600080600154116119e5578b611a0e565b6127106001546127106119f89190613817565b8d611a0391906137bd565b611a0d919061361b565b5b905084861015611a3457848682611a2591906137bd565b611a2f919061361b565b611a36565b805b9a508c73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7e57600080fd5b505afa158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab69190612b50565b7f0000000000000000000000000000000000000000000000000000000000000000611ae1919061384b565b600a611aed919061369f565b8b611af891906137bd565b9a506000611b04610bb7565b90508b811015611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4090613396565b60405180910390fd5b505050505050505050505092915050565b60606000611b6a8360000161267d565b905060608190508092505050919050565b611b8f84600761152790919063ffffffff16565b611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc5906132d6565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d59837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8673ffffffffffffffffffffffffffffffffffffffff166115579092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff167ff264178f70a222c6991bf4849b98c3722e9f54b6e89d1fb550509113e60ae0b78484604051611da1929190613073565b60405180910390a250505050565b6000611dc585600761170590919063ffffffff16565b611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb90613276565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e3f9190613058565b60206040518083038186803b158015611e5757600080fd5b505afa158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8f9190612ab0565b9050611ec5611e9c6116cd565b30878973ffffffffffffffffffffffffffffffffffffffff166126d9909392919063ffffffff16565b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f009190613058565b60206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190612ab0565b905060008282611f609190613817565b9050611f6c8882611735565b935085841015611fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa8906131b6565b60405180910390fd5b6000600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68856040518263ffffffff1660e01b815260040161205091906134b6565b602060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a29190612ab0565b146120e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d990613436565b60405180910390fd5b61219c6120ed610c9a565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121269190613058565b60206040518083038186803b15801561213e57600080fd5b505afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121769190612ab0565b8373ffffffffffffffffffffffffffffffffffffffff166127629092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1987876040518363ffffffff1660e01b81526004016121f79291906130d3565b600060405180830381600087803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff167fa8137fff86647d8a402117b9c5dbda627f721d3773338fb9678c83e54ed390808984888a60405161227594939291906134fa565b60405180910390a250505050949350505050565b6000612295838361265a565b6122ee5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506122f3565b600090505b92915050565b600061235b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116b59092919063ffffffff16565b90506000815111156123bb578080602001905181019061237b9190612a5e565b6123ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b190613416565b60405180910390fd5b5b505050565b606082471015612405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fc906131f6565b60405180910390fd5b61240e856127e8565b61244d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612444906133f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124769190613041565b60006040518083038185875af1925050503d80600081146124b3576040519150601f19603f3d011682016040523d82523d6000602084013e6124b8565b606091505b50915091506124c88282866127fb565b92505050949350505050565b6000808360010160008481526020019081526020016000205490506000811461264e5760006001826125069190613817565b905060006001866000018054905061251e9190613817565b90508181146125d9576000866000018281548110612565577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050808760000184815481106125af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612613577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612654565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156126cd57602002820191906000526020600020905b8154815260200190600101908083116126b9575b50505050509050919050565b61275c846323b872dd60e01b8585856040516024016126fa9392919061309c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b50505050565b6127e38363a9059cbb60e01b84846040516024016127819291906130d3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b505050565b600080823b905060008111915050919050565b6060831561280b5782905061285b565b60008351111561281e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128529190613154565b60405180910390fd5b9392505050565b60008135905061287181613e63565b92915050565b60008151905061288681613e63565b92915050565b60008151905061289b81613e7a565b92915050565b6000815190506128b081613e91565b92915050565b6000813590506128c581613ea8565b92915050565b6000815190506128da81613ea8565b92915050565b6000815190506128ef81613ed6565b92915050565b60008151905061290481613ebf565b92915050565b60006020828403121561291c57600080fd5b600061292a84828501612862565b91505092915050565b60006020828403121561294557600080fd5b600061295384828501612877565b91505092915050565b6000806000806080858703121561297257600080fd5b600061298087828801612862565b945050602061299187828801612862565b93505060406129a287828801612862565b92505060606129b3878288016128b6565b91505092959194509250565b600080604083850312156129d257600080fd5b60006129e085828601612862565b92505060206129f1858286016128b6565b9150509250929050565b60008060008060808587031215612a1157600080fd5b6000612a1f87828801612862565b9450506020612a30878288016128b6565b9350506040612a41878288016128b6565b9250506060612a5287828801612862565b91505092959194509250565b600060208284031215612a7057600080fd5b6000612a7e8482850161288c565b91505092915050565b600060208284031215612a9957600080fd5b6000612aa7848285016128b6565b91505092915050565b600060208284031215612ac257600080fd5b6000612ad0848285016128cb565b91505092915050565b600080600080600060a08688031215612af157600080fd5b6000612aff888289016128e0565b9550506020612b10888289016128a1565b9450506040612b21888289016128cb565b9350506060612b32888289016128cb565b9250506080612b43888289016128e0565b9150509295509295909350565b600060208284031215612b6257600080fd5b6000612b70848285016128f5565b91505092915050565b6000612b858383612b91565b60208301905092915050565b612b9a8161387f565b82525050565b612ba98161387f565b82525050565b6000612bba8261356a565b612bc48185613598565b9350612bcf8361355a565b8060005b83811015612c00578151612be78882612b79565b9750612bf28361358b565b925050600181019050612bd3565b5085935050505092915050565b612c1681613891565b82525050565b6000612c2782613575565b612c3181856135a9565b9350612c41818560208601613918565b80840191505092915050565b612c56816138f4565b82525050565b6000612c6782613580565b612c7181856135b4565b9350612c81818560208601613918565b612c8a816139a9565b840191505092915050565b6000612ca26011836135b4565b9150612cad826139c7565b602082019050919050565b6000612cc56016836135b4565b9150612cd0826139f0565b602082019050919050565b6000612ce86020836135b4565b9150612cf382613a19565b602082019050919050565b6000612d0b600f836135b4565b9150612d1682613a42565b602082019050919050565b6000612d2e6026836135b4565b9150612d3982613a6b565b604082019050919050565b6000612d51601a836135b4565b9150612d5c82613aba565b602082019050919050565b6000612d746015836135b4565b9150612d7f82613ae3565b602082019050919050565b6000612d976014836135b4565b9150612da282613b0c565b602082019050919050565b6000612dba6016836135b4565b9150612dc582613b35565b602082019050919050565b6000612ddd600e836135b4565b9150612de882613b5e565b602082019050919050565b6000612e00601d836135b4565b9150612e0b82613b87565b602082019050919050565b6000612e236012836135b4565b9150612e2e82613bb0565b602082019050919050565b6000612e466017836135b4565b9150612e5182613bd9565b602082019050919050565b6000612e696017836135b4565b9150612e7482613c02565b602082019050919050565b6000612e8c601a836135b4565b9150612e9782613c2b565b602082019050919050565b6000612eaf6016836135b4565b9150612eba82613c54565b602082019050919050565b6000612ed26015836135b4565b9150612edd82613c7d565b602082019050919050565b6000612ef56012836135b4565b9150612f0082613ca6565b602082019050919050565b6000612f186019836135b4565b9150612f2382613ccf565b602082019050919050565b6000612f3b601a836135b4565b9150612f4682613cf8565b602082019050919050565b6000612f5e601d836135b4565b9150612f6982613d21565b602082019050919050565b6000612f81602a836135b4565b9150612f8c82613d4a565b604082019050919050565b6000612fa46012836135b4565b9150612faf82613d99565b602082019050919050565b6000612fc76010836135b4565b9150612fd282613dc2565b602082019050919050565b6000612fea601f836135b4565b9150612ff582613deb565b602082019050919050565b600061300d6036836135b4565b915061301882613e14565b604082019050919050565b61302c816138c7565b82525050565b61303b816138d1565b82525050565b600061304d8284612c1c565b915081905092915050565b600060208201905061306d6000830184612ba0565b92915050565b60006040820190506130886000830185612ba0565b6130956020830184612ba0565b9392505050565b60006060820190506130b16000830186612ba0565b6130be6020830185612ba0565b6130cb6040830184613023565b949350505050565b60006040820190506130e86000830185612ba0565b6130f56020830184613023565b9392505050565b600060208201905081810360008301526131168184612baf565b905092915050565b60006020820190506131336000830184612c0d565b92915050565b600060208201905061314e6000830184612c4d565b92915050565b6000602082019050818103600083015261316e8184612c5c565b905092915050565b6000602082019050818103600083015261318f81612c95565b9050919050565b600060208201905081810360008301526131af81612cb8565b9050919050565b600060208201905081810360008301526131cf81612cdb565b9050919050565b600060208201905081810360008301526131ef81612cfe565b9050919050565b6000602082019050818103600083015261320f81612d21565b9050919050565b6000602082019050818103600083015261322f81612d44565b9050919050565b6000602082019050818103600083015261324f81612d67565b9050919050565b6000602082019050818103600083015261326f81612d8a565b9050919050565b6000602082019050818103600083015261328f81612dad565b9050919050565b600060208201905081810360008301526132af81612dd0565b9050919050565b600060208201905081810360008301526132cf81612df3565b9050919050565b600060208201905081810360008301526132ef81612e16565b9050919050565b6000602082019050818103600083015261330f81612e39565b9050919050565b6000602082019050818103600083015261332f81612e5c565b9050919050565b6000602082019050818103600083015261334f81612e7f565b9050919050565b6000602082019050818103600083015261336f81612ea2565b9050919050565b6000602082019050818103600083015261338f81612ec5565b9050919050565b600060208201905081810360008301526133af81612ee8565b9050919050565b600060208201905081810360008301526133cf81612f0b565b9050919050565b600060208201905081810360008301526133ef81612f2e565b9050919050565b6000602082019050818103600083015261340f81612f51565b9050919050565b6000602082019050818103600083015261342f81612f74565b9050919050565b6000602082019050818103600083015261344f81612f97565b9050919050565b6000602082019050818103600083015261346f81612fba565b9050919050565b6000602082019050818103600083015261348f81612fdd565b9050919050565b600060208201905081810360008301526134af81613000565b9050919050565b60006020820190506134cb6000830184613023565b92915050565b60006040820190506134e66000830185613023565b6134f36020830184613023565b9392505050565b600060808201905061350f6000830187613023565b61351c6020830186613023565b6135296040830185613023565b6135366060830184612ba0565b95945050505050565b60006020820190506135546000830184613032565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006135d0826138c7565b91506135db836138c7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136105761360f61394b565b5b828201905092915050565b6000613626826138c7565b9150613631836138c7565b9250826136415761364061397a565b5b828204905092915050565b6000808291508390505b6001851115613696578086048111156136725761367161394b565b5b60018516156136815780820291505b808102905061368f856139ba565b9450613656565b94509492505050565b60006136aa826138c7565b91506136b5836138d1565b92506136e27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846136ea565b905092915050565b6000826136fa57600190506137b6565b8161370857600090506137b6565b816001811461371e576002811461372857613757565b60019150506137b6565b60ff84111561373a5761373961394b565b5b8360020a9150848211156137515761375061394b565b5b506137b6565b5060208310610133831016604e8410600b841016171561378c5782820a9050838111156137875761378661394b565b5b6137b6565b613799848484600161364c565b925090508184048111156137b0576137af61394b565b5b81810290505b9392505050565b60006137c8826138c7565b91506137d3836138c7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561380c5761380b61394b565b5b828202905092915050565b6000613822826138c7565b915061382d836138c7565b9250828210156138405761383f61394b565b5b828203905092915050565b6000613856826138d1565b9150613861836138d1565b9250828210156138745761387361394b565b5b828203905092915050565b600061388a826138a7565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60006138ff82613906565b9050919050565b6000613911826138a7565b9050919050565b60005b8381101561393657808201518184015260208101905061391b565b83811115613945576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f73616d652d7374616c652d706572696f64000000000000000000000000000000600082015250565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6d696e742d616d6f756e742d69732d6c6573732d7468616e2d6d696e696d756d600082015250565b7f73616d652d6d696e742d6c696d69740000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f696e76616c69642d7374616c652d706572696f64000000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f696e76616c69642d6f7261636c65000000000000000000000000000000000000600082015250565b7f6f7261636c652d70726963652d6578636565642d746f6c6572616e6365000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f7374616c652d706572696f642d69732d696e76616c6964000000000000000000600082015250565b7f70726963652d646576696174696f6e2d69732d696e76616c6964000000000000600082015250565b7f6f7261636c652d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6f7261636c652d70726963652d69732d7374616c650000000000000000000000600082015250565b7f6d696e742d6c696d69742d726561636865640000000000000000000000000000600082015250565b7f6d696e74696e672d6665652d6c696d69742d7265616368656400000000000000600082015250565b7f73616d652d70726963652d646576696174696f6e2d6c696d6974000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d6d696e74696e672d66656500000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b613e6c8161387f565b8114613e7757600080fd5b50565b613e8381613891565b8114613e8e57600080fd5b50565b613e9a8161389d565b8114613ea557600080fd5b50565b613eb1816138c7565b8114613ebc57600080fd5b50565b613ec8816138d1565b8114613ed357600080fd5b50565b613edf816138de565b8114613eea57600080fd5b5056fea2646970667358221220aff198ced1c1ed0f1fae5b2ca86124dab0a60c2cab70f32ddbcf1e37954d5ed064736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelistedToken(address,address,address,uint256)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_oracle": "Chainlink oracle address for token/USD feed",
          "_token": "address which we want to add in token list."
        }
      },
      "calculateMintage(address,uint256)": {
        "details": "_amountIn is amount received after transfer fee if there is any.",
        "params": {
          "_amountIn": "Amount of _token being sent to calculate VUSD mintage.",
          "_token": "Address of token which will be deposited for this mintage"
        },
        "returns": {
          "_mintage": "VUSD mintage based on given input"
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "mint(address,uint256,uint256,address)": {
        "params": {
          "_amountIn": "Amount of _token",
          "_minAmountOut": "Minimum amount of VUSD to mint",
          "_receiver": "Address of VUSD receiver",
          "_token": "Address of token being deposited"
        }
      },
      "mint(uint256)": {
        "params": {
          "_amount": "Amount of VUSD to mint"
        }
      },
      "removeWhitelistedToken(address)": {
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "treasury()": {
        "details": "Treasury is defined in VUSD token contract only"
      }
    },
    "title": "Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedToken(address,address,address,uint256)": {
        "notice": "Add token as whitelisted token for VUSD system"
      },
      "availableMintage()": {
        "notice": "Check available mintage based on mint limit"
      },
      "calculateMintage(address,uint256)": {
        "notice": "Calculate minting amount of VUSD for given _token and its amountIn."
      },
      "isWhitelistedToken(address)": {
        "notice": "Returns whether given address is whitelisted or not"
      },
      "mint(address,uint256,uint256,address)": {
        "notice": "Mint VUSD"
      },
      "mint(uint256)": {
        "notice": "Mint request amount of VUSD and use minted VUSD to add liquidity"
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from whitelisted tokens"
      },
      "updateMintingFee(uint256)": {
        "notice": "Update minting fee"
      },
      "updatePriceTolerance(uint256)": {
        "notice": "Update price deviation limit"
      },
      "updateStalePeriod(address,uint256)": {
        "notice": "Update stale period"
      },
      "whitelistedTokens()": {
        "notice": "Return list of whitelisted tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Minter.sol:Minter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3058,
        "contract": "contracts/Minter.sol:Minter",
        "label": "mintingFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3060,
        "contract": "contracts/Minter.sol:Minter",
        "label": "maxMintLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3066,
        "contract": "contracts/Minter.sol:Minter",
        "label": "priceTolerance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3070,
        "contract": "contracts/Minter.sol:Minter",
        "label": "cTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3074,
        "contract": "contracts/Minter.sol:Minter",
        "label": "oracles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3078,
        "contract": "contracts/Minter.sol:Minter",
        "label": "stalePeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3081,
        "contract": "contracts/Minter.sol:Minter",
        "label": "_whitelistedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)2631_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2631_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2630,
            "contract": "contracts/Minter.sol:Minter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2330_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2330_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2325,
            "contract": "contracts/Minter.sol:Minter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2329,
            "contract": "contracts/Minter.sol:Minter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}