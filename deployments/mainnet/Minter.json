{
  "address": "0x741da41e8f2493fB3b659Fd776fF8CEc24Cd5B95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vusd",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMintLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintLimit",
          "type": "uint256"
        }
      ],
      "name": "MintingLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMintingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintingFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMintingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPriceTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceTolerance",
          "type": "uint256"
        }
      ],
      "name": "UpdatedPriceTolerance",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "addWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mintage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mintage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintLimit",
          "type": "uint256"
        }
      ],
      "name": "updateMaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintingFee",
          "type": "uint256"
        }
      ],
      "name": "updateMintingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPriceTolerance",
          "type": "uint256"
        }
      ],
      "name": "updatePriceTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vusd",
      "outputs": [
        {
          "internalType": "contract IVUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8284c0eb8ba84d43c869f1c8692c94df2bdb41e62eaf2991c36fd207ef1bc923",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0x741da41e8f2493fB3b659Fd776fF8CEc24Cd5B95",
    "transactionIndex": 162,
    "gasUsed": "3740617",
    "logsBloom": "0x
    "blockHash": "0x11cd367bcea83d96c958dcdee2775605b73390ff2dbe0cd97326a1714aedb2c2",
    "transactionHash": "0x8284c0eb8ba84d43c869f1c8692c94df2bdb41e62eaf2991c36fd207ef1bc923",
    "logs": [
      {
        "transactionIndex": 162,
        "blockNumber": 21882165,
        "transactionHash": "0x8284c0eb8ba84d43c869f1c8692c94df2bdb41e62eaf2991c36fd207ef1bc923",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000741da41e8f2493fb3b659fd776ff8cec24cd5b95",
          "0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 473,
        "blockHash": "0x11cd367bcea83d96c958dcdee2775605b73390ff2dbe0cd97326a1714aedb2c2"
      },
      {
        "transactionIndex": 162,
        "blockNumber": 21882165,
        "transactionHash": "0x8284c0eb8ba84d43c869f1c8692c94df2bdb41e62eaf2991c36fd207ef1bc923",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000741da41e8f2493fb3b659fd776ff8cec24cd5b95",
          "0x00000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 474,
        "blockHash": "0x11cd367bcea83d96c958dcdee2775605b73390ff2dbe0cd97326a1714aedb2c2"
      },
      {
        "transactionIndex": 162,
        "blockNumber": 21882165,
        "transactionHash": "0x8284c0eb8ba84d43c869f1c8692c94df2bdb41e62eaf2991c36fd207ef1bc923",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000741da41e8f2493fb3b659fd776ff8cec24cd5b95",
          "0x000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 475,
        "blockHash": "0x11cd367bcea83d96c958dcdee2775605b73390ff2dbe0cd97326a1714aedb2c2"
      }
    ],
    "blockNumber": 21882165,
    "cumulativeGasUsed": "23547589",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x677ddbd918637E5F2c79e164D402454dE7dA8619",
    "500000000000000000000000000"
  ],
  "solcInputHash": "4250b1a14ac61511ae93302864f24eda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vusd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintLimit\",\"type\":\"uint256\"}],\"name\":\"MintingLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintingFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPriceTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceTolerance\",\"type\":\"uint256\"}],\"name\":\"UpdatedPriceTolerance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"addWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"calculateMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintLimit\",\"type\":\"uint256\"}],\"name\":\"updateMaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintingFee\",\"type\":\"uint256\"}],\"name\":\"updateMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPriceTolerance\",\"type\":\"uint256\"}],\"name\":\"updatePriceTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusd\",\"outputs\":[{\"internalType\":\"contract IVUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelistedToken(address,address,address)\":{\"details\":\"Add token address in whitelistedTokens list and add cToken in mapping\",\"params\":{\"_cToken\":\"CToken address correspond to _token\",\"_oracle\":\"Chainlink oracle address for token/USD feed\",\"_token\":\"address which we want to add in token list.\"}},\"calculateMintage(address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of _token being sent to calculate VUSD mintage.\",\"_token\":\"Address of token which will be deposited for this mintage\"},\"returns\":{\"_mintage\":\"VUSD mintage based on given input\"}},\"governor()\":{\"details\":\"Governor is defined in VUSD token contract only\"},\"mint(address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of _token being sent to mint VUSD amount.\",\"_token\":\"Address of token being deposited\"}},\"mint(address,uint256,address)\":{\"params\":{\"_amountIn\":\"Amount of _token\",\"_receiver\":\"Address of VUSD receiver\",\"_token\":\"Address of token being deposited\"}},\"mint(uint256)\":{\"params\":{\"_amount\":\"Amount of VUSD to mint\"}},\"removeWhitelistedToken(address)\":{\"params\":{\"_token\":\"address which we want to remove from token list.\"}},\"treasury()\":{\"details\":\"Treasury is defined in VUSD token contract only\"}},\"title\":\"Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedToken(address,address,address)\":{\"notice\":\"Add token as whitelisted token for VUSD system\"},\"availableMintage()\":{\"notice\":\"Check available mintage based on mint limit\"},\"calculateMintage(address,uint256)\":{\"notice\":\"Calculate minting amount of VUSD for given _token and its amountIn.\"},\"isWhitelistedToken(address)\":{\"notice\":\"Returns whether given address is whitelisted or not\"},\"mint(address,uint256)\":{\"notice\":\"Mint VUSD\"},\"mint(address,uint256,address)\":{\"notice\":\"Mint VUSD\"},\"mint(uint256)\":{\"notice\":\"Mint request amount of VUSD and use minted VUSD to add liquidity\"},\"removeWhitelistedToken(address)\":{\"notice\":\"Remove token from whitelisted tokens\"},\"updateMintingFee(uint256)\":{\"notice\":\"Update minting fee\"},\"updatePriceTolerance(uint256)\":{\"notice\":\"Update price deviation limit\"},\"whitelistedTokens()\":{\"notice\":\"Return list of whitelisted tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/chainlink/IAggregatorV3.sol\\\";\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IVUSD.sol\\\";\\n\\n/// @title Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.\\ncontract Minter is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant NAME = \\\"VUSD-Minter\\\";\\n    string public constant VERSION = \\\"1.4.0\\\";\\n\\n    IVUSD public immutable vusd;\\n\\n    uint256 public mintingFee; // Default no fee\\n    uint256 public maxMintLimit; // Maximum VUSD can be minted\\n\\n    uint256 public constant MAX_BPS = 10_000; // 10_000 = 100%\\n    uint256 public priceTolerance = 100; // 1% based on BPS\\n\\n    // Token => cToken mapping\\n    mapping(address => address) public cTokens;\\n    // Token => oracle mapping\\n    mapping(address => address) public oracles;\\n\\n    EnumerableSet.AddressSet private _whitelistedTokens;\\n\\n    // Default whitelist token addresses\\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    // cToken addresses for default whitelisted tokens\\n    //solhint-disable const-name-snakecase\\n    address private constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address private constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n    address private constant cUSDT = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\\n\\n    // Chainlink price oracle for default whitelisted tokens\\n    address private constant DAI_USD = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;\\n    address private constant USDC_USD = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;\\n    address private constant USDT_USD = 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D;\\n\\n    event UpdatedMintingFee(uint256 previousMintingFee, uint256 newMintingFee);\\n    event UpdatedPriceTolerance(uint256 previousPriceTolerance, uint256 newPriceTolerance);\\n    event MintingLimitUpdated(uint256 previousMintLimit, uint256 newMintLimit);\\n\\n    constructor(address _vusd, uint256 _maxMintLimit) {\\n        require(_vusd != address(0), \\\"vusd-address-is-zero\\\");\\n        vusd = IVUSD(_vusd);\\n        maxMintLimit = _maxMintLimit;\\n        // Add token into the list, add oracle and cToken into the mapping and approve cToken to spend token\\n        _addToken(DAI, cDAI, DAI_USD);\\n        _addToken(USDC, cUSDC, USDC_USD);\\n        _addToken(USDT, cUSDT, USDT_USD);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n    /**\\n     * @notice Add token as whitelisted token for VUSD system\\n     * @dev Add token address in whitelistedTokens list and add cToken in mapping\\n     * @param _token address which we want to add in token list.\\n     * @param _cToken CToken address correspond to _token\\n     * @param _oracle Chainlink oracle address for token/USD feed\\n     */\\n    function addWhitelistedToken(\\n        address _token,\\n        address _cToken,\\n        address _oracle\\n    ) external onlyGovernor {\\n        require(_token != address(0), \\\"token-address-is-zero\\\");\\n        require(_cToken != address(0), \\\"cToken-address-is-zero\\\");\\n        require(_oracle != address(0), \\\"oracle-address-is-zero\\\");\\n        _addToken(_token, _cToken, _oracle);\\n    }\\n\\n    /**\\n     * @notice Remove token from whitelisted tokens\\n     * @param _token address which we want to remove from token list.\\n     */\\n    function removeWhitelistedToken(address _token) external onlyGovernor {\\n        require(_whitelistedTokens.remove(_token), \\\"remove-from-list-failed\\\");\\n        IERC20(_token).safeApprove(cTokens[_token], 0);\\n        delete cTokens[_token];\\n        delete oracles[_token];\\n    }\\n\\n    /**\\n     * @notice Mint request amount of VUSD and use minted VUSD to add liquidity\\n     * @param _amount Amount of VUSD to mint\\n     */\\n    function mint(uint256 _amount) external onlyGovernor {\\n        uint256 _availableMintage = availableMintage();\\n        require(_availableMintage >= _amount, \\\"mint-limit-reached\\\");\\n        vusd.mint(_msgSender(), _amount);\\n    }\\n\\n    /// @notice Update minting fee\\n    function updateMintingFee(uint256 _newMintingFee) external onlyGovernor {\\n        require(_newMintingFee <= MAX_BPS, \\\"minting-fee-limit-reached\\\");\\n        require(mintingFee != _newMintingFee, \\\"same-minting-fee\\\");\\n        emit UpdatedMintingFee(mintingFee, _newMintingFee);\\n        mintingFee = _newMintingFee;\\n    }\\n\\n    function updateMaxMintAmount(uint256 _newMintLimit) external onlyGovernor {\\n        uint256 _currentMintLimit = maxMintLimit;\\n        require(_currentMintLimit != _newMintLimit, \\\"same-mint-limit\\\");\\n        emit MintingLimitUpdated(_currentMintLimit, _newMintLimit);\\n        maxMintLimit = _newMintLimit;\\n    }\\n\\n    /// @notice Update price deviation limit\\n    function updatePriceTolerance(uint256 _newPriceTolerance) external onlyGovernor {\\n        require(_newPriceTolerance <= MAX_BPS, \\\"price-deviation-is-invalid\\\");\\n        uint256 _currentPriceTolerance = priceTolerance;\\n        require(_currentPriceTolerance != _newPriceTolerance, \\\"same-price-deviation-limit\\\");\\n        emit UpdatedPriceTolerance(_currentPriceTolerance, _newPriceTolerance);\\n        priceTolerance = _newPriceTolerance;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amountIn Amount of _token being sent to mint VUSD amount.\\n     */\\n    function mint(address _token, uint256 _amountIn) external nonReentrant {\\n        _mint(_token, _amountIn, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amountIn Amount of _token\\n     * @param _receiver Address of VUSD receiver\\n     */\\n    function mint(\\n        address _token,\\n        uint256 _amountIn,\\n        address _receiver\\n    ) external nonReentrant {\\n        _mint(_token, _amountIn, _receiver);\\n    }\\n\\n    /**\\n     * @notice Calculate minting amount of VUSD for given _token and its amountIn.\\n     * @param _token Address of token which will be deposited for this mintage\\n     * @param _amountIn Amount of _token being sent to calculate VUSD mintage.\\n     * @return _mintage VUSD mintage based on given input\\n     */\\n    function calculateMintage(address _token, uint256 _amountIn) external view returns (uint256 _mintage) {\\n        if (_whitelistedTokens.contains(_token)) {\\n            _mintage = _calculateMintage(_token, _amountIn);\\n        }\\n    }\\n\\n    /// @notice Returns whether given address is whitelisted or not\\n    function isWhitelistedToken(address _address) external view returns (bool) {\\n        return _whitelistedTokens.contains(_address);\\n    }\\n\\n    /// @notice Return list of whitelisted tokens\\n    function whitelistedTokens() external view returns (address[] memory) {\\n        return _whitelistedTokens.values();\\n    }\\n\\n    /// @notice Check available mintage based on mint limit\\n    function availableMintage() public view returns (uint256 _mintage) {\\n        uint256 _totalSupply = vusd.totalSupply();\\n        uint256 _mintageLimit = maxMintLimit;\\n        if (_mintageLimit > _totalSupply) {\\n            _mintage = _mintageLimit - _totalSupply;\\n        }\\n    }\\n\\n    /// @dev Treasury is defined in VUSD token contract only\\n    function treasury() public view returns (address) {\\n        return vusd.treasury();\\n    }\\n\\n    /// @dev Governor is defined in VUSD token contract only\\n    function governor() public view returns (address) {\\n        return vusd.governor();\\n    }\\n\\n    /**\\n     * @dev Add _token into the list, add _cToken in mapping and\\n     * approve cToken to spend token\\n     */\\n    function _addToken(\\n        address _token,\\n        address _cToken,\\n        address _oracle\\n    ) internal {\\n        require(_whitelistedTokens.add(_token), \\\"add-in-list-failed\\\");\\n\\n        uint8 _oracleDecimal = IAggregatorV3(_oracle).decimals();\\n        (, int256 _price, , , ) = IAggregatorV3(_oracle).latestRoundData();\\n        uint256 _latestPrice = uint256(_price);\\n\\n        // Token is expected to be stable coin only. Ideal price is 1 USD\\n        uint256 _oneUSD = 10**_oracleDecimal;\\n        uint256 _priceTolerance = (_oneUSD * priceTolerance) / MAX_BPS;\\n        uint256 _priceUpperBound = _oneUSD + _priceTolerance;\\n        uint256 _priceLowerBound = _oneUSD - _priceTolerance;\\n\\n        // Avoid accidentally add wrong oracle or non-stable coin.\\n        require(_latestPrice <= _priceUpperBound && _latestPrice >= _priceLowerBound, \\\"price-is-invalid\\\");\\n\\n        oracles[_token] = _oracle;\\n        cTokens[_token] = _cToken;\\n        IERC20(_token).safeApprove(_cToken, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Mint VUSD\\n     * @param _token Address of token being deposited\\n     * @param _amountIn Amount of _token\\n     * @param _receiver Address of VUSD receiver\\n     */\\n    function _mint(\\n        address _token,\\n        uint256 _amountIn,\\n        address _receiver\\n    ) internal returns (uint256 _mintage) {\\n        require(_whitelistedTokens.contains(_token), \\\"token-is-not-supported\\\");\\n        _mintage = _calculateMintage(_token, _amountIn);\\n        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amountIn);\\n        address _cToken = cTokens[_token];\\n        require(CToken(_cToken).mint(IERC20(_token).balanceOf(address(this))) == 0, \\\"cToken-mint-failed\\\");\\n        IERC20(_cToken).safeTransfer(treasury(), IERC20(_cToken).balanceOf(address(this)));\\n        vusd.mint(_receiver, _mintage);\\n    }\\n\\n    /**\\n     * @notice Calculate mintage based on mintingFee, if any.\\n     * Also covert _token defined decimal amount to 18 decimal amount\\n     * @return _mintage VUSD mintage based on given input\\n     */\\n    function _calculateMintage(address _token, uint256 _amountIn) internal view returns (uint256 _mintage) {\\n        IAggregatorV3 _oracle = IAggregatorV3(oracles[_token]);\\n        uint8 _oracleDecimal = IAggregatorV3(_oracle).decimals();\\n        (, int256 _price, , , ) = IAggregatorV3(_oracle).latestRoundData();\\n        uint256 _latestPrice = uint256(_price);\\n\\n        // Token is expected to be stable coin only. Ideal price is 1 USD\\n        uint256 _oneUSD = 10**_oracleDecimal;\\n        uint256 _priceTolerance = (_oneUSD * priceTolerance) / MAX_BPS;\\n        uint256 _priceUpperBound = _oneUSD + _priceTolerance;\\n        uint256 _priceLowerBound = _oneUSD - _priceTolerance;\\n\\n        require(_latestPrice <= _priceUpperBound && _latestPrice >= _priceLowerBound, \\\"oracle-price-exceed-tolerance\\\");\\n\\n        uint256 _actualAmountIn = (_amountIn * (MAX_BPS - mintingFee)) / MAX_BPS;\\n        _mintage = (_actualAmountIn * _latestPrice) / _oneUSD;\\n        _mintage = _mintage * 10**(18 - IERC20Metadata(_token).decimals());\\n        uint256 _availableMintage = availableMintage();\\n        require(_availableMintage >= _mintage, \\\"mint-limit-reached\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2a8b979dd8a21f07bab7bbc1b775cbeb5f68d050da126b42b362ec1bdac05caa\",\"license\":\"MIT\"},\"contracts/interfaces/IVUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVUSD is IERC20, IERC20Permit {\\n    function burnFrom(address _user, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function updateMinter(address _newMinter) external;\\n\\n    function updateTreasury(address _newTreasury) external;\\n\\n    function governor() external view returns (address _governor);\\n\\n    function minter() external view returns (address _minter);\\n\\n    function treasury() external view returns (address _treasury);\\n}\\n\",\"keccak256\":\"0x8d71611c4eed15692750ddb017ea54f04681b32d89f10a319c9929abda4a4cda\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x997961bc6c7780fbc360cc48a7f855f9abe92cf719913f0a906da96d8df6cecd\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5798fc76da80caa3f56194b6b88533e589a28136def57e886d6c667fe4218f25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260646003553480156200001657600080fd5b5060405162004dd038038062004dd083398181016040528101906200003c919062000ad5565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ae9062000e5e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060028190555062000144736b175474e89094c44da98b954eedeac495271d0f735d3a536e4d6dbd6114cc1ead35777bab948e364373aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9620001ea60201b60201c565b6200019373a0b86991c6218b36c1d19d4a2e9eb0ce3606eb487339aa39c021dfbae8fac545936693ac917d5e7563738fffffd4afb6115b954bd326cbe7b4ba576818f6620001ea60201b60201c565b620001e273dac17f958d2ee523a2206206994597c13d831ec773f650c3d88d12db855b8bf7d11be6c55a4e07dcc9733e7d1eab13ad0104d2750b8863b489d65364e32d620001ea60201b60201c565b50506200159d565b620002058360066200056360201b620011941790919060201c565b62000247576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200023e9062000ea2565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200029057600080fd5b505afa158015620002a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cb919062000bf0565b905060008273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156200031657600080fd5b505afa1580156200032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000351919062000b6e565b5050509150506000819050600083600a6200036d91906200106e565b9050600061271060035483620003849190620011ab565b62000390919062000fdb565b905060008183620003a2919062000f7e565b905060008284620003b491906200120c565b9050818511158015620003c75750808510155b62000409576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004009062000ec4565b60405180910390fd5b87600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000557897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c73ffffffffffffffffffffffffffffffffffffffff166200059b60201b620011c4179092919060201c565b50505050505050505050565b600062000593836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200070d60201b60201c565b905092915050565b60008114806200063b575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401620005e592919062000de0565b60206040518083038186803b158015620005fe57600080fd5b505afa15801562000613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000639919062000b42565b145b6200067d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006749062000f2a565b60405180910390fd5b620007088363095ea7b360e01b84846040516024016200069f92919062000e0d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200078760201b60201c565b505050565b60006200072183836200085b60201b60201c565b6200077c57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000781565b600090505b92915050565b6000620007f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200087e60201b62001322179092919060201c565b905060008151111562000856578080602001905181019062000813919062000b16565b62000855576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200084c9062000f08565b60405180910390fd5b5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b60606200089584846000856200089e60201b60201c565b90509392505050565b606082471015620008e6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008dd9062000e80565b60405180910390fd5b620008f785620009cc60201b60201c565b62000939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009309062000ee6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405162000964919062000dc7565b60006040518083038185875af1925050503d8060008114620009a3576040519150601f19603f3d011682016040523d82523d6000602084013e620009a8565b606091505b5091509150620009c0828286620009df60201b60201c565b92505050949350505050565b600080823b905060008111915050919050565b60608315620009f15782905062000a44565b60008351111562000a055782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a3b919062000e3a565b60405180910390fd5b9392505050565b60008151905062000a5c8162001501565b92915050565b60008151905062000a73816200151b565b92915050565b60008151905062000a8a8162001535565b92915050565b60008151905062000aa1816200154f565b92915050565b60008151905062000ab88162001583565b92915050565b60008151905062000acf8162001569565b92915050565b6000806040838503121562000ae957600080fd5b600062000af98582860162000a4b565b925050602062000b0c8582860162000a90565b9150509250929050565b60006020828403121562000b2957600080fd5b600062000b398482850162000a62565b91505092915050565b60006020828403121562000b5557600080fd5b600062000b658482850162000a90565b91505092915050565b600080600080600060a0868803121562000b8757600080fd5b600062000b978882890162000aa7565b955050602062000baa8882890162000a79565b945050604062000bbd8882890162000a90565b935050606062000bd08882890162000a90565b925050608062000be38882890162000aa7565b9150509295509295909350565b60006020828403121562000c0357600080fd5b600062000c138482850162000abe565b91505092915050565b62000c278162001247565b82525050565b600062000c3a8262000f4c565b62000c46818562000f62565b935062000c58818560208601620012be565b80840191505092915050565b600062000c718262000f57565b62000c7d818562000f6d565b935062000c8f818560208601620012be565b62000c9a8162001352565b840191505092915050565b600062000cb460148362000f6d565b915062000cc18262001370565b602082019050919050565b600062000cdb60268362000f6d565b915062000ce88262001399565b604082019050919050565b600062000d0260128362000f6d565b915062000d0f82620013e8565b602082019050919050565b600062000d2960108362000f6d565b915062000d368262001411565b602082019050919050565b600062000d50601d8362000f6d565b915062000d5d826200143a565b602082019050919050565b600062000d77602a8362000f6d565b915062000d848262001463565b604082019050919050565b600062000d9e60368362000f6d565b915062000dab82620014b2565b604082019050919050565b62000dc18162001291565b82525050565b600062000dd5828462000c2d565b915081905092915050565b600060408201905062000df7600083018562000c1c565b62000e06602083018462000c1c565b9392505050565b600060408201905062000e24600083018562000c1c565b62000e33602083018462000db6565b9392505050565b6000602082019050818103600083015262000e56818462000c64565b905092915050565b6000602082019050818103600083015262000e798162000ca5565b9050919050565b6000602082019050818103600083015262000e9b8162000ccc565b9050919050565b6000602082019050818103600083015262000ebd8162000cf3565b9050919050565b6000602082019050818103600083015262000edf8162000d1a565b9050919050565b6000602082019050818103600083015262000f018162000d41565b9050919050565b6000602082019050818103600083015262000f238162000d68565b9050919050565b6000602082019050818103600083015262000f458162000d8f565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600062000f8b8262001291565b915062000f988362001291565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000fd05762000fcf620012f4565b5b828201905092915050565b600062000fe88262001291565b915062000ff58362001291565b92508262001008576200100762001323565b5b828204905092915050565b6000808291508390505b600185111562001065578086048111156200103d576200103c620012f4565b5b60018516156200104d5780820291505b80810290506200105d8562001363565b94506200101d565b94509492505050565b60006200107b8262001291565b915062001088836200129b565b9250620010b77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620010bf565b905092915050565b600082620010d15760019050620011a4565b81620010e15760009050620011a4565b8160018114620010fa576002811462001105576200113b565b6001915050620011a4565b60ff8411156200111a5762001119620012f4565b5b8360020a915084821115620011345762001133620012f4565b5b50620011a4565b5060208310610133831016604e8410600b8410161715620011755782820a9050838111156200116f576200116e620012f4565b5b620011a4565b62001184848484600162001013565b925090508184048111156200119e576200119d620012f4565b5b81810290505b9392505050565b6000620011b88262001291565b9150620011c58362001291565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620012015762001200620012f4565b5b828202905092915050565b6000620012198262001291565b9150620012268362001291565b9250828210156200123c576200123b620012f4565b5b828203905092915050565b6000620012548262001271565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015620012de578082015181840152602081019050620012c1565b83811115620012ee576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f767573642d616464726573732d69732d7a65726f000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f70726963652d69732d696e76616c696400000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6200150c8162001247565b81146200151857600080fd5b50565b62001526816200125b565b81146200153257600080fd5b50565b620015408162001267565b81146200154c57600080fd5b50565b6200155a8162001291565b81146200156657600080fd5b50565b62001574816200129b565b81146200158057600080fd5b50565b6200158e81620012a8565b81146200159a57600080fd5b50565b60805160601c6137f1620015df6000396000818161044001528181610aef01528181610bd101528181610d7801528181611133015261164401526137f16000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806361d027b3116100c3578063addd50991161007c578063addd50991461037a578063c0275a25146103aa578063c760af5c146103c6578063edac5203146103e2578063fd967f4714610400578063ffa1ad741461041e5761014d565b806361d027b3146102a457806370e2f827146102c25780638c0b09d0146102e0578063a0712d6814610310578063a3f4df7e1461032c578063ab37f4861461034a5761014d565b806340c10f191161011557806340c10f19146101e0578063482b6014146101fc5780635166c96a1461022c57806359011cd11461024a5780635a64ad95146102685780635e1762a0146102865761014d565b80630c340a24146101525780630d4d1513146101705780631c88705d1461018c57806320ab954e146101a8578063380a0df2146101c4575b600080fd5b61015a61043c565b6040516101679190612af3565b60405180910390f35b61018a60048036038101906101859190612568565b6104e1565b005b6101a660048036038101906101a1919061248b565b610548565b005b6101c260048036038101906101bd91906124dd565b610769565b005b6101de60048036038101906101d991906125e0565b610945565b005b6101fa60048036038101906101f5919061252c565b610a4f565b005b6102166004803603810190610211919061252c565b610abc565b6040516102239190612eb1565b60405180910390f35b610234610aea565b6040516102419190612eb1565b60405180910390f35b610252610bb0565b60405161025f9190612eb1565b60405180910390f35b610270610bb6565b60405161027d9190612eb1565b60405180910390f35b61028e610bbc565b60405161029b9190612b97565b60405180910390f35b6102ac610bcd565b6040516102b99190612af3565b60405180910390f35b6102ca610c72565b6040516102d79190612eb1565b60405180910390f35b6102fa60048036038101906102f5919061248b565b610c78565b6040516103079190612af3565b60405180910390f35b61032a600480360381019061032591906125e0565b610cab565b005b610334610e0e565b6040516103419190612bef565b60405180910390f35b610364600480360381019061035f919061248b565b610e47565b6040516103719190612bb9565b60405180910390f35b610394600480360381019061038f919061248b565b610e64565b6040516103a19190612af3565b60405180910390f35b6103c460048036038101906103bf91906125e0565b610e97565b005b6103e060048036038101906103db91906125e0565b610fe2565b005b6103ea611131565b6040516103f79190612bd4565b60405180910390f35b610408611155565b6040516104159190612eb1565b60405180910390f35b61042661115b565b6040516104339190612bef565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a457600080fd5b505afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc91906124b4565b905090565b60026000541415610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e90612e71565b60405180910390fd5b600260008190555061053a83838361133a565b506001600081905550505050565b61055061043c565b73ffffffffffffffffffffffffffffffffffffffff1661056e6116d7565b73ffffffffffffffffffffffffffffffffffffffff16146105c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bb90612c71565b60405180910390fd5b6105d88160066116df90919063ffffffff16565b610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90612d11565b60405180910390fd5b6106a2600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff166111c49092919063ffffffff16565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b61077161043c565b73ffffffffffffffffffffffffffffffffffffffff1661078f6116d7565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc90612c71565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90612c91565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc90612c11565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c90612d71565b60405180910390fd5b61094083838361170f565b505050565b61094d61043c565b73ffffffffffffffffffffffffffffffffffffffff1661096b6116d7565b73ffffffffffffffffffffffffffffffffffffffff16146109c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b890612c71565b60405180910390fd5b6000600254905081811415610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290612c31565b60405180910390fd5b7f8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb8183604051610a3c929190612ecc565b60405180910390a1816002819055505050565b60026000541415610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c90612e71565b60405180910390fd5b6002600081905550610aaf8282610aaa6116d7565b61133a565b5060016000819055505050565b6000610ad2836006611a6190919063ffffffff16565b15610ae457610ae18383611a91565b90505b92915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190612609565b90506000600254905081811115610bab578181610ba891906131b2565b92505b505090565b60035481565b60015481565b6060610bc86006611de9565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906124b4565b905090565b60025481565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cb361043c565b73ffffffffffffffffffffffffffffffffffffffff16610cd16116d7565b73ffffffffffffffffffffffffffffffffffffffff1614610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90612c71565b60405180910390fd5b6000610d31610aea565b905081811015610d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6d90612d91565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f19610dba6116d7565b846040518363ffffffff1660e01b8152600401610dd8929190612b6e565b600060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050505050565b6040518060400160405280600b81526020017f565553442d4d696e74657200000000000000000000000000000000000000000081525081565b6000610e5d826006611a6190919063ffffffff16565b9050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e9f61043c565b73ffffffffffffffffffffffffffffffffffffffff16610ebd6116d7565b73ffffffffffffffffffffffffffffffffffffffff1614610f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0a90612c71565b60405180910390fd5b612710811115610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f90612db1565b60405180910390fd5b806001541415610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490612e51565b60405180910390fd5b7f85735a3ef929fdaaf946ddf4b97deec396e7347cbb47fea3d6a8f3934e1b02e360015482604051610fd0929190612ecc565b60405180910390a18060018190555050565b610fea61043c565b73ffffffffffffffffffffffffffffffffffffffff166110086116d7565b73ffffffffffffffffffffffffffffffffffffffff161461105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105590612c71565b60405180910390fd5b6127108111156110a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109a90612d51565b60405180910390fd5b60006003549050818114156110ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e490612dd1565b60405180910390fd5b7f3cb23ae97dcd603618548f333b96dbb9e41059b6fd0eb7face59058c5ac3b11b818360405161111e929190612ecc565b60405180910390a1816003819055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61271081565b6040518060400160405280600581526020017f312e342e3000000000000000000000000000000000000000000000000000000081525081565b60006111bc836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611e0a565b905092915050565b600081148061125d575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161120b929190612b0e565b60206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190612609565b145b61129c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129390612e91565b60405180910390fd5b61131d8363095ea7b360e01b84846040516024016112bb929190612b6e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e7a565b505050565b60606113318484600085611f41565b90509392505050565b6000611350846006611a6190919063ffffffff16565b61138f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138690612cb1565b60405180910390fd5b6113998484611a91565b90506113cf6113a66116d7565b30858773ffffffffffffffffffffffffffffffffffffffff16612055909392919063ffffffff16565b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d688773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161148a9190612af3565b60206040518083038186803b1580156114a257600080fd5b505afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190612609565b6040518263ffffffff1660e01b81526004016114f69190612eb1565b602060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115489190612609565b14611588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157f90612e31565b60405180910390fd5b611642611593610bcd565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115cc9190612af3565b60206040518083038186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c9190612609565b8373ffffffffffffffffffffffffffffffffffffffff166120de9092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b815260040161169d929190612b6e565b600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b50505050509392505050565b600033905090565b6000611707836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612164565b905092915050565b61172383600661119490919063ffffffff16565b611762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175990612cf1565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117aa57600080fd5b505afa1580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e291906126a9565b905060008273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561182c57600080fd5b505afa158015611840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118649190612632565b5050509150506000819050600083600a61187e919061303a565b90506000612710600354836118939190613158565b61189d9190612fb6565b9050600081836118ad9190612f60565b9050600082846118bd91906131b2565b90508185111580156118cf5750808510155b61190e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190590612d31565b60405180910390fd5b87600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a55897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c73ffffffffffffffffffffffffffffffffffffffff166111c49092919063ffffffff16565b50505050505050505050565b6000611a89836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6122ea565b905092915050565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3e57600080fd5b505afa158015611b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7691906126a9565b905060008273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611bc057600080fd5b505afa158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf89190612632565b5050509150506000819050600083600a611c12919061303a565b9050600061271060035483611c279190613158565b611c319190612fb6565b905060008183611c419190612f60565b905060008284611c5191906131b2565b9050818511158015611c635750808510155b611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9990612cd1565b60405180910390fd5b6000612710600154612710611cb791906131b2565b8c611cc29190613158565b611ccc9190612fb6565b9050848682611cdb9190613158565b611ce59190612fb6565b99508b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2d57600080fd5b505afa158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6591906126a9565b6012611d7191906131e6565b600a611d7d919061303a565b8a611d889190613158565b99506000611d94610aea565b90508a811015611dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd090612d91565b60405180910390fd5b5050505050505050505092915050565b60606000611df98360000161230d565b905060608190508092505050919050565b6000611e1683836122ea565b611e6f578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611e74565b600090505b92915050565b6000611edc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113229092919063ffffffff16565b9050600081511115611f3c5780806020019051810190611efc91906125b7565b611f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3290612e11565b60405180910390fd5b5b505050565b606082471015611f86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7d90612c51565b60405180910390fd5b611f8f85612369565b611fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc590612df1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ff79190612adc565b60006040518083038185875af1925050503d8060008114612034576040519150601f19603f3d011682016040523d82523d6000602084013e612039565b606091505b509150915061204982828661237c565b92505050949350505050565b6120d8846323b872dd60e01b85858560405160240161207693929190612b37565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e7a565b50505050565b61215f8363a9059cbb60e01b84846040516024016120fd929190612b6e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e7a565b505050565b600080836001016000848152602001908152602001600020549050600081146122de57600060018261219691906131b2565b90506000600186600001805490506121ae91906131b2565b90508181146122695760008660000182815481106121f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508087600001848154811061223f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806122a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506122e4565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561235d57602002820191906000526020600020905b815481526020019060010190808311612349575b50505050509050919050565b600080823b905060008111915050919050565b6060831561238c578290506123dc565b60008351111561239f5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d39190612bef565b60405180910390fd5b9392505050565b6000813590506123f281613731565b92915050565b60008151905061240781613731565b92915050565b60008151905061241c81613748565b92915050565b6000815190506124318161375f565b92915050565b60008135905061244681613776565b92915050565b60008151905061245b81613776565b92915050565b600081519050612470816137a4565b92915050565b6000815190506124858161378d565b92915050565b60006020828403121561249d57600080fd5b60006124ab848285016123e3565b91505092915050565b6000602082840312156124c657600080fd5b60006124d4848285016123f8565b91505092915050565b6000806000606084860312156124f257600080fd5b6000612500868287016123e3565b9350506020612511868287016123e3565b9250506040612522868287016123e3565b9150509250925092565b6000806040838503121561253f57600080fd5b600061254d858286016123e3565b925050602061255e85828601612437565b9150509250929050565b60008060006060848603121561257d57600080fd5b600061258b868287016123e3565b935050602061259c86828701612437565b92505060406125ad868287016123e3565b9150509250925092565b6000602082840312156125c957600080fd5b60006125d78482850161240d565b91505092915050565b6000602082840312156125f257600080fd5b600061260084828501612437565b91505092915050565b60006020828403121561261b57600080fd5b60006126298482850161244c565b91505092915050565b600080600080600060a0868803121561264a57600080fd5b600061265888828901612461565b955050602061266988828901612422565b945050604061267a8882890161244c565b935050606061268b8882890161244c565b925050608061269c88828901612461565b9150509295509295909350565b6000602082840312156126bb57600080fd5b60006126c984828501612476565b91505092915050565b60006126de83836126ea565b60208301905092915050565b6126f38161321a565b82525050565b6127028161321a565b82525050565b600061271382612f05565b61271d8185612f33565b935061272883612ef5565b8060005b8381101561275957815161274088826126d2565b975061274b83612f26565b92505060018101905061272c565b5085935050505092915050565b61276f8161322c565b82525050565b600061278082612f10565b61278a8185612f44565b935061279a8185602086016132b3565b80840191505092915050565b6127af8161328f565b82525050565b60006127c082612f1b565b6127ca8185612f4f565b93506127da8185602086016132b3565b6127e381613344565b840191505092915050565b60006127fb601683612f4f565b915061280682613362565b602082019050919050565b600061281e600f83612f4f565b91506128298261338b565b602082019050919050565b6000612841602683612f4f565b915061284c826133b4565b604082019050919050565b6000612864601a83612f4f565b915061286f82613403565b602082019050919050565b6000612887601583612f4f565b91506128928261342c565b602082019050919050565b60006128aa601683612f4f565b91506128b582613455565b602082019050919050565b60006128cd601d83612f4f565b91506128d88261347e565b602082019050919050565b60006128f0601283612f4f565b91506128fb826134a7565b602082019050919050565b6000612913601783612f4f565b915061291e826134d0565b602082019050919050565b6000612936601083612f4f565b9150612941826134f9565b602082019050919050565b6000612959601a83612f4f565b915061296482613522565b602082019050919050565b600061297c601683612f4f565b91506129878261354b565b602082019050919050565b600061299f601283612f4f565b91506129aa82613574565b602082019050919050565b60006129c2601983612f4f565b91506129cd8261359d565b602082019050919050565b60006129e5601a83612f4f565b91506129f0826135c6565b602082019050919050565b6000612a08601d83612f4f565b9150612a13826135ef565b602082019050919050565b6000612a2b602a83612f4f565b9150612a3682613618565b604082019050919050565b6000612a4e601283612f4f565b9150612a5982613667565b602082019050919050565b6000612a71601083612f4f565b9150612a7c82613690565b602082019050919050565b6000612a94601f83612f4f565b9150612a9f826136b9565b602082019050919050565b6000612ab7603683612f4f565b9150612ac2826136e2565b604082019050919050565b612ad681613262565b82525050565b6000612ae88284612775565b915081905092915050565b6000602082019050612b0860008301846126f9565b92915050565b6000604082019050612b2360008301856126f9565b612b3060208301846126f9565b9392505050565b6000606082019050612b4c60008301866126f9565b612b5960208301856126f9565b612b666040830184612acd565b949350505050565b6000604082019050612b8360008301856126f9565b612b906020830184612acd565b9392505050565b60006020820190508181036000830152612bb18184612708565b905092915050565b6000602082019050612bce6000830184612766565b92915050565b6000602082019050612be960008301846127a6565b92915050565b60006020820190508181036000830152612c0981846127b5565b905092915050565b60006020820190508181036000830152612c2a816127ee565b9050919050565b60006020820190508181036000830152612c4a81612811565b9050919050565b60006020820190508181036000830152612c6a81612834565b9050919050565b60006020820190508181036000830152612c8a81612857565b9050919050565b60006020820190508181036000830152612caa8161287a565b9050919050565b60006020820190508181036000830152612cca8161289d565b9050919050565b60006020820190508181036000830152612cea816128c0565b9050919050565b60006020820190508181036000830152612d0a816128e3565b9050919050565b60006020820190508181036000830152612d2a81612906565b9050919050565b60006020820190508181036000830152612d4a81612929565b9050919050565b60006020820190508181036000830152612d6a8161294c565b9050919050565b60006020820190508181036000830152612d8a8161296f565b9050919050565b60006020820190508181036000830152612daa81612992565b9050919050565b60006020820190508181036000830152612dca816129b5565b9050919050565b60006020820190508181036000830152612dea816129d8565b9050919050565b60006020820190508181036000830152612e0a816129fb565b9050919050565b60006020820190508181036000830152612e2a81612a1e565b9050919050565b60006020820190508181036000830152612e4a81612a41565b9050919050565b60006020820190508181036000830152612e6a81612a64565b9050919050565b60006020820190508181036000830152612e8a81612a87565b9050919050565b60006020820190508181036000830152612eaa81612aaa565b9050919050565b6000602082019050612ec66000830184612acd565b92915050565b6000604082019050612ee16000830185612acd565b612eee6020830184612acd565b9392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f6b82613262565b9150612f7683613262565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612fab57612faa6132e6565b5b828201905092915050565b6000612fc182613262565b9150612fcc83613262565b925082612fdc57612fdb613315565b5b828204905092915050565b6000808291508390505b60018511156130315780860481111561300d5761300c6132e6565b5b600185161561301c5780820291505b808102905061302a85613355565b9450612ff1565b94509492505050565b600061304582613262565b91506130508361326c565b925061307d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613085565b905092915050565b6000826130955760019050613151565b816130a35760009050613151565b81600181146130b957600281146130c3576130f2565b6001915050613151565b60ff8411156130d5576130d46132e6565b5b8360020a9150848211156130ec576130eb6132e6565b5b50613151565b5060208310610133831016604e8410600b84101617156131275782820a905083811115613122576131216132e6565b5b613151565b6131348484846001612fe7565b9250905081840481111561314b5761314a6132e6565b5b81810290505b9392505050565b600061316382613262565b915061316e83613262565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131a7576131a66132e6565b5b828202905092915050565b60006131bd82613262565b91506131c883613262565b9250828210156131db576131da6132e6565b5b828203905092915050565b60006131f18261326c565b91506131fc8361326c565b92508282101561320f5761320e6132e6565b5b828203905092915050565b600061322582613242565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b600061329a826132a1565b9050919050565b60006132ac82613242565b9050919050565b60005b838110156132d15780820151818401526020810190506132b6565b838111156132e0576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f73616d652d6d696e742d6c696d69740000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000600082015250565b7f746f6b656e2d616464726573732d69732d7a65726f0000000000000000000000600082015250565b7f746f6b656e2d69732d6e6f742d737570706f7274656400000000000000000000600082015250565b7f6f7261636c652d70726963652d6578636565642d746f6c6572616e6365000000600082015250565b7f6164642d696e2d6c6973742d6661696c65640000000000000000000000000000600082015250565b7f72656d6f76652d66726f6d2d6c6973742d6661696c6564000000000000000000600082015250565b7f70726963652d69732d696e76616c696400000000000000000000000000000000600082015250565b7f70726963652d646576696174696f6e2d69732d696e76616c6964000000000000600082015250565b7f6f7261636c652d616464726573732d69732d7a65726f00000000000000000000600082015250565b7f6d696e742d6c696d69742d726561636865640000000000000000000000000000600082015250565b7f6d696e74696e672d6665652d6c696d69742d7265616368656400000000000000600082015250565b7f73616d652d70726963652d646576696174696f6e2d6c696d6974000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f63546f6b656e2d6d696e742d6661696c65640000000000000000000000000000600082015250565b7f73616d652d6d696e74696e672d66656500000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b61373a8161321a565b811461374557600080fd5b50565b6137518161322c565b811461375c57600080fd5b50565b61376881613238565b811461377357600080fd5b50565b61377f81613262565b811461378a57600080fd5b50565b6137968161326c565b81146137a157600080fd5b50565b6137ad81613279565b81146137b857600080fd5b5056fea264697066735822122047a21de23d571ebf2c2460cee857fb759a814aa8036632c875a02ccfa8ead05664736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelistedToken(address,address,address)": {
        "details": "Add token address in whitelistedTokens list and add cToken in mapping",
        "params": {
          "_cToken": "CToken address correspond to _token",
          "_oracle": "Chainlink oracle address for token/USD feed",
          "_token": "address which we want to add in token list."
        }
      },
      "calculateMintage(address,uint256)": {
        "params": {
          "_amountIn": "Amount of _token being sent to calculate VUSD mintage.",
          "_token": "Address of token which will be deposited for this mintage"
        },
        "returns": {
          "_mintage": "VUSD mintage based on given input"
        }
      },
      "governor()": {
        "details": "Governor is defined in VUSD token contract only"
      },
      "mint(address,uint256)": {
        "params": {
          "_amountIn": "Amount of _token being sent to mint VUSD amount.",
          "_token": "Address of token being deposited"
        }
      },
      "mint(address,uint256,address)": {
        "params": {
          "_amountIn": "Amount of _token",
          "_receiver": "Address of VUSD receiver",
          "_token": "Address of token being deposited"
        }
      },
      "mint(uint256)": {
        "params": {
          "_amount": "Amount of VUSD to mint"
        }
      },
      "removeWhitelistedToken(address)": {
        "params": {
          "_token": "address which we want to remove from token list."
        }
      },
      "treasury()": {
        "details": "Treasury is defined in VUSD token contract only"
      }
    },
    "title": "Minter contract which will mint VUSD 1:1, less minting fee, with DAI, USDC or USDT.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedToken(address,address,address)": {
        "notice": "Add token as whitelisted token for VUSD system"
      },
      "availableMintage()": {
        "notice": "Check available mintage based on mint limit"
      },
      "calculateMintage(address,uint256)": {
        "notice": "Calculate minting amount of VUSD for given _token and its amountIn."
      },
      "isWhitelistedToken(address)": {
        "notice": "Returns whether given address is whitelisted or not"
      },
      "mint(address,uint256)": {
        "notice": "Mint VUSD"
      },
      "mint(address,uint256,address)": {
        "notice": "Mint VUSD"
      },
      "mint(uint256)": {
        "notice": "Mint request amount of VUSD and use minted VUSD to add liquidity"
      },
      "removeWhitelistedToken(address)": {
        "notice": "Remove token from whitelisted tokens"
      },
      "updateMintingFee(uint256)": {
        "notice": "Update minting fee"
      },
      "updatePriceTolerance(uint256)": {
        "notice": "Update price deviation limit"
      },
      "whitelistedTokens()": {
        "notice": "Return list of whitelisted tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Minter.sol:Minter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3056,
        "contract": "contracts/Minter.sol:Minter",
        "label": "mintingFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3058,
        "contract": "contracts/Minter.sol:Minter",
        "label": "maxMintLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3064,
        "contract": "contracts/Minter.sol:Minter",
        "label": "priceTolerance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3068,
        "contract": "contracts/Minter.sol:Minter",
        "label": "cTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3072,
        "contract": "contracts/Minter.sol:Minter",
        "label": "oracles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3075,
        "contract": "contracts/Minter.sol:Minter",
        "label": "_whitelistedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)2631_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2631_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2630,
            "contract": "contracts/Minter.sol:Minter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2330_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2330_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2325,
            "contract": "contracts/Minter.sol:Minter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2329,
            "contract": "contracts/Minter.sol:Minter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}